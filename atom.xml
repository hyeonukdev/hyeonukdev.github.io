<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Engineering</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyeonukdev.github.io/"/>
  <updated>2020-05-16T16:37:45.000Z</updated>
  <id>https://hyeonukdev.github.io/</id>
  
  <author>
    <name>Hyeonukdev</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>물리데이터베이스 - 키 종류</title>
    <link href="https://hyeonukdev.github.io/2020/05/17/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%ED%82%A4%EC%A2%85%EB%A5%98/"/>
    <id>https://hyeonukdev.github.io/2020/05/17/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%ED%82%A4%EC%A2%85%EB%A5%98/</id>
    <published>2020-05-16T16:37:45.000Z</published>
    <updated>2020-05-16T16:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="키의-개념"><a class="markdownIt-Anchor" href="#키의-개념"></a> 키의 개념</h3><ul><li>데이터베이스에서 조건에 만족하는 튜플을 찾거나 순서대로 정렬할 때 <u>튜플들을 서로 구분할 수 있는 기준</u>이 되는 <u>애트리뷰트</u></li><li>종류<ul><li>슈퍼키</li><li>후보키</li><li>기본키</li><li>대체키</li></ul></li></ul><h3 id="키의-특징"><a class="markdownIt-Anchor" href="#키의-특징"></a> 키의 특징</h3><ul><li>Uniqueness 유일성<ul><li>하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야 함</li></ul></li><li>Minimality 최소성<ul><li>릴레이션의 모든 튜플을 유일하게 식별하기 위해 꼭 필요한 속성만으로 구성</li></ul></li></ul><h3 id="키의-종류-개념도"><a class="markdownIt-Anchor" href="#키의-종류-개념도"></a> 키의 종류 개념도</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0517_01.png" alt="키의 종류" /></p><ul><li>슈퍼키 &gt; 후보키 &gt; 대체키 &gt; 기본키</li><li>후보키 = 기본키 + 대체키</li><li>기본키 = 후보키 - 대체키</li></ul><h3 id="키의-종류-상세"><a class="markdownIt-Anchor" href="#키의-종류-상세"></a> 키의 종류 상세</h3><ul><li>슈퍼키 Super Key<ul><li>한 릴레이션 내의 속성들의 집합으로 구성된 키</li><li>릴레이션을 구성하는 모든 튜플에 대해 유일성은 만족시키지만 최소성은 만족시키지 못함</li><li>ex) 학번+주민번호</li></ul></li><li>후보키 Candidate Key<ul><li>릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별할 수 있는 하나 또는 몇 개의 속성의 집합</li><li>릴레이션의 모든 튜플에 대해 유일성과 최소성 모두 만족</li></ul></li><li>기본키 Primary Key<ul><li>릴레이션에서 튜플ㅇ르 구별할 수 있는 유일한 식별자</li><li>후보키 중에서 선정된 키로 유일성과 최소성 만족</li><li>기본키는 Null값을 가질 수 없고 중복값을 가질 수 없음</li></ul></li><li>대체키 Primary Key<ul><li>후보키가 둘 이상인 경우 기본키로 선택되지 못한 후보들키를 보조키라고도 함</li></ul></li><li>외래키 Foreign Key<ul><li>참조되는 릴레이션의 기본키와 대응되어 릴레이션 간에 참조관계 표현</li><li>참조 릴레이션의 기본키에 없는 값은 입력할 수 없음</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;키의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#키의-개념&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="키종류" scheme="https://hyeonukdev.github.io/tags/%ED%82%A4%EC%A2%85%EB%A5%98/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 칼럼 속성</title>
    <link href="https://hyeonukdev.github.io/2020/05/17/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%EC%B9%BC%EB%9F%BC%EC%86%8D%EC%84%B1/"/>
    <id>https://hyeonukdev.github.io/2020/05/17/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%EC%B9%BC%EB%9F%BC%EC%86%8D%EC%84%B1/</id>
    <published>2020-05-16T16:31:58.000Z</published>
    <updated>2020-05-16T16:31:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="칼럼-속성의-정의-및-특징"><a class="markdownIt-Anchor" href="#칼럼-속성의-정의-및-특징"></a> 칼럼 속성의 정의 및 특징</h3><ul><li>속성은 데이터베이스를 구성하는 가장 작은 논리적 단위</li><li>파일 구조상의 데이터 항목 또는 데이터 필드에 해당됨</li><li>속성은 개체의 구성 항목이며 특성을 기술</li><li>속성의 수는 Degree 또는 차수라고 함</li></ul><h3 id="속성의-특성에-따른-분류"><a class="markdownIt-Anchor" href="#속성의-특성에-따른-분류"></a> 속성의 특성에 따른 분류</h3><ul><li>기본 속성 Basic Attribute<ul><li>업무 분석을 통해 정의한 속성</li><li>개체 타입에 가장 일반적이고 많은 속성을 차지</li><li>업무로부터 분석한 속성이라도 이미 업무상 코드로 정의한 속성은 기본 속성에서 제외</li></ul></li><li>설계 속성 Designed Attribute<ul><li>원래 업무에는 존재하지 않지만 설계를 하면서 도출하는 속성</li><li>업무의 필요에 의해 새로 만들거나 변형하여 정의한 속성</li></ul></li><li>파생 속성 Derived Attribute<ul><li>다른 속성으로부터 계산이나 변형되어 생성되는 속성</li><li>다른 속성의 영향을 받기 때문에 정합성 유지를 위해 가급적 파생 속성을 적게 정의하는 것이 좋음</li></ul></li></ul><h3 id="개체-구성-방식에-따른-분류"><a class="markdownIt-Anchor" href="#개체-구성-방식에-따른-분류"></a> 개체 구성 방식에 따른 분류</h3><ul><li>기본키 속성<ul><li>개체를 식별할 수 있는 속성</li></ul></li><li>외래키 속성<ul><li>다른 개체와의 관계에서 포함된 속성</li></ul></li><li>일반 속성<ul><li>개체에 포함되어 있고 기본 키, 외래 키에 포함되지 않은 속성</li></ul></li></ul><h3 id="속성-후보-선정-원칙"><a class="markdownIt-Anchor" href="#속성-후보-선정-원칙"></a> 속성 후보 선정 원칙</h3><ul><li>원시 속성으로 보이는 후보는 버리지 않음</li><li>소그룹별로 후보군을 만들고 가장 근접한 개체에 할당</li></ul><h3 id="속성명-지정-원치"><a class="markdownIt-Anchor" href="#속성명-지정-원치"></a> 속성명 지정 원치</h3><ul><li>해당 업무에서 사용하는 이름을 부여</li><li>서술식 속성명은 사용하지 않음</li><li>약어 사용은 가급적 자제</li><li>개체 타입명은 속성명으로 사용해서는 안됨</li><li>개체타입에서 유일하게 식별 가능하도록 지정</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;칼럼-속성의-정의-및-특징&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="칼럼속성" scheme="https://hyeonukdev.github.io/tags/%EC%B9%BC%EB%9F%BC%EC%86%8D%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 데이터베이스 무결성</title>
    <link href="https://hyeonukdev.github.io/2020/05/16/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%B4%EA%B2%B0%EC%84%B1/"/>
    <id>https://hyeonukdev.github.io/2020/05/16/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%B4%EA%B2%B0%EC%84%B1/</id>
    <published>2020-05-16T14:43:31.000Z</published>
    <updated>2020-05-16T14:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><ul><li>데이터베이스 무결성과 칼럼 속성 및 키 종류에 대해 이해</li><li>테이블 간의 조인을 줄이기 위한 칼럼 반정규화, 정규화에서 나눈 테이블을 하나의 테이블로 통합, 하나의 테이블을 여러 개 테이블로 분리, 요약 테이블을 생성의 방법으로 반정규화를 수행</li><li>반정규화에 따른 영향도를 조사하여 적절한 조치를 하고, 반정규화가 적용된 물리 데이터베이스 설계설르 작성</li></ul><h3 id="데이터베이스-무결성-integrity-개념"><a class="markdownIt-Anchor" href="#데이터베이스-무결성-integrity-개념"></a> 데이터베이스 무결성 Integrity 개념</h3><ul><li>데이터의 <u>정확성, 일관성, 유효성, 신뢰성 등과 무효 갱신으로부터 데이터 보호</u> 등을 위해 필요</li><li>무결성 제약 조건은 데이터베이스에 들어 있는 데이터의 정확성을 보장하기 위해 <u>부정확한 자료가 데이터베이스 내에 저장</u>되는 것을 방지 하기 위한 제약 조건임</li><li>무결정의 종류<ul><li>개체 무결성</li><li>도메인 무결성</li><li>참조 무결성</li><li>사용자 정의 무결성</li></ul></li></ul><h3 id="무결성의-종류"><a class="markdownIt-Anchor" href="#무결성의-종류"></a> 무결성의 종류</h3><h4 id="1-entity-integrity-개체-무결성-실체-무결성"><a class="markdownIt-Anchor" href="#1-entity-integrity-개체-무결성-실체-무결성"></a> 1. Entity Integrity 개체 무결성, 실체 무결성</h4><ul><li><u>개체의 유일성</u>을 보장하기 위한 무결성</li><li>데이터베이스 테이블은 기본 키로 설정된 속성은 null 값이나 중복 값을 가질 수 없음</li></ul><h4 id="2-domain-integrity-도메인-무결성-영역-무결성"><a class="markdownIt-Anchor" href="#2-domain-integrity-도메인-무결성-영역-무결성"></a> 2. Domain Integrity 도메인 무결성, 영역 무결성</h4><ul><li><u>특정 속성 값이 미리 정의</u>된 도메인 범위에 속해야 함</li><li>도메인은 하나의 애트리뷰트가 취할 수 있는 같은 타입의 원자값의 집합</li></ul><h4 id="3-referential-integrity-참조-무결성"><a class="markdownIt-Anchor" href="#3-referential-integrity-참조-무결성"></a> 3. Referential Integrity 참조 무결성</h4><ul><li>릴레이션은 참조할 수 없는 외래키 값을 가질 수 없음</li><li><u>외래키 값은 Null이거나 참조하는 릴레이션의 기본 키 값이어야 함</u></li></ul><h4 id="4-user-defined-integrity-사용자-정의-무결성"><a class="markdownIt-Anchor" href="#4-user-defined-integrity-사용자-정의-무결성"></a> 4. User Defined Integrity 사용자 정의 무결성</h4><ul><li>모든 데이터는 사용자가 정의한 제약 조건인 업무 규칙 Business Rule을 준수해야 함</li></ul><h3 id="데이터-무결성-강화-개념"><a class="markdownIt-Anchor" href="#데이터-무결성-강화-개념"></a> 데이터 무결성 강화 개념</h3><ul><li><u>데이터 품질</u>에 직접적인 영향을 주며, 데이터의 품질을 확보하고 유지하기 위해서는 데이터베이싀 구축 과정에서 <u>적정한 무결성 방안을 확보 해야 함</u></li><li>프로그램이 완성되고 데이터가 축척된 상태에서 무결성을 정의할 경우 많은 비용 발생</li><li>데이터베이스에서 모두 이뤄질 수 없으므로 복잡한 규칙을 기반으로 데이터 상호 간 유지해야할 정합성은 어플리케이션 내에서 처리</li></ul><h3 id="데이터-무결성-강화-방법"><a class="markdownIt-Anchor" href="#데이터-무결성-강화-방법"></a> 데이터 무결성 강화 방법</h3><h4 id="1-애플리케이션"><a class="markdownIt-Anchor" href="#1-애플리케이션"></a> 1. 애플리케이션</h4><ul><li>데이터를 조작하는 프로그램 내에 데이터 생성, 수정, 삭제 시 무결성 조건을 <u>검증 하는 코드를 추가</u></li><li>장점<ul><li>사용자 정의 같은 <u>복잡한 무결성 조건을 구현</u></li></ul></li><li>단점<ul><li>소스코드에 분산되어 <u>관리의 어려움이 있음</u></li><li>개별적으로 시행되므로 <u>적정성 검토에 어려움</u></li></ul></li></ul><h4 id="2-데이터베이스-트리거"><a class="markdownIt-Anchor" href="#2-데이터베이스-트리거"></a> 2. 데이터베이스 트리거</h4><ul><li><u>트리거 이벤트</u>시 저장 SQL을 실행하여 무결성 조건을 실행</li><li>장점<ul><li>통합 관리가 가능함</li><li>복잡한 요건 구현 가능</li></ul></li></ul><h4 id="3-제약-조건"><a class="markdownIt-Anchor" href="#3-제약-조건"></a> 3. 제약 조건</h4><ul><li><u>데이터베이스 제약 조건 기능</u>을 선언하여 무결성을 유지</li><li>장점<ul><li>통합 관리가 가능함, 간단한 선언으로 구현 가능</li><li>변경이 용이하고, 유효/무효 상태 변경이 가능</li><li>원칙적으로 잘못된 데이터 발생을 막을 수 있음</li></ul></li><li>단점<ul><li>복잡한 제약 조건 구현이 불가능, 예외적인 처리가 불가능</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 무결성과 칼럼 속성 및 키 종류에 대해 이해&lt;/li&gt;
&lt;li&gt;테이블 간의 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스무결성" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%B4%EA%B2%B0%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-15T07:22:16.000Z</published>
    <updated>2020-05-15T07:22:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="1-파티셔닝"><a class="markdownIt-Anchor" href="#1-파티셔닝"></a> 1. 파티셔닝</h3><ul><li>데이터베이스에서 파티션은 <u>대용량의 테이블이나 인덱스를 작은 논리적 단위인 파티션으로 나누는 것 </u></li><li>장점<ul><li>데이터 접근 시 액세스 범위를 줄여 <u>쿼리 성능이 향상됨</u></li><li>파티션별로 <u>데이터가 분산되어 저장되므로 디스크의 성능이 향상됨</u></li><li>파티션별로 백업 및 복구를 수행하므로 <u>속도가 빠름</u></li><li>시스템 장애 시 <u>데이터 손상 정도를 최소화</u></li><li>데이터 가용성이 향상됨</li><li>파티션 단위로 <u>입/출력을 분산</u>시킬 수 있음</li></ul></li><li>단점<ul><li>하나의 테이블을 세분화하여 관리하므로 세심한 관리가 요구됨</li><li>테이블간 조인에 대한 <u>비용이 증가함</u></li><li><u>용량이 작은 테이블에 파티셔닝을 수행하면 오히려 성능이 저하됨</u></li></ul></li><li>종류<ul><li>범위 분할</li><li>해시 분할</li><li>조합 분할</li></ul></li></ul><h3 id="2-클러스터링"><a class="markdownIt-Anchor" href="#2-클러스터링"></a> 2. 클러스터링</h3><ul><li>데이터 저장시 데이터 액세스 효율을 향상시키기 위해 동일한 성격의 데이터를 동일한 데이터 블록에 저장하는 물리적 저장 방법</li><li>클러스터 대상 테이블<ul><li>분포도가 넓은 테이블</li><li>대량의 범위를 자주 조회하는 테이블</li><li>입력, 수정, 삭제가 자주 발생하지 않는 테이블</li><li>자주 조인되어 사용되는 테이블</li><li>ORDER BY, GROUP BY, UNION이 빈번한 테이블</li></ul></li></ul><h3 id="3-데이터베이스-백업"><a class="markdownIt-Anchor" href="#3-데이터베이스-백업"></a> 3. 데이터베이스 백업</h3><ul><li>데이터베이스 백업은 전산 장비의 장애에 대비하여 데이터베이스에 저장된 데이터를 보호하고 복구하기 위한 작업</li><li>로그 파일<ul><li>데이터베이스의 처리 내용이나 이용 상황 등 상태 변화를 시간의 흐름에 따라 모두 기록한 파일</li></ul></li><li>데이터베이스 복구 알고리즘<ul><li>NO-UNDO/REDO</li><li>UNDO/NO-REDO</li><li>UNDO/REDO</li><li>NO-UNDO/NO-REDO</li></ul></li><li>백업 종류<ul><li>물리 백업</li><li>논리 백업</li></ul></li></ul><h3 id="4-데이터베이스-용량-설계"><a class="markdownIt-Anchor" href="#4-데이터베이스-용량-설계"></a> 4. 데이터베이스 용량 설계</h3><ul><li>데이터베이스 용량을 설계할 때는 테이블에 저장할 데이터양과 인덱스, 클러스터 등이 차지하는 공간 등을 예측하여 반영함</li><li>데이터베이스의 용량을 정확히 산정하여 디스크의 저장공간을 효과적으로 사용하고 확장성 및 가용성을 높임</li><li>테이블스페이스 설계 시 고려사항<ul><li>테이블스페이스는 업무별로 구분하여 지정</li><li>대용량 테이블은 하나의 테이블스페이스에 독립적으로 저장</li><li>테이블과 인덱스는 분리하여 저장</li><li>LOB(Large Object)타입의 데이터는 독립적인 공간으로 지정</li></ul></li></ul><h3 id="5-데이터-지역화-locality"><a class="markdownIt-Anchor" href="#5-데이터-지역화-locality"></a> 5. 데이터 지역화 Locality</h3><ul><li>데이터베이스의 저장 데이터를 효율적으로 이용할 수 있도록 저장하는 방법</li><li>물리적 데이터베이스 설계, 보조 기억 장치의 역할, 디스크 상의 파일의 배치를 지역화 관점에서 검토</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-파티셔닝&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-파티셔
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 데이터지역화</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A7%80%EC%97%AD%ED%99%94/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A7%80%EC%97%AD%ED%99%94/</id>
    <published>2020-05-15T07:15:49.000Z</published>
    <updated>2020-05-15T07:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="데이터-지역화-data-locality-개념"><a class="markdownIt-Anchor" href="#데이터-지역화-data-locality-개념"></a> 데이터 지역화 Data Locality 개념</h3><ul><li>데이터베이스의 <u>저장 데이터를 효율적으로 이용할 수 있도록 저장</u>하는 방법</li><li>물리적 데이터베이스 셀계에서 <u>데이터 지역화를 고려한 보조 저장장치의 설계가 중요</u>함</li><li>물리적 데이터베이스 설계, 보조 기억 장치의 역할, 디스크 상의 파일의 배치를 지역화 관점에서 검토</li></ul><h3 id="물리적-데이터베이스-설계"><a class="markdownIt-Anchor" href="#물리적-데이터베이스-설계"></a> 물리적 데이터베이스 설계</h3><ul><li><u>논리적 설계의 데이터 구조</u>를 <u>보조 기억 장치상의 파일</u>(물리적 데이터 모델)로 매핑</li><li>하나의 파일에 여러 릴레이션이 저장될 수 있음</li><li>예상 빈도를 포함하여 데이터베이스 질의와 트랜잭션을 분석</li><li><u>데이터에 대한 효율적인 접근을 제공</u>하기 위하여 저장 구조와 접근 방법들을 고려함</li><li>질의를 효율적으로 지원하기 위해 <u>인덱스 구조를 적절히 사용함</u></li></ul><h3 id="보조-기억-장치의-역할"><a class="markdownIt-Anchor" href="#보조-기억-장치의-역할"></a> 보조 기억 장치의 역할</h3><ul><li><u>각 파일은 고정된 크기의 블록</u>들로 나누어져 저장됨</li><li>여러 개의 블록들에 파일의 데이터가 분산되어 저장됨</li><li>디스크는 데이터베이스를 장기간 보관하는 주된 보조 기억장치</li></ul><h3 id="디스크상에서-파일의-레코드-배치"><a class="markdownIt-Anchor" href="#디스크상에서-파일의-레코드-배치"></a> 디스크상에서 파일의 레코드 배치</h3><ul><li>릴레이션의 속성은 고정 길이 또는 가변 길이의 필드로 표현됨</li><li>연관된 필드들이 모여서 고정 길이 또는 가변 길이의 레코드가 됨</li><li><u>한 릴레이션을 구성하는 레코드들의 모임은 파일</u>이라고 부르는 블록들의 모임에 저장</li><li>한 파일에 속하는 블록들의 위치가 반드시 인접해 있을 필요는 없음</li><li>인접한 블록들을 읽는 경우 탐구 시간과 회전 지연 시간이 들지 않기 때문에 <u>입출력 속도가 빠르므로 블록들이 인접하도록 파일의 블록들을 재조직</u>함</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;데이터-지역화-data-locality-개념&quot;&gt;&lt;a class=&quot;markdownIt-An
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터지역화" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A7%80%EC%97%AD%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 데이터베이스 용량 설계</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9A%A9%EB%9F%89%EC%84%A4%EA%B3%84/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9A%A9%EB%9F%89%EC%84%A4%EA%B3%84/</id>
    <published>2020-05-15T06:58:35.000Z</published>
    <updated>2020-05-15T06:58:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="데이터베이스-용량-설계-개념"><a class="markdownIt-Anchor" href="#데이터베이스-용량-설계-개념"></a> 데이터베이스 용량 설계 개념</h3><ul><li>데이터베이스 용량 설계는 데이터가 저장될 공간을 정의</li><li>데이터베이스 용량을 설계할 때는 테이블에 저장할 데이터양과 인덱스, 클러스터 등이 차지하는 공간 등을 예측하여 반영함</li><li><b>설계과정에서 수행</b></li></ul><h3 id="tablespace-테이블-스페이스"><a class="markdownIt-Anchor" href="#tablespace-테이블-스페이스"></a> Tablespace 테이블 스페이스</h3><ul><li><u>테이블이 저장되는 논리적인 영역</u>으로, 하나의 테이블스페이스에 하나 또는 그 이상의 테이블 저장 가능</li><li>테이블을 저장하면 논리적으로는 테이블스페이스에 저장되고, <u>물리적</u>으로는 해당 테이블스페이스와 연관된 <u>데이터 파일에 저장</u></li><li>데이터베이스를 테이블, 테이블스페이스, 데이터 파일로 나눠 관리하면 <u>논리적 구성이 물리적 구성에 종속되지 않아 투명성이 보장됨</u></li><li>테이블스페이스는 데이터베이스에 저장되는 내용에 따라 테이블, 인덱스, 임시(Temporary) 등의 용도로 구분하여 설계</li><li>테이블스페이스 설계 시 고려사항<ul><li>테이블스페이스는 업무별로 구분하여 지정</li><li>대용량 테이블은 하나의 테이블스페이스에 독립적으로 저장</li><li>테이블과 인덱스는 분리하여 저장</li><li>LOB(Large Object)타입의 데이터는 독립적인 공간으로 지정</li></ul></li></ul><h3 id="데이터베이스-용량-설계-목적"><a class="markdownIt-Anchor" href="#데이터베이스-용량-설계-목적"></a> 데이터베이스 용량 설계 목적</h3><ul><li>데이터베이스의 용량을 정확히 산정하여 <u>디스크의 저장 공간을 효과적으로 사용하고 확장성 및 가용성을 높임</u></li><li>디스크의 특성을 고려하여 설계함으로써 <u>디스크의 입/출력 부하를 분산시키고 채널의 병목 현상을 최소화</u></li><li><u>디스크에 대한 입/출력 경합이 최소화</u>되도록 설계함으로써 <b>데이터 접근성 향상</b><ul><li>테이블과 인덱스의 테이블스페이스를 분리 구성</li><li>테이블스페이스와 임시 테이블스페이스를 분리 구성</li><li>테이블을 마스터 테이블과 트랜잭션 테이블로 분류</li></ul></li><li>데이터베이스의 기본 용량이 모두 찼을 경우 추가적으로 공간이 할당되는 익스텐트(Extent) 발생을 <b>최소화</b>하여 성능 향상</li><li>데이터베이스 용량을 정확히 분석하여 테이블과 인덱스에 적합한 저장 옵션 지정</li></ul><h3 id="데이터베이스-용량-분석-절차"><a class="markdownIt-Anchor" href="#데이터베이스-용량-분석-절차"></a> 데이터베이스 용량 분석 절차</h3><ol><li>데이터 예상 건수, Row 길이, 보존 기간, 증가율 등 기초 자료를 수집하여 용량을 분석</li><li>분석된 자료를 바탕으로 DBMS에 이용될 테이블, 인덱스 등 오브젝트별 용량을 산정</li><li>테이블과 인덱스의 테이블스페이스 용량을 산정</li><li>데이터베이스에 저장될 모든 데이터 용량과 데이터베이스 설치 및 관리를 위한 시스템 용량을 합해 디스크 용량을 산정</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;데이터베이스-용량-설계-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스용량설계" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9A%A9%EB%9F%89%EC%84%A4%EA%B3%84/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 데이터베이스백업</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%B0%B1%EC%97%85/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%B0%B1%EC%97%85/</id>
    <published>2020-05-15T06:15:44.000Z</published>
    <updated>2020-05-15T06:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="데이터베이스-백업-개념"><a class="markdownIt-Anchor" href="#데이터베이스-백업-개념"></a> 데이터베이스 백업 개념</h3><ul><li>데이터베이스 백업은 <u>전산 장비의 장애에 대비</u> 하여 <u>데이터베이스에 저장된 데이터를 보호하고 복구</u>하기 위한 작업</li><li>치명적인 데이터 손실을 막기 위해서는 데이터베이스를 <u>정기적으로 백업</u></li><li>데이터베이스 관리 시스템은 데이터베이스 파괴 및 실행 중단이 발생하면 이를 복구할 수 있는 기능을 제공함</li></ul><h3 id="데이터베이스-장애-유형"><a class="markdownIt-Anchor" href="#데이터베이스-장애-유형"></a> 데이터베이스 장애 유형</h3><ul><li>사용자 실수<ul><li>사용자 실수로 인해 테이블이 삭제되거나 잘못된 트랜잭션이 처리된 경우</li></ul></li><li>미디어 장애<ul><li>CPU, 메모리, 디스크 등 하드웨어 장애나 데이터가 파손</li></ul></li><li>구문 장애<ul><li>프로그램 오류나 사용 공간의 부족으로 인해 발생하는 장애</li></ul></li><li>사용자 프로세스 장애<ul><li>프로그램이 비정상적으로 종료되거나 네트워크 이상으로 세션이 종료되어 발생하는 오류</li></ul></li><li>인스턴스 장애<ul><li>하드웨어 장애, 정전, 시스템 파일 파손 등 비정상적인 요인으로 인해 메모리나 데이터베이스 서버의 프로세스가 중단</li></ul></li></ul><h3 id="로그-파일"><a class="markdownIt-Anchor" href="#로그-파일"></a> 로그 파일</h3><ul><li>로그 파일은 <u>데이터베이스의 처리 내용이나 이용 상황</u> 등 <u>상태 변화를 <b>시간의 흐름</b>에 따라 모두 기록</u>한 파일</li><li>데이터베이스 복구를 위해 필요한 가장 기본적인 자료</li><li>로그 파일을 기반으로 데이터베이스를 과거 상태로 복귀(UNDO)시키거나 현재 상태로 재생(REDO)시켜 데이터베이스 상태를 일관성 있게 유지</li><li>로그 파일은 <u>트랜잭션 시작 시점, Rollback 시점, 데이터 입력, 수정, 삭제 시점 등에서 기록 </u></li><li><u>로그 파일 내용</u><ul><li>트랜잭션이 작업한 모든 내용, 트랜잭션 식별, 트랜잭션 레코드, 데이터 식별자, 갱신 이전 값(Before Image), 갱신 이후 값(After Image) 등</li></ul></li></ul><h3 id="데이터베이스-복구-알고리즘"><a class="markdownIt-Anchor" href="#데이터베이스-복구-알고리즘"></a> 데이터베이스 복구 알고리즘</h3><h4 id="1-no-undoredo"><a class="markdownIt-Anchor" href="#1-no-undoredo"></a> 1. NO-UNDO/REDO</h4><ul><li>데이터베이스 버퍼의 내용을 비동기적으로 갱신한 경우의 복구 알고리즘</li><li>NO-UNDO : 트랜잭션 완료 전에는 변경 내용이 데이터베이스에 기록되지 않으므로 취소할 필요가 없음</li><li>REDO : 트랜잭션 완료 후 데이터베이스 버퍼에는 기록되어 있고, 저장매체에는 기록되지 않으므로 트랜잭션을 다시 실행</li></ul><h4 id="2-undono-redo"><a class="markdownIt-Anchor" href="#2-undono-redo"></a> 2. UNDO/NO-REDO</h4><ul><li>데이터베이스 버퍼의 내용을 동기적으로 갱신한 경우의 복구 알고리즘</li><li>UNDO : 트랜잭션 완료 전에 시스템이 파손되었다면 변경된 내용 취소</li><li>NO-REDO : 트랜잭션 완료 전에 데이터베이스 버퍼 내용을 이미 저장매체에 기록했으므로 트랜잭션 내용을 다시 실행하지 않음</li></ul><h4 id="3-undoredo"><a class="markdownIt-Anchor" href="#3-undoredo"></a> 3. UNDO/REDO</h4><ul><li>데이터베이스 버퍼의 내용을 동기/비동기적으로 갱신한 경우의 복구 알고리즘</li><li>데이터베이스 기록 전에 트랜잭션이 완료될 수 있으므로 완료된 트랜잭션이 데이터베이스에 기록되지 못했다면 다시 실행</li></ul><h4 id="4-no-undono-redo"><a class="markdownIt-Anchor" href="#4-no-undono-redo"></a> 4. NO-UNDO/NO-REDO</h4><ul><li>데이터베이스 버퍼의 내용을 동기적으로 저장 매체에 기록하지만 데이터베이스와는 다른 영역에 기록한 경우의 복구 알고리즘</li><li>NO-UNDO : 변경 내용은 데이터베이스와 다른 영역에 기록되어 있으므로 취소할 필요가 없음</li><li>NO-REDO : 다른 영역에 이미 기록되어 있으므로 트랜잭션을 다시 실행할 필요 없음</li></ul><h3 id="백업종류"><a class="markdownIt-Anchor" href="#백업종류"></a> 백업종류</h3><h4 id="1-물리-백업"><a class="markdownIt-Anchor" href="#1-물리-백업"></a> 1. 물리 백업</h4><ul><li>데이터베이스 파일을 백업하는 방법</li><li>백업 속도가 빠르고 작업이 단순하지만 문제 발생시 원인 파악 및 문제 해결이 어려움</li><li><b>완전 복구 가능</b></li></ul><h4 id="2-논리-백업"><a class="markdownIt-Anchor" href="#2-논리-백업"></a> 2. 논리 백업</h4><ul><li>DB 내의 논리적 객체들을 백업하는 방법</li><li>복원 시 데이터 손상을 막고 문제 발생 시 원인 파악 및 해결이 수월하지만 백업/복원 시 시간이 많이 소요됨</li></ul><table><thead><tr><th>구분</th><th>설명</th><th>복구수준</th></tr></thead><tbody><tr><td>물리백업</td><td>로그 파일 백업 실시</td><td>완전 복구</td></tr><tr><td>물리백업</td><td>로그 파일 백업 없음</td><td>백업 시점까지 복구</td></tr><tr><td>논리 백업</td><td>DBMS 유틸리티</td><td>백업 시점까지 복구</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;데이터베이스-백업-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스백업" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%B0%B1%EC%97%85/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 클러스터링</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81/</id>
    <published>2020-05-15T06:08:43.000Z</published>
    <updated>2020-05-15T06:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="cluster-클러스터의-개념"><a class="markdownIt-Anchor" href="#cluster-클러스터의-개념"></a> Cluster 클러스터의 개념</h3><ul><li>데이터 저장시 <u>데이터 액세스 효율을 향상</u>시키기 위해 <u>동일한 성격의 데이터를 동일한 데이터 블록에 저장</u>하는 물리적 저장 방법</li><li><u>클러스터링키</u>로 지정된 컬럼 값의 순서대로 저장되고, <u>여러 개의 테이블이 하나의 클러스터에 저장됨</u></li></ul><h3 id="클러스터의-특징"><a class="markdownIt-Anchor" href="#클러스터의-특징"></a> 클러스터의 특징</h3><ul><li>클러스터링 된 테이블은 데이터 <u>조회 속도</u>는 향상시키지만 데이터 입력, 수정, 삭제에 대한 성능은 저하됨</li><li>클러스터는 <u>데이터의 분포도가 넓을수록 유리함</u></li><li>데이터 분포도가 넓은 테이블을 클러스터링 하면 <u>저장 공간을 절약</u>할 수 있음</li><li><u>대용량을 처리하는 트랜잭션은 전체 테이블을 스캔</u>하는 일이 자주 발생하므로 <u>클러스터링을 하지 않는 것이 좋음</u></li><li></u>처리 범위가 넓은 경우에는 단일 테이블 클러스터링을, 조인이 많이 발생하는 경우는 다중 테이블 클러스터링을 사용</u></li><li><u><b>파티셔닝된 테이블에는 클러스터링 불가</b></u></li><li><u>클러스터링된 테이블에 클러스터드 인덱스를 생성하면 접근 성능 향상</u></li></ul><h3 id="클러스터-대상-테이블"><a class="markdownIt-Anchor" href="#클러스터-대상-테이블"></a> 클러스터 대상 테이블</h3><ul><li>분포도가 <b>넓은</b> 테이블</li><li>대량의 범위를 자주 조회하는 테이블</li><li>입력, 수정, 삭제가 자주 발생하지 않는 테이블</li><li><b>자주 조인</b>되어 사용되는 테이블</li><li>ORDER BY, GROUP BY, UNION이 빈번한 테이블</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;cluster-클러스터의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="클러스터링" scheme="https://hyeonukdev.github.io/tags/%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 파티셔닝</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/</id>
    <published>2020-05-15T04:55:27.000Z</published>
    <updated>2020-05-15T04:55:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><ul><li><p>식별된 오브젝트의 데이터 타입, 사이즈, 증가 용량을 고려하여 저장 공간을 산출하고, 해당 오브젝트에 대한 테이블 스페이스를 할당</p></li><li><p>할당된 테이블 스페이스 용량을 기반으로 디스크 저장 용량을 산정하고, 데이터베이스 백업 주기, 방식에 따른 별도 저장 공간 용량을 산정</p></li><li><p>분산위치, 엔티티명, 테이블명, 테이블 스페이스명, 테이블 스페이스 용량, 데이터 파일명, 파티셔닝, 클러스터링 정보, 보안정보에 대한 물리 데이터베이스 설계서를 작성</p></li></ul><h3 id="partition-파티션-개념"><a class="markdownIt-Anchor" href="#partition-파티션-개념"></a> Partition 파티션 개념</h3><ul><li>데이터베이스에서 파티션은 <u>대용량의 테이블이나 인덱스를 작은 논리적 단위인 파티션으로 나누는 것 </u><ul><li>대용량 데이터베이스의 경우 중요한 몇 개의 테이블에만 집중되어 데이터가 증가되므로 이런 테이블을 작은 단위로 나눠 분산시키면 <u>성능 저하를 방지와 데이터 관리가 쉬워짐</u></li><li>테이블이나 인덱스를 파티셔닝하면 파티션키 또는 인덱스키에 따라 <u>물리적으로 별도의 공간에 데이터가 저장됨</u></li><li><u>데이터 처리는 테이블 단위로 이뤄지고 데이터 저장은 파티션별로 수행</u></li></ul></li></ul><h3 id="파티션-장단점"><a class="markdownIt-Anchor" href="#파티션-장단점"></a> 파티션 장/단점</h3><ul><li>장점<ul><li>데이터 접근 시 액세스 범위를 줄여 <u>쿼리 성능이 향상됨</u></li><li>파티션별로 <u>데이터가 분산되어 저장되므로 디스크의 성능이 향상됨</u></li><li>파티션별로 백업 및 복구를 수행하므로 <u>속도가 빠름</u></li><li>시스템 장애 시 <u>데이터 손상 정도를 최소화</u></li><li>데이터 가용성이 향상됨</li><li>파티션 단위로 <u>입/출력을 분산</u>시킬 수 있음</li></ul></li><li>단점<ul><li>하나의 테이블을 세분화하여 관리하므로 세심한 관리가 요구됨</li><li>테이블간 조인에 대한 <u>비용이 증가함</u></li><li><u>용량이 작은 테이블에 파티셔닝을 수행하면 오히려 성능이 저하됨</u></li></ul></li></ul><h3 id="파티션의-종류"><a class="markdownIt-Anchor" href="#파티션의-종류"></a> 파티션의 종류</h3><h4 id="1-range-partitioning-범위-분할"><a class="markdownIt-Anchor" href="#1-range-partitioning-범위-분할"></a> 1. Range Partitioning 범위 분할</h4><ul><li>지정한 열의 값을 기준을 분할<ul><li>일별, 월별, 분기별</li></ul></li></ul><h4 id="2-hash-partitioning-해시-분할"><a class="markdownIt-Anchor" href="#2-hash-partitioning-해시-분할"></a> 2. Hash Partitioning 해시 분할</h4><ul><li><u>해시 함수를 적용한 결과 값에 따라 데이터를 분할</u></li><li>특정 파티션에 데이터가 집중되는 범위 분할의 단점을 보완한 것으로 <u>데이터를 고르게 분산할 때 유용함</u></li><li>특정 데이터가 어디에 있는지 판단할 수 없음</li><li>고객번호, 주민번호 등과 같이 데이터가 고른 컬럼에 효과적임</li></ul><h4 id="3-composite-partitoning-조합-분할"><a class="markdownIt-Anchor" href="#3-composite-partitoning-조합-분할"></a> 3. Composite Partitoning 조합 분할</h4><ul><li>범위 분할로 분할한 다음 해시 함수를 적용하여 다시 분할하는 방식</li><li>범위 분할한 파티션이 너무 커서 관리가 어려울 때 유용함</li></ul><h3 id="파티션키-선정시-고려사항"><a class="markdownIt-Anchor" href="#파티션키-선정시-고려사항"></a> 파티션키 선정시 고려사항</h3><ul><li>파티션키는 <u>테이블 접근 유형</u>에 따라 파티셔닝이 이뤄지도록 선정</li><li>데이터 관리의 용이성을 위해 <u>이력성 데이터</u>는 파티션 생성주기와 소멸주기를 일치</li><li><u>매일 생성되는 날짜 컬럼, 백업의 기준이 되는 날짜 컬럼, 파티션 간 이동이 없는 컬럼, I/O 병목을 줄일 수 있는 데이터 분포가 양호한 컬럼</u> 등을 파티션키로 선정</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;식별된 오브젝트의 데이터 타입, 사이즈, 증가 용량을 고려하여 저장 공간을 산출
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="파티셔닝" scheme="https://hyeonukdev.github.io/tags/%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-14T18:14:17.000Z</published>
    <updated>2020-05-14T18:14:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="1-스토리지"><a class="markdownIt-Anchor" href="#1-스토리지"></a> 1. 스토리지</h3><ul><li><p>스토리지는 단일 디스크로 처리할 수 없는 대용량의 데이터를 저장하기 위해 <u>서버와 저장장치를 연결하는 기술</u></p></li><li><p>스토리지 종류</p><ul><li>DAS(Direct Attached Storage)</li><li>NAS(Network Attached Storage)</li><li>SAN(Storage Area Network)</li></ul></li></ul><h3 id="2-분산-데이터베이스"><a class="markdownIt-Anchor" href="#2-분산-데이터베이스"></a> 2. 분산 데이터베이스</h3><ul><li>논리적으로 같은 시스템에 속하지만, <u>컴퓨터 네트워크를 통해 물리적으로 분산되어 있는 데이터베이스</u></li><li>분산 데이터베이스의 4가지 투명성<ul><li>위치투명성</li><li>중복투명성</li><li>병행투명성</li><li>장애투명성</li></ul></li><li>분산 데이터베이스 설계 방법<ul><li>테이블 위치 분산</li><li>분할</li><li>할당</li></ul></li></ul><h3 id="3-데이터베이스-이중화-구성"><a class="markdownIt-Anchor" href="#3-데이터베이스-이중화-구성"></a> 3. 데이터베이스 이중화 구성</h3><ul><li><u>시스템 오류로 인한 데이터베이스 서비스 중단이나 물리적 손상</u> 발생 시 이를 <u>복구하기 위해 동일한 데이터베이스를 복제하여 관리</u></li><li>데이터 이중화의 분류<ul><li>Eager 기법</li><li>Lazy 기법</li></ul></li><li>데이터 이중화의 구성 방법<ul><li>Active-Active</li><li>Active-Standby</li></ul></li></ul><h3 id="4-데이터베이스-암호화"><a class="markdownIt-Anchor" href="#4-데이터베이스-암호화"></a> 4. 데이터베이스 암호화</h3><ul><li>데이터베이스 암호화 알고리즘은 크게 대칭 키, 해시, 비대칭 키 알고리즘이 사용됨<ul><li>대칭 키 암호 알고리즘<ul><li>DES</li><li>ARIA 128/192/256</li><li>SEED</li></ul></li><li>해시 알고리즘<ul><li>SHA 256/384/512</li><li>HAS-160</li></ul></li><li>비대칭 키 암호 알고리즘<ul><li>RSA</li><li>ECDSA</li></ul></li></ul></li><li>데이터베이스 암호화 기법<ul><li>API 방식</li><li>Plug-in 방식</li><li>Hybrid 방식</li></ul></li></ul><h3 id="5-접근통제"><a class="markdownIt-Anchor" href="#5-접근통제"></a> 5. 접근통제</h3><ul><li><u>데이터베이스에 대한 사용자들의 접근을 통제</u>함으로써 데이터를 보호하는 방법</li><li>접근통제의 3요소<ul><li>접근통제 정책</li><li>접근통제 메커니즘</li><li>접근통제 보안모델</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-스토리지&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-스토리
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 접근통제</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EC%A0%91%EA%B7%BC%ED%86%B5%EC%A0%9C/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EC%A0%91%EA%B7%BC%ED%86%B5%EC%A0%9C/</id>
    <published>2020-05-14T18:04:32.000Z</published>
    <updated>2020-05-14T18:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="접근-통제-access-control-개념"><a class="markdownIt-Anchor" href="#접근-통제-access-control-개념"></a> 접근 통제 Access Control 개념</h3><ul><li><u>데이터베이스에 대한 사용자들의 접근을 통제</u>함으로써 데이터를 보호하는 방법</li><li>접근통제는 데이터에 대해 다음과 같은 통제를 함으로써 자원의 불법적인 접근 및 파괴를 예방<ul><li>비인가된 사용자의 접근 감시</li><li>접근 요구자의 사용자 식별</li><li>접근 요구의 정당성 확인 및 기록</li><li>보안 정책에 근거한 접근의 승인 및 거부 등</li></ul></li><li>접근통제의 3요소<ul><li>접근통제 정책</li><li>접근통제 메커니즘</li><li>접근통제 보안모델</li></ul></li></ul><h3 id="임의-접근통제와-강제-접근-통제"><a class="markdownIt-Anchor" href="#임의-접근통제와-강제-접근-통제"></a> 임의 접근통제와 강제 접근 통제</h3><ul><li>임의 접근통제 DAC; Discretionary Access Control<ul><li>임의 접근통제는 <u>데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하는 방식</u></li><li>통제 권한이 주체에 있어 주체가 접근통제 권한을 지정하고 제어할 수 있음</li><li>일반적으로 특정 객체에 대한 조작 권한은 데이터베이스 관리 시스템으로 부터 부여 받지만 임의 접근통제에서는 객체를 생성한 사용자가 생성된 객체에 대한 모든 권한을 부여 받고, 부여된 권한을 다른 사용자에게 허가할 수 있음</li><li>임의 접근통제에 사용되는 <u>SQL명령어 : GRANT와 REVOKE</u></li></ul></li><li>강제 접근통제 MAC; Mandatory Access Control<ul><li><u>강제 접근통제는 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식</u></li><li>제3자가 접근통제 권한을 지정</li><li>데이터베이스 객체별로 보안 등급을 부여할 수 있고, 사용자 별로 인가 등급을 부여할 수 있음</li><li>주체는 자신보다 보안 등급이 높은 객체에 대해 읽기, 수정, 등록이 모두 불가능하고 보안 등급이 같은 객체에 대해서는 읽기, 수정, 등록이 가능함</li></ul></li></ul><h3 id="접근통제의-3요소"><a class="markdownIt-Anchor" href="#접근통제의-3요소"></a> 접근통제의 3요소</h3><h4 id="접근-통제-정책"><a class="markdownIt-Anchor" href="#접근-통제-정책"></a> 접근 통제 정책</h4><ul><li>접근통제 정책은 어떤 주체가 언제, 어디서, 어떤 객체에게, 어떤 행위에 대한 허용 여부를 정의하는 것<ul><li>신분 기반 정책<ul><li>주체나 그룹의 신분에 근거하여 객체의 접근을 제한. IBP나 GBP가 있음</li><li>IBP(Individual–Based Policy) : 최소 권한 정책으로, 단일 주체에게 하나의</li><li>객체에 대한 허가를 부여 GBP(Group–Based Policy) : 복수 주체에 하나의 객체에 대한 허가를 부여</li></ul></li><li>규칙 기반 정책<ul><li>주체가 갖는 권한에 근거하여 객체의 접근을 제한. MLP와 CBP가 있음</li><li>MLP(Multi-Level Policy) : 사용자 및 객체별로 지정된 기밀 분류에 따른 정책</li><li>CBP(Compartment-Based Policy) : 집단별로 지정된 기밀 허가에 따른 정책</li></ul></li><li>역학 기반 정책<ul><li>GBP의 변형된 정책으로, 주체의 신분이 아니라 주체가 맡은 역할에 근거하여 객체의 접근을 제한하는 방법</li><li>예) 인사담당자, DBA 등</li></ul></li></ul></li></ul><h4 id="접근통제-매커니즘"><a class="markdownIt-Anchor" href="#접근통제-매커니즘"></a> 접근통제 매커니즘</h4><ul><li>정의된 접근통제 정책을 구현하는 기술적인 방법으로, 접근통제 목록, 능력 리스트, 보안 등급, 패스워드, 암호화 등이 있음<ul><li>접근통제 목록<ul><li>객체를 기준으로 특정 객체에 대해 어떤 주체가 어떤 행위를 할 수 있는지를 기록한 목록</li></ul></li><li>능력 리스트<ul><li>주체를 기준으로 주체에게 허가된 자원 및 권한을 기록한 목록</li></ul></li><li>보안 등급<ul><li>주체나 객체 등에 부여된 보안 속성의 집합으로, 이 등급을 기반으로 접근 승인 여부가 결정됨</li></ul></li><li>패스워드<ul><li>주체가 자신임을 증명할 때 사용하는 인증 방</li></ul></li><li>암호화<ul><li>데이터를 보낼 때 지정된 수신자 이외에는 내용을 알 수 없도록 평문을 암호문으로 변환하는 것으로, 무단 도용을 방지하기 위해 주로 사용함</li></ul></li></ul></li></ul><h4 id="접근통제-보안-모델"><a class="markdownIt-Anchor" href="#접근통제-보안-모델"></a> 접근통제 보안 모델</h4><ul><li>보안 정책을 구현하기 위한 정형화된 모델로, 기밀성 모델, 무결성 모델, 접근 통제 모델이 있음<ul><li>기밀성 모델<ul><li>시스템 내 정보와 자원은 인가된 사용자에게만 접근이 허용되는 것</li><li>군사적인 목적으로 개발된 최초의 수학적 모델</li><li>제약조건<ul><li>단순 보안 규칙 : 주체는 자신보다 높은 등급의 객체는 읽을 수 없음</li><li>스타 보안 규칙 : 주체는 자신보다 낮은 등급의 객체에 정보를 쓸 수 없음</li></ul></li></ul></li><li>무결성 모델<ul><li>기밀성 모델에서 발생하는 불법적인 정보 변경을 방지하기 위해 무결성을 기반으로 개발된 모델</li><li>무결성 모델은 데이터의 일관성 유지에 중점을 두어 개발</li><li>무결성 모델은 기밀성 모델과 동일하게 주체와 객체의 보안 등급을 기반으로 함</li><li>제약조건<ul><li>단순 조안 규칙 : 주체는 자신보다 낮은 등급의 객체를 읽을 수 없음</li><li>스타 보안 규칙 : 주체는 자신보다 높은 등급의 객체에 정보를 쓸 수 없음</li></ul></li></ul></li><li>접근통제 모델<ul><li>접근통제 메카니즘을 보안 모델로 발전시킴. 대표적으로 접근통제 행렬이 있음</li><li>접근통제 행렬은 행은 주체, 열은 객체 즉 행과 열로 주체와 객체의 권한유형을 나타냄</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;접근-통제-access-control-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anc
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스이중화구성" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%B4%EC%A4%91%ED%99%94%EA%B5%AC%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 데이터베이스 암호화</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%95%94%ED%98%B8%ED%99%94/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%95%94%ED%98%B8%ED%99%94/</id>
    <published>2020-05-14T17:35:42.000Z</published>
    <updated>2020-05-14T17:35:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="데이터베이스-보안-기능-적용"><a class="markdownIt-Anchor" href="#데이터베이스-보안-기능-적용"></a> 데이터베이스 보안 기능 적용</h3><ul><li>데이터베이스의 접근 권한 및 데이터베이스 동작 객체(sql, 프로시저, 트리거 등)의 보안 취약점을 보완하기 위해 보안 기능을 적용</li><li>민감 데이터는 데이터 자체의 보안 방안(암호화, 익명화 등)도 고려</li><li>고려사항<ul><li>데이터베이스 접근 권한<ul><li>데이터베이스, 스키마, 엔티티(테이블)의 접근 권한 관리(접근 권한 객체 관리 수준은 성능과 보안성을 고려하여 관리)</li><li>예시: 테이블 권한 관리 시 성능이 저하, 민감 테이블만 관리</li></ul></li><li>악의적 코드 삽입 금지<ul><li>프로시저(Procedure), 트리거(Trigger), 배치(Batch) 등 데이터베이스 객체의 동작상에 악의적인 코드가 삽입되지 않도록 동작 간 처리</li></ul></li><li>민감 데이터 관리<ul><li>개인 정보나 업무상 민감 데이터는 암/복호화나 익명화 처리를 통해 데이터베이스에서 관리</li></ul></li><li>악의적 시도시 에러 처리<ul><li>공격 패턴에 대한 사용자 정의 예외 처리를 적용하고 에러 처리 내용이 외부에서 조회되지 않도록 권한 관리</li></ul></li></ul></li></ul><h3 id="데이터베이스-암호화encryption-알고리즘"><a class="markdownIt-Anchor" href="#데이터베이스-암호화encryption-알고리즘"></a> 데이터베이스 암호화(Encryption) 알고리즘</h3><ul><li>데이터베이스 암호화 알고리즘은 크게 대칭 키, 해시, 비대칭 키 알고리즘이 사용됨<ul><li>대칭 키 암호 알고리즘<ul><li>DES</li><li>ARIA 128/192/256</li><li>SEED</li></ul></li><li>해시 알고리즘<ul><li>SHA 256/384/512</li><li>HAS-160</li></ul></li><li>비대칭 키 암호 알고리즘<ul><li>RSA</li><li>ECDSA</li></ul></li></ul></li></ul><h3 id="데이터베이스-암호화-기법"><a class="markdownIt-Anchor" href="#데이터베이스-암호화-기법"></a> 데이터베이스 암호화 기법</h3><ul><li><u>애플리케이션에서 암호화를 수행하는 API 방식과 데이터베이스에서 암호화를 수행하는 Plug-in 방식, API 방식과 Plug-in 방식을 혼합한 Hybrid 방식</u></li><li><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0515_01.png" alt="암호화기법" /></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;데이터베이스-보안-기능-적용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스암호화" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%95%94%ED%98%B8%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 데이터베이스 이중화 구성</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%B4%EC%A4%91%ED%99%94%EA%B5%AC%EC%84%B1/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%B4%EC%A4%91%ED%99%94%EA%B5%AC%EC%84%B1/</id>
    <published>2020-05-14T16:35:42.000Z</published>
    <updated>2020-05-14T16:35:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="데이터베이스-이중화-database-replication-정의"><a class="markdownIt-Anchor" href="#데이터베이스-이중화-database-replication-정의"></a> 데이터베이스 이중화 Database Replication 정의</h3><ul><li><u>시스템 오류로 인한 데이터베이스 서비스 중단이나 물리적 손상</u> 발생 시 이를 <u>복구하기 위해 동일한 데이터베이스를 복제하여 관리</u><ul><li>하나 이상의 데이터베이스가 항상 같은 상태를 유지하므로 <u>데이터베이스에 문제가 발생하면 복제된 데이터베이스를 이용</u>하여 즉시 문제 해결 가능</li><li>여러 개의 데이터베이스를 동시에 관리하므로 사용자가 수행하는 작업이 데이터베이스 이중화 시스템에 연결된 다른 데이터베이스에도 동일하게 적용됨</li><li>애플리케이션을 <u>여러 개의 데이터베이스로 분산시켜 처리</u>하므로 데이터베이스 부하를 줄일 수 있음</li><li>데이터베이스 이중화를 이용하면 손쉽게 백업 서버 운영 가능</li></ul></li></ul><h3 id="데이터-이중화의-분류"><a class="markdownIt-Anchor" href="#데이터-이중화의-분류"></a> 데이터 이중화의 분류</h3><ul><li>변경 내용의 전달 방식에 따라 Eager 기법과 Lazy 기법으로 나뉨<ul><li>Eager 기법<ul><li>트랜잭션 수행 중 데이터 변경이 발생하면 이중화 된 모든 데이터베이스에 즉시 전달하여 변경 내용이 즉시 적용되도록 하는 기법</li></ul></li><li>Lazy 기법<ul><li>트랜잭션의 수행이 종료되면 변경 사실을 새로운 트랜잭션에 작성하여 각 데이터베이스에 전달되는 기법으로, 데이터베이스마다 새로운 트랜잭션이 수행되는 것으로 간주됨</li></ul></li></ul></li></ul><h3 id="데이터-이중화의-구성-방법"><a class="markdownIt-Anchor" href="#데이터-이중화의-구성-방법"></a> 데이터 이중화의 구성 방법</h3><ul><li>활동-대기(Active-Standby) 방법과 활동-활동(Active-Active) 방법이 있음<ul><li>Active-Active<ul><li>두 개의 DB가 서로 다른 서비스를 제공하다가 둘 중 한쪽 DB에 문제가 발생하면 나머지 다른 DB가 서비스를 제공</li><li>두 개의 DB가 모두 처리하기 때문에 처리율이 높지만 구성 방법 및 설정이 복잡함</li></ul></li><li>Active-Standby<ul><li>한 DB가 활성 상태로 서비스하고 있으면 다른 DB는 대기하고 있다가 활성 DB에 장애 발생 시 대기 상태의 DB가 자동으로 모든 서비스를 대신 수행</li><li>구성 방법과 관리가 쉬워 많은 기업에서 이용</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;데이터베이스-이중화-database-replication-정의&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스이중화구성" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%B4%EC%A4%91%ED%99%94%EA%B5%AC%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-13T16:32:44.000Z</published>
    <updated>2020-05-13T16:32:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="1-데이터-모델-개념"><a class="markdownIt-Anchor" href="#1-데이터-모델-개념"></a> 1. 데이터 모델 개념</h3><ul><li><u>현실 세계의 정보들을 컴퓨터에 표현</u>하기 위해서 <b>단순화, 추상화</b>하여 체계적으로 표현한 개념적 모형</li><li>종류<ul><li>개념적 데이터 모델</li><li>논리적 데이터 모델</li><li>물리적 데이터 모델</li></ul></li><li>구성 요소<ul><li>개체</li><li>속성</li><li>관계</li></ul></li><li>표시 요소<ul><li>구조</li><li>연산</li><li>제약 조건</li></ul></li></ul><h3 id="2-개체-관계e-r모델"><a class="markdownIt-Anchor" href="#2-개체-관계e-r모델"></a> 2. 개체-관계(E-R)모델</h3><ul><li><u>데이터를 개체, 관계, 속성으로 묘사</u></li><li>E-R 다이어그램으로 표현하며, 1:1, 1:N, N:M 등의 관계 유형을 제한 없이 나타낼 수 있음<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_01.png" alt="E-R다이어그램기호" /></li></ul><h3 id="3-논리적-데이터모델링"><a class="markdownIt-Anchor" href="#3-논리적-데이터모델링"></a> 3. 논리적 데이터모델링</h3><ul><li>E-R 다이어그램으로 표현된 개념적 구조를 데이터베이스에 저장할 형태로 표현한 논리적 구조로 정의하는 과정</li><li>논리적 모델은 H/W나 S/W에 독립적</li><li>종류<ul><li>관계 데이터 모델</li><li>계층 데이터 모델</li><li>네트워크 데이터 모델</li></ul></li></ul><h3 id="4-데이터베이스-정규화"><a class="markdownIt-Anchor" href="#4-데이터베이스-정규화"></a> 4. 데이터베이스 정규화</h3><ul><li>중복성을 최소화하고 정보의 일관성을 보장하기 위한 개념</li><li>릴레이션을 관련 있는 속성들로만 구성되도록 릴레이션을 분해하는 과정<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_06.png" alt="정규화과정" /></li></ul><h3 id="5-논리-데이터모델-품질검증"><a class="markdownIt-Anchor" href="#5-논리-데이터모델-품질검증"></a> 5. 논리 데이터모델 품질검증</h3><ul><li>좋은 데이터 모델의 조건<ul><li>완전성</li><li>중복배제</li><li>비즈니스 룰</li><li>데이터 재사용</li><li>안정성 및 활용성</li><li>간결성</li><li>의사소통</li><li>통합성</li></ul></li><li>데이터 모델 품질 검증 기준<ul><li>정확성</li><li>완전성</li><li>준거성</li><li>최신성</li><li>일관성</li><li>활용성</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-데이터-모델-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 논리 데이터모델 품질검증</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%EC%A6%9D/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%EC%A6%9D/</id>
    <published>2020-05-13T16:22:44.000Z</published>
    <updated>2020-05-13T16:22:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="좋은-데이터-모델의-조건"><a class="markdownIt-Anchor" href="#좋은-데이터-모델의-조건"></a> 좋은 데이터 모델의 조건</h3><ul><li>Completeness 완전성<ul><li>업무에 필요로 하는 모든 데이터가 데이터 모델에 정의되어 있어야함</li></ul></li><li>Non-Redundancy 중복배제<ul><li>하나의 데이터베이스 내에 동일한 사실은 반드시 한 번만 기록하여야 함</li></ul></li><li>Business Rules 비즈니스 룰<ul><li>수많은 업무 규칙을 데이터 모델에 표현하고 이를 해당 데이터 모델을 활용하는 모든 사용자가 그 규칙을 공유할 수 있게 제공</li></ul></li><li>Data Reusability 데이터 재사용<ul><li>데이터의 통합성과 독립성에 대하여 충분히 고려</li></ul></li><li>Stability and Flexibility 안정성 및 활용성<ul><li>확장성을 담보하기 위해서는 데이터 관점의 통합 불가피</li></ul></li><li>Elegance 간결성<ul><li>합리적으로 잘 정리된 데이터를 통합하여 데이터의 집합을 정의하고, 이를 데이터 모데로 잘 표현하여 활용</li></ul></li><li>Communication 의사소통<ul><li>데이터 분석 과정에서 도출되는 많은 업무 규칙은 데이터 모델에 개체, 서브타입, 속성, 관계등의 형태로 최대한 자세하게 표현되어야 함</li></ul></li><li>Integration 통합성<ul><li>동일한 성격의 데이터를 한 번만 정의하기 위해 공유 데이터에 대한 구조를 여러 업무 영역에서 공동으로 사용하기 용이하게 해야 함</li></ul></li></ul><h3 id="데이터-모델-품질-검증-기준"><a class="markdownIt-Anchor" href="#데이터-모델-품질-검증-기준"></a> 데이터 모델 품질 검증 기준</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_04.png" alt="데이터모델품질검증기준" /><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_05.png" alt="데이터모델품질검증기준" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;좋은-데이터-모델의-조건&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터모델품질검증" scheme="https://hyeonukdev.github.io/tags/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%EC%A6%9D/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 데이터베이스 정규화</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%A0%95%EA%B7%9C%ED%99%94/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%A0%95%EA%B7%9C%ED%99%94/</id>
    <published>2020-05-13T16:11:49.000Z</published>
    <updated>2020-05-13T16:11:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="anomaly-이상-현상"><a class="markdownIt-Anchor" href="#anomaly-이상-현상"></a> Anomaly 이상 현상</h3><ul><li><u>불필요한 데이터 중복으로 인해</u> 릴레이션에 대한 데이터 삽입/수정/삭제 연산을 수헹할 때 발생할 수 있는 부작용</li><li><u>Normalization 정규화를 통해 이상현상을 제거</u></li><li>종류<ul><li>삽입 이상<ul><li>새 데이터를 삽입시 불필요한 데이터도 함께 <u>삽입</u>되는 문제</li></ul></li><li>갱신 이상<ul><li>중복 데이터 중 일부만 변경하여 데이터가 불일치하게 되는 <u>모순의 문제</u></li></ul></li><li>삭제 이상<ul><li>데이터를 삭제시 꼭 필요한 데이터까지 함께 삭제되는 <u>데이터 손실의 문제</u></li></ul></li></ul></li></ul><h3 id="normalization-정규화란"><a class="markdownIt-Anchor" href="#normalization-정규화란"></a> Normalization 정규화란?</h3><ul><li>중복성을 최소화하고 정보의 일관성을 보장하기 위한 개념</li><li>릴레이션을 관련 있는 속성들로만 구성되도록 릴레이션을 분해하는 과정<br /><u></li><li>데이터 구조의 안정성을 최대로 함</li><li>중복을 배제하여 삽입, 삭제, 갱신 이상의 발생을 방지함</li><li>데이터 삽입 시 릴레이션을 재구성할 필요성을 줄임</li><li>논리적 설계 단계에서 수행<br /></u></li><li>과정(아래 과정을 해야지 정규형이 됨)<ol><li>비정규형</li><li>1NF<ul><li>중복속성 제거</li><li>제1정규화<ul><li>반복되는 속성이나 Group 속성 제거</li></ul></li></ul></li><li>2NF<ul><li>부분종속성 제거</li><li>제2정규화<ul><li>주 식별자에게 완전히 종속되지 않은 속성 제거</li></ul></li></ul></li><li>3NF<ul><li>이행종속성 제거</li><li>제3정규화<ul><li>비 식별자에 종속되는 속성 제거</li></ul></li></ul></li><li>BCNF(보이스코드정규형)<ul><li>후보키가 아닌 결정자 제거</li></ul></li><li>4NF<ul><li>다치종속성 제거</li><li>제4정규화<ul><li>다시종속성 제거</li></ul></li></ul></li><li>5NF<ul><li>조인종속성 제거</li><li>제5정규화<ul><li>조인 종속성 제거</li></ul></li></ul></li></ol></li></ul><h3 id="정규화-목적"><a class="markdownIt-Anchor" href="#정규화-목적"></a> 정규화 목적</h3><ul><li>데이터 중복 배제로 데이터 관리 편의성 제고 및 자료 저장 공간의 최소화</li><li>데이터 모형 단순화</li><li>데이터 구조의 안정성 및 무결성 유지</li><li>속성의 배열상태 검증</li><li>엔티티와 속성의 누락 여부 검증 수단</li><li>자료검색과 추출의 효율성 추구</li></ul><h3 id="정규화-특징"><a class="markdownIt-Anchor" href="#정규화-특징"></a> 정규화 특징</h3><ul><li>어떠한 관계구조가 바람직한 것인지, 바람직하지 못한 관계를 어떻게 분해하여야 하는지에 관한 구체적인 판단 기준을 제공</li><li>정규화된 데이터 모델은 정확성, 일치성, 단순성, 비중복성, 안전성 보장</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;anomaly-이상-현상&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스정규화" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%A0%95%EA%B7%9C%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 논리적 데이터 모델링</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%85%BC%EB%A6%AC%EC%A0%81%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%85%BC%EB%A6%AC%EC%A0%81%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81/</id>
    <published>2020-05-13T15:11:07.000Z</published>
    <updated>2020-05-13T15:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="논리적-데이터-모델링-정의"><a class="markdownIt-Anchor" href="#논리적-데이터-모델링-정의"></a> 논리적 데이터 모델링 정의</h3><ul><li>E-R 다이어그램으로 표현된 개념적 구조를 데이터베이스에 저장할 형태로 표현한 논리적 구조로 정의하는 과정</li><li>정확한 업무 분석을 통한 자료의 흐름을 분석하여 현재 사용 중인 양식, 문서, 장표를 중심으로 자료항목을 추출하여 <u>엔티티와 속성들의 관계를 구조적으로 정의하는 단계</u></li></ul><h3 id="논리적-데이터-모델링-특성"><a class="markdownIt-Anchor" href="#논리적-데이터-모델링-특성"></a> 논리적 데이터 모델링 특성</h3><ul><li><u>요구사항을 충분히 수집하지 않으면 다음 단계의 요구사항 변경에 따른 많은 비용이 발생</u></li><li>모든 이해당사자들과 의사소통의 보조자료로서 E-R 모델을 활용</li><li>논리적 모델은 H/W나 S/W에 독립적<br /><u></li><li>DBMS에 맞는 논리적 스키마 설계</li><li>트랜잭션 인터페이스를 설계<ul><li><b>사용자의 요구에 대한 트랜잭션을 모델링하는 것은 개념적 설계단계</b></li></ul></li><li>관계형 데이터베이스에서는 테이블을 설계하는 단계<br /></u></li><li>종류<ul><li>관계 데이터 모델</li><li>계층 데이터 모델</li><li>네트워크 데이터 모델</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;논리적-데이터-모델링-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리적데이터모델링" scheme="https://hyeonukdev.github.io/tags/%EB%85%BC%EB%A6%AC%EC%A0%81%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 개체-관계(E-R)모델</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EA%B0%9C%EC%B2%B4%EA%B4%80%EA%B3%84%EB%AA%A8%EB%8D%B8/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EA%B0%9C%EC%B2%B4%EA%B4%80%EA%B3%84%EB%AA%A8%EB%8D%B8/</id>
    <published>2020-05-13T15:01:27.000Z</published>
    <updated>2020-05-13T15:01:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="개체-관계entity-relationship-모델-정의"><a class="markdownIt-Anchor" href="#개체-관계entity-relationship-모델-정의"></a> 개체-관계(Entity-Relationship) 모델 정의</h3><ul><li><u>개념적 데이터 모델</u>의 가장 대표적</li><li><u>데이터를 개체, 관계, 속성으로 묘사</u></li><li>E-R 다이어그램으로 표현하며, 1:1, 1:N, N:M 등의 관계 유형을 제한 없이 나타낼 수 있음</li></ul><h3 id="e-r-다이어그램-개념"><a class="markdownIt-Anchor" href="#e-r-다이어그램-개념"></a> E-R 다이어그램 개념</h3><ul><li>E-R 모델의 기본 아이디어를 이해하기 쉽게 <u>기호를 사용하여 시각적으로 표현한 그림</u></li><li>실체 간의 관계는 물론 조직, 사용자, 프로그램, 데이터 등 시스템 내에서 역할을 가진 모든 실체를 표현</li><li>데이터에 대해 개발자, 관리자, 사용자들이 서로 다르게 인식하고 있는 뷰들을 하나로 단일화 시킴</li><li>표기법<ul><li>피터첸 표기법</li><li>정보공학 표기법</li><li>바커 표기법</li></ul></li></ul><h3 id="e-r-다이어그램-기호"><a class="markdownIt-Anchor" href="#e-r-다이어그램-기호"></a> E-R 다이어그램 기호</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_01.png" alt="피터첸표기법" /></p><h3 id="e-r-다이어그램-표기법-비교"><a class="markdownIt-Anchor" href="#e-r-다이어그램-표기법-비교"></a> E-R 다이어그램 표기법 비교</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_02.png" alt="표기법 비교" /></p><h3 id="관계의-표현-및-이해"><a class="markdownIt-Anchor" href="#관계의-표현-및-이해"></a> 관계의 표현 및 이해</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_03.png" alt="관계의 표현" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;개체-관계entity-relationship-모델-정의&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="ER모델" scheme="https://hyeonukdev.github.io/tags/ER%EB%AA%A8%EB%8D%B8/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 데이터모델개념</title>
    <link href="https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EA%B0%9C%EB%85%90/"/>
    <id>https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EA%B0%9C%EB%85%90/</id>
    <published>2020-05-13T12:58:24.000Z</published>
    <updated>2020-05-13T12:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><ul><li><u>E-R 표기법</u>에 따라 주제 영역별로 <u>개체와 식별자를 포함한 속성</u>을 <u>도식화 및 개체 간 관계</u>의 기수성, 선택성, 식별/비식별 관계를 도식화</li><li>개체 내 속성 원자성과 함수 종속성을 분석하여 <u>데이터베이스 정규화 대상 개체를 도출하고 데이터베이스 정규화</u>를 수행</li><li><u>논리 데이터 모델에 대하여 <b>정확성, 완전성, 준거성, 최신성, 일관성, 활용성의 품질기준을 적용</b></u>하고 개체, 속성, 관계에 대하여 체크리스트를 작성한 후 검증 결과에 따라 <u>논리 데이터 모델 품질 검증 결과서</u>를 작성</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>데이터 모델<ul><li>현실 세계의 정보들을 컴퓨터에 표현하기 위해 단순화, 추상화하여 체계적으로 표현한 개념적 모형</li></ul></li><li>이상 현상<ul><li>불필요한 데이터 중복으로 인해 릴레이션에 대한 데이터 삽입/수정/삭제 연산을 수행할 때 발생할 수 있는 부작용</li></ul></li></ul><h3 id="데이터베이스-개발절차"><a class="markdownIt-Anchor" href="#데이터베이스-개발절차"></a> 데이터베이스 개발절차</h3><ul><li>요구분석<ul><li>비지니스 요구사항</li></ul></li><li>전략수립<ul><li>개념적데이터 모델링</li></ul></li><li>분석<ul><li>논리적데이터 모델링</li></ul></li><li>설계<ul><li>물리적데이터 모델링</li></ul></li><li>개발<ul><li>데이터베이스 구축<blockquote><p>운영시스템 안에 데이터베이스 존재</p></blockquote></li></ul></li></ul><h3 id="데이터-모델의-정의"><a class="markdownIt-Anchor" href="#데이터-모델의-정의"></a> 데이터 모델의 정의</h3><ul><li><u>현실 세계의 정보들을 컴퓨터에 표현</u>하기 위해서 <b>단순화, 추상화</b>하여 체계적으로 표현한 개념적 모형</li><li>종류<ul><li>개념적 데이터 모델</li><li>논리적 데이터 모델</li><li>물리적 데이터 모델</li></ul></li><li>구성 요소<ul><li>개체</li><li>속성</li><li>관계</li></ul></li><li>표시 요소<ul><li>구조</li><li>연산</li><li>제약 조건</li></ul></li></ul><h3 id="데이터-모델링-절차"><a class="markdownIt-Anchor" href="#데이터-모델링-절차"></a> 데이터 모델링 절차</h3><ol><li>개념적 데이터 모델링</li></ol><ul><li>중요 개념을 구분</li><li>핵심 개체 도출</li><li>ERD 작성</li></ul><ol start="2"><li>논리적 데이터 모델링</li></ol><ul><li>각 개념을 구체화</li><li>ERD-RDB 모델 사상</li><li>상세 속성 정의</li><li>정규화</li></ul><ol start="3"><li>물리적 데이터 모델링</li></ol><ul><li>개체, 인덱스 등 생성</li><li>DB 개체 정의</li><li>테이블 및 인덱스 등 설계</li></ul><h3 id="데이터-모델의-종류"><a class="markdownIt-Anchor" href="#데이터-모델의-종류"></a> 데이터 모델의 종류</h3><h4 id="1-개념적-데이터-모델"><a class="markdownIt-Anchor" href="#1-개념적-데이터-모델"></a> 1. 개념적 데이터 모델</h4><ul><li>현실 세계에 대한 인식을 <u>추상적 개념으로 표현하는 과정</u></li><li><u>속성들로 기술된 개체 타입과 이 개체 타입들 간의 관계를 이용하여 현실 세계를 표현</u></li><li>현실 세계에 존재하는 개체를 인간이 이해할 수 있는 <u>정보 구조</u>로 표현하기 때문에 <u>정보 모델</u>이라고 함</li><li>대표적인 개념적 데이터 모델에는 E-R 모델이 있음<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_09.png" alt="E-R모델" /></li></ul><h4 id="2-논리적-데이터-모델"><a class="markdownIt-Anchor" href="#2-논리적-데이터-모델"></a> 2. 논리적 데이터 모델</h4><ul><li>개념적 모델링 과정에서 얻은 개념적 구조를 <u>컴퓨터가 이해하고 처리할 수 있는</u> 컴퓨터 세계의 환경에 맞도록 <u>변환</u>하는 과정</li><li><u>필드로 기술된 데이터 타입과 이 데이터 타입들 간의 관계</u>를 이용한 현실 세계를 표현</li><li><u>단순히 데이터 모델이라고 하면 논리적 데이터 모델을 의미</u></li><li>특정 DBMS는 특정 논리적 데이터 모델 하나만 선정하여 사용</li><li>데이터 간의 관계를 어떻게 표현하느냐에 따라 <u>관계 모델, 계층 모델, 네트워크 모델로 구분</u></li></ul><h4 id="3-물리적-데이터-모델"><a class="markdownIt-Anchor" href="#3-물리적-데이터-모델"></a> 3. 물리적 데이터 모델</h4><ul><li>논리적 데이터 모델에서 레코드의 상세 스펙 등을 기술한 모델로 <u>실제 컴퓨터에 데이터가 저장되는 방법</u>을 정의</li><li>DB 개체 정의</li><li>테이블 및 인덱스 등 설계</li></ul><h3 id="데이터-모델의-구성-요소"><a class="markdownIt-Anchor" href="#데이터-모델의-구성-요소"></a> 데이터 모델의 구성 요소</h3><h4 id="1-entity-개체"><a class="markdownIt-Anchor" href="#1-entity-개체"></a> 1. Entity 개체</h4><ul><li><u>데이터베이스에 표현하려는 것</u>으로 사람이 생각하는 <u>개념이나 정보 단위 같은 현실 세계의 대상체</u></li><li>실세계에 독립적으로 존재하는 유형, 무형의 정보로서 <u>서로 연관된 몇 개의 속성으로 구성</u></li><li><u>파일 시스템의 레코드에 대응</u> 하는 것으로 어떤 정보를 제공하는 역할을 수행</li><li>독립적으로 존재하거나 그 자체로서도 구별 가능</li><li>유일한 <u>식별자</u>에 의해 식별되고 다른 개체와 하나 이상의 <u>관계가 있음</u></li></ul><h4 id="2-attribute-속성"><a class="markdownIt-Anchor" href="#2-attribute-속성"></a> 2. Attribute 속성</h4><ul><li><u>데이터베이스를 구성하는 가장 작은 논리적 단위</u></li><li><u>파일 구조상</u>의 데이터 항목 또는 데이터 <u>필드</u>에 해당</li><li>속성은 개체를 구성하는 항목</li><li>속성의 수는 Degree<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_10.png" alt="체계 예시" /></li></ul><h4 id="3-relationship-관계"><a class="markdownIt-Anchor" href="#3-relationship-관계"></a> 3. Relationship 관계</h4><ul><li>개체와 개체 사이의 논리적 연결을 의미</li><li>개체 간의 관계와 속성 간의 관계가 있음</li><li>형태<ul><li>일대일(1:1)</li><li>일대다(1:N)</li><li>다대다(N:M)</li></ul></li><li><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_11.png" alt="개체간 관계" /></li></ul><h3 id="데이터-모델에-표시할-요소"><a class="markdownIt-Anchor" href="#데이터-모델에-표시할-요소"></a> 데이터 모델에 표시할 요소</h3><ul><li>Structure 구조<ul><li>논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질을 표현</li></ul></li><li>Operation 연산<ul><li>데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본도구</li></ul></li><li>Constraint 제약조건<ul><li>데이터베이스에 저장될 수 있는 실제 데이터베이스의 논리적인 제약 조건</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;E-R 표기법&lt;/u&gt;에 따라 주제 영역별로 &lt;u&gt;개체와 식별자를 포함한 속성&lt;/u
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터모델개념" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EA%B0%9C%EB%85%90/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-12T17:26:34.000Z</published>
    <updated>2020-05-12T17:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="1-관계-데이터-모델"><a class="markdownIt-Anchor" href="#1-관계-데이터-모델"></a> 1. 관계 데이터 모델</h3><ul><li>실 세계 데이터를 행과 열과 구성된 표 형태로 저장하고 한 테이블의 필드 값을 이용하여 다른 테이블에 관련된 데이터를 찾는 식으로 검색하는 데이터 모델</li><li>용어<ul><li>릴레이션</li><li>속성</li><li>튜플</li><li>도메인</li><li>차수</li><li>카디널리티</li></ul></li><li>릴레이션 특성과 무결성 제약조건</li></ul><h3 id="2-관계-데이터언어"><a class="markdownIt-Anchor" href="#2-관계-데이터언어"></a> 2. 관계 데이터언어</h3><ul><li>관계 데이터 모델의 연산</li><li>원하는 데이터를 얻기 위해 릴레이션에 필요한 처리 요구를 수행하는 것</li><li>종류<ul><li>일반 집합 연산자</li><li>순수 관계 연산자</li></ul></li><li>관계해석의 개념</li></ul><h3 id="3-시스템-카탈로그와-뷰"><a class="markdownIt-Anchor" href="#3-시스템-카탈로그와-뷰"></a> 3. 시스템 카탈로그와 뷰</h3><ul><li>데이터베이스의 객체(사용자, 릴레이션 뷰, 인덱스, 권한)와 구조들에 관한 모든 데이터를 포함하는 <u>시스템 데이터베이스</u></li><li>뷰는 <u>가상 테이블을</u> 구성하는 데이터베이스 오브젝트로 <u>별도의 저장 공간은 없지만</u> 뷰를 통해 SELECT, DELETE, UPDATE를 할 수 있음</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-관계-데이터-모델&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
</feed>
