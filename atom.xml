<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Engineering</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyeonukdev.github.io/"/>
  <updated>2020-05-15T04:55:27.000Z</updated>
  <id>https://hyeonukdev.github.io/</id>
  
  <author>
    <name>Hyeonukdev</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>물리데이터베이스 - 파티셔닝</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AC%BC%EB%A6%AC%EC%86%8D%EC%84%B1%EC%84%A4%EA%B3%84/%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/</id>
    <published>2020-05-15T04:55:27.000Z</published>
    <updated>2020-05-15T04:55:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><ul><li><p>식별된 오브젝트의 데이터 타입, 사이즈, 증가 용량을 고려하여 저장 공간을 산출하고, 해당 오브젝트에 대한 테이블 스페이스를 할당</p></li><li><p>할당된 테이블 스페이스 용량을 기반으로 디스크 저장 용량을 산정하고, 데이터베이스 백업 주기, 방식에 따른 별도 저장 공간 용량을 산정</p></li><li><p>분산위치, 엔티티명, 테이블명, 테이블 스페이스명, 테이블 스페이스 용량, 데이터 파일명, 파티셔닝, 클러스터링 정보, 보안정보에 대한 물리 데이터베이스 설계서를 작성</p></li></ul><h3 id="partition-파티션-개념"><a class="markdownIt-Anchor" href="#partition-파티션-개념"></a> Partition 파티션 개념</h3><ul><li>데이터베이스에서 파티션은 <u>대용량의 테이블이나 인덱스를 작은 논리적 단위인 파티션으로 나누는 것 </u><ul><li>대용량 데이터베이스의 경우 중요한 몇 개의 테이블에만 집중되어 데이터가 증가되므로 이런 테이블을 작은 단위로 나눠 분산시키면 <u>성능 저하를 방지와 데이터 관리가 쉬워짐</u></li><li>테이블이나 인덱스를 파티셔닝하면 파티션키 또는 인덱스키에 따라 <u>물리적으로 별도의 공간에 데이터가 저장됨</u></li><li><u>데이터 처리는 테이블 단위로 이뤄지고 데이터 저장은 파티션별로 수행</u></li></ul></li></ul><h3 id="파티션-장단점"><a class="markdownIt-Anchor" href="#파티션-장단점"></a> 파티션 장/단점</h3><ul><li>장점<ul><li>데이터 접근 시 액세스 범위를 줄여 <u>쿼리 성능이 향상됨</u></li><li>파티션별로 <u>데이터가 분산되어 저장되므로 디스크의 성능이 향상됨</u></li><li>파티션별로 백업 및 복구를 수행하므로 <u>속도가 빠름</u></li><li>시스템 장애 시 <u>데이터 손상 정도를 최소화</u></li><li>데이터 가용성이 향상됨</li><li>파티션 단위로 <u>입/출력을 분산</u>시킬 수 있음</li></ul></li><li>단점<ul><li>하나의 테이블을 세분화하여 관리하므로 세심한 관리가 요구됨</li><li>테이블간 조인에 대한 <u>비용이 증가함</u></li><li><u>용량이 작은 테이블에 파티셔닝을 수행하면 오히려 성능이 저하됨</u></li></ul></li></ul><h3 id="파티션의-종류"><a class="markdownIt-Anchor" href="#파티션의-종류"></a> 파티션의 종류</h3><h4 id="1-range-partitioning-범위-분할"><a class="markdownIt-Anchor" href="#1-range-partitioning-범위-분할"></a> 1. Range Partitioning 범위 분할</h4><ul><li>지정한 열의 값을 기준을 분할<ul><li>일별, 월별, 분기별</li></ul></li></ul><h4 id="2-hash-partitioning-해시-분할"><a class="markdownIt-Anchor" href="#2-hash-partitioning-해시-분할"></a> 2. Hash Partitioning 해시 분할</h4><ul><li><u>해시 함수를 적용한 결과 값에 따라 데이터를 분할</u></li><li>특정 파티션에 데이터가 집중되는 범위 분할의 단점을 보완한 것으로 <u>데이터를 고르게 분산할 때 유용함</u></li><li>특정 데이터가 어디에 있는지 판단할 수 없음</li><li>고객번호, 주민번호 등과 같이 데이터가 고른 컬럼에 효과적임</li></ul><h4 id="3-composite-partitoning-조합-분할"><a class="markdownIt-Anchor" href="#3-composite-partitoning-조합-분할"></a> 3. Composite Partitoning 조합 분할</h4><ul><li>범위 분할로 분할한 다음 해시 함수를 적용하여 다시 분할하는 방식</li><li>범위 분할한 파티션이 너무 커서 관리가 어려울 때 유용함</li></ul><h3 id="파티션키-선정시-고려사항"><a class="markdownIt-Anchor" href="#파티션키-선정시-고려사항"></a> 파티션키 선정시 고려사항</h3><ul><li>파티션키는 <u>테이블 접근 유형</u>에 따라 파티셔닝이 이뤄지도록 선정</li><li>데이터 관리의 용이성을 위해 <u>이력성 데이터</u>는 파티션 생성주기와 소멸주기를 일치</li><li><u>매일 생성되는 날짜 컬럼, 백업의 기준이 되는 날짜 컬럼, 파티션 간 이동이 없는 컬럼, I/O 병목을 줄일 수 있는 데이터 분포가 양호한 컬럼</u> 등을 파티션키로 선정</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;식별된 오브젝트의 데이터 타입, 사이즈, 증가 용량을 고려하여 저장 공간을 산출
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="파티셔닝" scheme="https://hyeonukdev.github.io/tags/%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-14T18:14:17.000Z</published>
    <updated>2020-05-14T18:14:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="1-스토리지"><a class="markdownIt-Anchor" href="#1-스토리지"></a> 1. 스토리지</h3><ul><li><p>스토리지는 단일 디스크로 처리할 수 없는 대용량의 데이터를 저장하기 위해 <u>서버와 저장장치를 연결하는 기술</u></p></li><li><p>스토리지 종류</p><ul><li>DAS(Direct Attached Storage)</li><li>NAS(Network Attached Storage)</li><li>SAN(Storage Area Network)</li></ul></li></ul><h3 id="2-분산-데이터베이스"><a class="markdownIt-Anchor" href="#2-분산-데이터베이스"></a> 2. 분산 데이터베이스</h3><ul><li>논리적으로 같은 시스템에 속하지만, <u>컴퓨터 네트워크를 통해 물리적으로 분산되어 있는 데이터베이스</u></li><li>분산 데이터베이스의 4가지 투명성<ul><li>위치투명성</li><li>중복투명성</li><li>병행투명성</li><li>장애투명성</li></ul></li><li>분산 데이터베이스 설계 방법<ul><li>테이블 위치 분산</li><li>분할</li><li>할당</li></ul></li></ul><h3 id="3-데이터베이스-이중화-구성"><a class="markdownIt-Anchor" href="#3-데이터베이스-이중화-구성"></a> 3. 데이터베이스 이중화 구성</h3><ul><li><u>시스템 오류로 인한 데이터베이스 서비스 중단이나 물리적 손상</u> 발생 시 이를 <u>복구하기 위해 동일한 데이터베이스를 복제하여 관리</u></li><li>데이터 이중화의 분류<ul><li>Eager 기법</li><li>Lazy 기법</li></ul></li><li>데이터 이중화의 구성 방법<ul><li>Active-Active</li><li>Active-Standby</li></ul></li></ul><h3 id="4-데이터베이스-암호화"><a class="markdownIt-Anchor" href="#4-데이터베이스-암호화"></a> 4. 데이터베이스 암호화</h3><ul><li>데이터베이스 암호화 알고리즘은 크게 대칭 키, 해시, 비대칭 키 알고리즘이 사용됨<ul><li>대칭 키 암호 알고리즘<ul><li>DES</li><li>ARIA 128/192/256</li><li>SEED</li></ul></li><li>해시 알고리즘<ul><li>SHA 256/384/512</li><li>HAS-160</li></ul></li><li>비대칭 키 암호 알고리즘<ul><li>RSA</li><li>ECDSA</li></ul></li></ul></li><li>데이터베이스 암호화 기법<ul><li>API 방식</li><li>Plug-in 방식</li><li>Hybrid 방식</li></ul></li></ul><h3 id="5-접근통제"><a class="markdownIt-Anchor" href="#5-접근통제"></a> 5. 접근통제</h3><ul><li><u>데이터베이스에 대한 사용자들의 접근을 통제</u>함으로써 데이터를 보호하는 방법</li><li>접근통제의 3요소<ul><li>접근통제 정책</li><li>접근통제 메커니즘</li><li>접근통제 보안모델</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-스토리지&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-스토리
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 접근통제</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EC%A0%91%EA%B7%BC%ED%86%B5%EC%A0%9C/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EC%A0%91%EA%B7%BC%ED%86%B5%EC%A0%9C/</id>
    <published>2020-05-14T18:04:32.000Z</published>
    <updated>2020-05-14T18:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="접근-통제-access-control-개념"><a class="markdownIt-Anchor" href="#접근-통제-access-control-개념"></a> 접근 통제 Access Control 개념</h3><ul><li><u>데이터베이스에 대한 사용자들의 접근을 통제</u>함으로써 데이터를 보호하는 방법</li><li>접근통제는 데이터에 대해 다음과 같은 통제를 함으로써 자원의 불법적인 접근 및 파괴를 예방<ul><li>비인가된 사용자의 접근 감시</li><li>접근 요구자의 사용자 식별</li><li>접근 요구의 정당성 확인 및 기록</li><li>보안 정책에 근거한 접근의 승인 및 거부 등</li></ul></li><li>접근통제의 3요소<ul><li>접근통제 정책</li><li>접근통제 메커니즘</li><li>접근통제 보안모델</li></ul></li></ul><h3 id="임의-접근통제와-강제-접근-통제"><a class="markdownIt-Anchor" href="#임의-접근통제와-강제-접근-통제"></a> 임의 접근통제와 강제 접근 통제</h3><ul><li>임의 접근통제 DAC; Discretionary Access Control<ul><li>임의 접근통제는 <u>데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하는 방식</u></li><li>통제 권한이 주체에 있어 주체가 접근통제 권한을 지정하고 제어할 수 있음</li><li>일반적으로 특정 객체에 대한 조작 권한은 데이터베이스 관리 시스템으로 부터 부여 받지만 임의 접근통제에서는 객체를 생성한 사용자가 생성된 객체에 대한 모든 권한을 부여 받고, 부여된 권한을 다른 사용자에게 허가할 수 있음</li><li>임의 접근통제에 사용되는 <u>SQL명령어 : GRANT와 REVOKE</u></li></ul></li><li>강제 접근통제 MAC; Mandatory Access Control<ul><li><u>강제 접근통제는 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식</u></li><li>제3자가 접근통제 권한을 지정</li><li>데이터베이스 객체별로 보안 등급을 부여할 수 있고, 사용자 별로 인가 등급을 부여할 수 있음</li><li>주체는 자신보다 보안 등급이 높은 객체에 대해 읽기, 수정, 등록이 모두 불가능하고 보안 등급이 같은 객체에 대해서는 읽기, 수정, 등록이 가능함</li></ul></li></ul><h3 id="접근통제의-3요소"><a class="markdownIt-Anchor" href="#접근통제의-3요소"></a> 접근통제의 3요소</h3><h4 id="접근-통제-정책"><a class="markdownIt-Anchor" href="#접근-통제-정책"></a> 접근 통제 정책</h4><ul><li>접근통제 정책은 어떤 주체가 언제, 어디서, 어떤 객체에게, 어떤 행위에 대한 허용 여부를 정의하는 것<ul><li>신분 기반 정책<ul><li>주체나 그룹의 신분에 근거하여 객체의 접근을 제한. IBP나 GBP가 있음</li><li>IBP(Individual–Based Policy) : 최소 권한 정책으로, 단일 주체에게 하나의</li><li>객체에 대한 허가를 부여 GBP(Group–Based Policy) : 복수 주체에 하나의 객체에 대한 허가를 부여</li></ul></li><li>규칙 기반 정책<ul><li>주체가 갖는 권한에 근거하여 객체의 접근을 제한. MLP와 CBP가 있음</li><li>MLP(Multi-Level Policy) : 사용자 및 객체별로 지정된 기밀 분류에 따른 정책</li><li>CBP(Compartment-Based Policy) : 집단별로 지정된 기밀 허가에 따른 정책</li></ul></li><li>역학 기반 정책<ul><li>GBP의 변형된 정책으로, 주체의 신분이 아니라 주체가 맡은 역할에 근거하여 객체의 접근을 제한하는 방법</li><li>예) 인사담당자, DBA 등</li></ul></li></ul></li></ul><h4 id="접근통제-매커니즘"><a class="markdownIt-Anchor" href="#접근통제-매커니즘"></a> 접근통제 매커니즘</h4><ul><li>정의된 접근통제 정책을 구현하는 기술적인 방법으로, 접근통제 목록, 능력 리스트, 보안 등급, 패스워드, 암호화 등이 있음<ul><li>접근통제 목록<ul><li>객체를 기준으로 특정 객체에 대해 어떤 주체가 어떤 행위를 할 수 있는지를 기록한 목록</li></ul></li><li>능력 리스트<ul><li>주체를 기준으로 주체에게 허가된 자원 및 권한을 기록한 목록</li></ul></li><li>보안 등급<ul><li>주체나 객체 등에 부여된 보안 속성의 집합으로, 이 등급을 기반으로 접근 승인 여부가 결정됨</li></ul></li><li>패스워드<ul><li>주체가 자신임을 증명할 때 사용하는 인증 방</li></ul></li><li>암호화<ul><li>데이터를 보낼 때 지정된 수신자 이외에는 내용을 알 수 없도록 평문을 암호문으로 변환하는 것으로, 무단 도용을 방지하기 위해 주로 사용함</li></ul></li></ul></li></ul><h4 id="접근통제-보안-모델"><a class="markdownIt-Anchor" href="#접근통제-보안-모델"></a> 접근통제 보안 모델</h4><ul><li>보안 정책을 구현하기 위한 정형화된 모델로, 기밀성 모델, 무결성 모델, 접근 통제 모델이 있음<ul><li>기밀성 모델<ul><li>시스템 내 정보와 자원은 인가된 사용자에게만 접근이 허용되는 것</li><li>군사적인 목적으로 개발된 최초의 수학적 모델</li><li>제약조건<ul><li>단순 보안 규칙 : 주체는 자신보다 높은 등급의 객체는 읽을 수 없음</li><li>스타 보안 규칙 : 주체는 자신보다 낮은 등급의 객체에 정보를 쓸 수 없음</li></ul></li></ul></li><li>무결성 모델<ul><li>기밀성 모델에서 발생하는 불법적인 정보 변경을 방지하기 위해 무결성을 기반으로 개발된 모델</li><li>무결성 모델은 데이터의 일관성 유지에 중점을 두어 개발</li><li>무결성 모델은 기밀성 모델과 동일하게 주체와 객체의 보안 등급을 기반으로 함</li><li>제약조건<ul><li>단순 조안 규칙 : 주체는 자신보다 낮은 등급의 객체를 읽을 수 없음</li><li>스타 보안 규칙 : 주체는 자신보다 높은 등급의 객체에 정보를 쓸 수 없음</li></ul></li></ul></li><li>접근통제 모델<ul><li>접근통제 메카니즘을 보안 모델로 발전시킴. 대표적으로 접근통제 행렬이 있음</li><li>접근통제 행렬은 행은 주체, 열은 객체 즉 행과 열로 주체와 객체의 권한유형을 나타냄</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;접근-통제-access-control-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anc
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스이중화구성" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%B4%EC%A4%91%ED%99%94%EA%B5%AC%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 데이터베이스 암호화</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%95%94%ED%98%B8%ED%99%94/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%95%94%ED%98%B8%ED%99%94/</id>
    <published>2020-05-14T17:35:42.000Z</published>
    <updated>2020-05-14T17:35:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="데이터베이스-보안-기능-적용"><a class="markdownIt-Anchor" href="#데이터베이스-보안-기능-적용"></a> 데이터베이스 보안 기능 적용</h3><ul><li>데이터베이스의 접근 권한 및 데이터베이스 동작 객체(sql, 프로시저, 트리거 등)의 보안 취약점을 보완하기 위해 보안 기능을 적용</li><li>민감 데이터는 데이터 자체의 보안 방안(암호화, 익명화 등)도 고려</li><li>고려사항<ul><li>데이터베이스 접근 권한<ul><li>데이터베이스, 스키마, 엔티티(테이블)의 접근 권한 관리(접근 권한 객체 관리 수준은 성능과 보안성을 고려하여 관리)</li><li>예시: 테이블 권한 관리 시 성능이 저하, 민감 테이블만 관리</li></ul></li><li>악의적 코드 삽입 금지<ul><li>프로시저(Procedure), 트리거(Trigger), 배치(Batch) 등 데이터베이스 객체의 동작상에 악의적인 코드가 삽입되지 않도록 동작 간 처리</li></ul></li><li>민감 데이터 관리<ul><li>개인 정보나 업무상 민감 데이터는 암/복호화나 익명화 처리를 통해 데이터베이스에서 관리</li></ul></li><li>악의적 시도시 에러 처리<ul><li>공격 패턴에 대한 사용자 정의 예외 처리를 적용하고 에러 처리 내용이 외부에서 조회되지 않도록 권한 관리</li></ul></li></ul></li></ul><h3 id="데이터베이스-암호화encryption-알고리즘"><a class="markdownIt-Anchor" href="#데이터베이스-암호화encryption-알고리즘"></a> 데이터베이스 암호화(Encryption) 알고리즘</h3><ul><li>데이터베이스 암호화 알고리즘은 크게 대칭 키, 해시, 비대칭 키 알고리즘이 사용됨<ul><li>대칭 키 암호 알고리즘<ul><li>DES</li><li>ARIA 128/192/256</li><li>SEED</li></ul></li><li>해시 알고리즘<ul><li>SHA 256/384/512</li><li>HAS-160</li></ul></li><li>비대칭 키 암호 알고리즘<ul><li>RSA</li><li>ECDSA</li></ul></li></ul></li></ul><h3 id="데이터베이스-암호화-기법"><a class="markdownIt-Anchor" href="#데이터베이스-암호화-기법"></a> 데이터베이스 암호화 기법</h3><ul><li><u>애플리케이션에서 암호화를 수행하는 API 방식과 데이터베이스에서 암호화를 수행하는 Plug-in 방식, API 방식과 Plug-in 방식을 혼합한 Hybrid 방식</u></li><li><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0515_01.png" alt="암호화기법" /></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;데이터베이스-보안-기능-적용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스암호화" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%95%94%ED%98%B8%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 데이터베이스 이중화 구성</title>
    <link href="https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%B4%EC%A4%91%ED%99%94%EA%B5%AC%EC%84%B1/"/>
    <id>https://hyeonukdev.github.io/2020/05/15/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%B4%EC%A4%91%ED%99%94%EA%B5%AC%EC%84%B1/</id>
    <published>2020-05-14T16:35:42.000Z</published>
    <updated>2020-05-14T16:35:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="데이터베이스-이중화-database-replication-정의"><a class="markdownIt-Anchor" href="#데이터베이스-이중화-database-replication-정의"></a> 데이터베이스 이중화 Database Replication 정의</h3><ul><li><u>시스템 오류로 인한 데이터베이스 서비스 중단이나 물리적 손상</u> 발생 시 이를 <u>복구하기 위해 동일한 데이터베이스를 복제하여 관리</u><ul><li>하나 이상의 데이터베이스가 항상 같은 상태를 유지하므로 <u>데이터베이스에 문제가 발생하면 복제된 데이터베이스를 이용</u>하여 즉시 문제 해결 가능</li><li>여러 개의 데이터베이스를 동시에 관리하므로 사용자가 수행하는 작업이 데이터베이스 이중화 시스템에 연결된 다른 데이터베이스에도 동일하게 적용됨</li><li>애플리케이션을 <u>여러 개의 데이터베이스로 분산시켜 처리</u>하므로 데이터베이스 부하를 줄일 수 있음</li><li>데이터베이스 이중화를 이용하면 손쉽게 백업 서버 운영 가능</li></ul></li></ul><h3 id="데이터-이중화의-분류"><a class="markdownIt-Anchor" href="#데이터-이중화의-분류"></a> 데이터 이중화의 분류</h3><ul><li>변경 내용의 전달 방식에 따라 Eager 기법과 Lazy 기법으로 나뉨<ul><li>Eager 기법<ul><li>트랜잭션 수행 중 데이터 변경이 발생하면 이중화 된 모든 데이터베이스에 즉시 전달하여 변경 내용이 즉시 적용되도록 하는 기법</li></ul></li><li>Lazy 기법<ul><li>트랜잭션의 수행이 종료되면 변경 사실을 새로운 트랜잭션에 작성하여 각 데이터베이스에 전달되는 기법으로, 데이터베이스마다 새로운 트랜잭션이 수행되는 것으로 간주됨</li></ul></li></ul></li></ul><h3 id="데이터-이중화의-구성-방법"><a class="markdownIt-Anchor" href="#데이터-이중화의-구성-방법"></a> 데이터 이중화의 구성 방법</h3><ul><li>활동-대기(Active-Standby) 방법과 활동-활동(Active-Active) 방법이 있음<ul><li>Active-Active<ul><li>두 개의 DB가 서로 다른 서비스를 제공하다가 둘 중 한쪽 DB에 문제가 발생하면 나머지 다른 DB가 서비스를 제공</li><li>두 개의 DB가 모두 처리하기 때문에 처리율이 높지만 구성 방법 및 설정이 복잡함</li></ul></li><li>Active-Standby<ul><li>한 DB가 활성 상태로 서비스하고 있으면 다른 DB는 대기하고 있다가 활성 DB에 장애 발생 시 대기 상태의 DB가 자동으로 모든 서비스를 대신 수행</li><li>구성 방법과 관리가 쉬워 많은 기업에서 이용</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;데이터베이스-이중화-database-replication-정의&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스이중화구성" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%B4%EC%A4%91%ED%99%94%EA%B5%AC%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-13T16:32:44.000Z</published>
    <updated>2020-05-13T16:32:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="1-데이터-모델-개념"><a class="markdownIt-Anchor" href="#1-데이터-모델-개념"></a> 1. 데이터 모델 개념</h3><ul><li><u>현실 세계의 정보들을 컴퓨터에 표현</u>하기 위해서 <b>단순화, 추상화</b>하여 체계적으로 표현한 개념적 모형</li><li>종류<ul><li>개념적 데이터 모델</li><li>논리적 데이터 모델</li><li>물리적 데이터 모델</li></ul></li><li>구성 요소<ul><li>개체</li><li>속성</li><li>관계</li></ul></li><li>표시 요소<ul><li>구조</li><li>연산</li><li>제약 조건</li></ul></li></ul><h3 id="2-개체-관계e-r모델"><a class="markdownIt-Anchor" href="#2-개체-관계e-r모델"></a> 2. 개체-관계(E-R)모델</h3><ul><li><u>데이터를 개체, 관계, 속성으로 묘사</u></li><li>E-R 다이어그램으로 표현하며, 1:1, 1:N, N:M 등의 관계 유형을 제한 없이 나타낼 수 있음<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_01.png" alt="E-R다이어그램기호" /></li></ul><h3 id="3-논리적-데이터모델링"><a class="markdownIt-Anchor" href="#3-논리적-데이터모델링"></a> 3. 논리적 데이터모델링</h3><ul><li>E-R 다이어그램으로 표현된 개념적 구조를 데이터베이스에 저장할 형태로 표현한 논리적 구조로 정의하는 과정</li><li>논리적 모델은 H/W나 S/W에 독립적</li><li>종류<ul><li>관계 데이터 모델</li><li>계층 데이터 모델</li><li>네트워크 데이터 모델</li></ul></li></ul><h3 id="4-데이터베이스-정규화"><a class="markdownIt-Anchor" href="#4-데이터베이스-정규화"></a> 4. 데이터베이스 정규화</h3><ul><li>중복성을 최소화하고 정보의 일관성을 보장하기 위한 개념</li><li>릴레이션을 관련 있는 속성들로만 구성되도록 릴레이션을 분해하는 과정<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_06.png" alt="정규화과정" /></li></ul><h3 id="5-논리-데이터모델-품질검증"><a class="markdownIt-Anchor" href="#5-논리-데이터모델-품질검증"></a> 5. 논리 데이터모델 품질검증</h3><ul><li>좋은 데이터 모델의 조건<ul><li>완전성</li><li>중복배제</li><li>비즈니스 룰</li><li>데이터 재사용</li><li>안정성 및 활용성</li><li>간결성</li><li>의사소통</li><li>통합성</li></ul></li><li>데이터 모델 품질 검증 기준<ul><li>정확성</li><li>완전성</li><li>준거성</li><li>최신성</li><li>일관성</li><li>활용성</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-데이터-모델-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 논리 데이터모델 품질검증</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%EC%A6%9D/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%EC%A6%9D/</id>
    <published>2020-05-13T16:22:44.000Z</published>
    <updated>2020-05-13T16:22:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="좋은-데이터-모델의-조건"><a class="markdownIt-Anchor" href="#좋은-데이터-모델의-조건"></a> 좋은 데이터 모델의 조건</h3><ul><li>Completeness 완전성<ul><li>업무에 필요로 하는 모든 데이터가 데이터 모델에 정의되어 있어야함</li></ul></li><li>Non-Redundancy 중복배제<ul><li>하나의 데이터베이스 내에 동일한 사실은 반드시 한 번만 기록하여야 함</li></ul></li><li>Business Rules 비즈니스 룰<ul><li>수많은 업무 규칙을 데이터 모델에 표현하고 이를 해당 데이터 모델을 활용하는 모든 사용자가 그 규칙을 공유할 수 있게 제공</li></ul></li><li>Data Reusability 데이터 재사용<ul><li>데이터의 통합성과 독립성에 대하여 충분히 고려</li></ul></li><li>Stability and Flexibility 안정성 및 활용성<ul><li>확장성을 담보하기 위해서는 데이터 관점의 통합 불가피</li></ul></li><li>Elegance 간결성<ul><li>합리적으로 잘 정리된 데이터를 통합하여 데이터의 집합을 정의하고, 이를 데이터 모데로 잘 표현하여 활용</li></ul></li><li>Communication 의사소통<ul><li>데이터 분석 과정에서 도출되는 많은 업무 규칙은 데이터 모델에 개체, 서브타입, 속성, 관계등의 형태로 최대한 자세하게 표현되어야 함</li></ul></li><li>Integration 통합성<ul><li>동일한 성격의 데이터를 한 번만 정의하기 위해 공유 데이터에 대한 구조를 여러 업무 영역에서 공동으로 사용하기 용이하게 해야 함</li></ul></li></ul><h3 id="데이터-모델-품질-검증-기준"><a class="markdownIt-Anchor" href="#데이터-모델-품질-검증-기준"></a> 데이터 모델 품질 검증 기준</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_04.png" alt="데이터모델품질검증기준" /><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_05.png" alt="데이터모델품질검증기준" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;좋은-데이터-모델의-조건&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터모델품질검증" scheme="https://hyeonukdev.github.io/tags/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%EC%A6%9D/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 데이터베이스 정규화</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%A0%95%EA%B7%9C%ED%99%94/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%A0%95%EA%B7%9C%ED%99%94/</id>
    <published>2020-05-13T16:11:49.000Z</published>
    <updated>2020-05-13T16:11:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="anomaly-이상-현상"><a class="markdownIt-Anchor" href="#anomaly-이상-현상"></a> Anomaly 이상 현상</h3><ul><li><u>불필요한 데이터 중복으로 인해</u> 릴레이션에 대한 데이터 삽입/수정/삭제 연산을 수헹할 때 발생할 수 있는 부작용</li><li><u>Normalization 정규화를 통해 이상현상을 제거</u></li><li>종류<ul><li>삽입 이상<ul><li>새 데이터를 삽입시 불필요한 데이터도 함께 <u>삽입</u>되는 문제</li></ul></li><li>갱신 이상<ul><li>중복 데이터 중 일부만 변경하여 데이터가 불일치하게 되는 <u>모순의 문제</u></li></ul></li><li>삭제 이상<ul><li>데이터를 삭제시 꼭 필요한 데이터까지 함께 삭제되는 <u>데이터 손실의 문제</u></li></ul></li></ul></li></ul><h3 id="normalization-정규화란"><a class="markdownIt-Anchor" href="#normalization-정규화란"></a> Normalization 정규화란?</h3><ul><li>중복성을 최소화하고 정보의 일관성을 보장하기 위한 개념</li><li>릴레이션을 관련 있는 속성들로만 구성되도록 릴레이션을 분해하는 과정<br /><u></li><li>데이터 구조의 안정성을 최대로 함</li><li>중복을 배제하여 삽입, 삭제, 갱신 이상의 발생을 방지함</li><li>데이터 삽입 시 릴레이션을 재구성할 필요성을 줄임</li><li>논리적 설계 단계에서 수행<br /></u></li><li>과정(아래 과정을 해야지 정규형이 됨)<ol><li>비정규형</li><li>1NF<ul><li>중복속성 제거</li><li>제1정규화<ul><li>반복되는 속성이나 Group 속성 제거</li></ul></li></ul></li><li>2NF<ul><li>부분종속성 제거</li><li>제2정규화<ul><li>주 식별자에게 완전히 종속되지 않은 속성 제거</li></ul></li></ul></li><li>3NF<ul><li>이행종속성 제거</li><li>제3정규화<ul><li>비 식별자에 종속되는 속성 제거</li></ul></li></ul></li><li>BCNF(보이스코드정규형)<ul><li>후보키가 아닌 결정자 제거</li></ul></li><li>4NF<ul><li>다치종속성 제거</li><li>제4정규화<ul><li>다시종속성 제거</li></ul></li></ul></li><li>5NF<ul><li>조인종속성 제거</li><li>제5정규화<ul><li>조인 종속성 제거</li></ul></li></ul></li></ol></li></ul><h3 id="정규화-목적"><a class="markdownIt-Anchor" href="#정규화-목적"></a> 정규화 목적</h3><ul><li>데이터 중복 배제로 데이터 관리 편의성 제고 및 자료 저장 공간의 최소화</li><li>데이터 모형 단순화</li><li>데이터 구조의 안정성 및 무결성 유지</li><li>속성의 배열상태 검증</li><li>엔티티와 속성의 누락 여부 검증 수단</li><li>자료검색과 추출의 효율성 추구</li></ul><h3 id="정규화-특징"><a class="markdownIt-Anchor" href="#정규화-특징"></a> 정규화 특징</h3><ul><li>어떠한 관계구조가 바람직한 것인지, 바람직하지 못한 관계를 어떻게 분해하여야 하는지에 관한 구체적인 판단 기준을 제공</li><li>정규화된 데이터 모델은 정확성, 일치성, 단순성, 비중복성, 안전성 보장</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;anomaly-이상-현상&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터베이스정규화" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%A0%95%EA%B7%9C%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 논리적 데이터 모델링</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%85%BC%EB%A6%AC%EC%A0%81%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%85%BC%EB%A6%AC%EC%A0%81%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81/</id>
    <published>2020-05-13T15:11:07.000Z</published>
    <updated>2020-05-13T15:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="논리적-데이터-모델링-정의"><a class="markdownIt-Anchor" href="#논리적-데이터-모델링-정의"></a> 논리적 데이터 모델링 정의</h3><ul><li>E-R 다이어그램으로 표현된 개념적 구조를 데이터베이스에 저장할 형태로 표현한 논리적 구조로 정의하는 과정</li><li>정확한 업무 분석을 통한 자료의 흐름을 분석하여 현재 사용 중인 양식, 문서, 장표를 중심으로 자료항목을 추출하여 <u>엔티티와 속성들의 관계를 구조적으로 정의하는 단계</u></li></ul><h3 id="논리적-데이터-모델링-특성"><a class="markdownIt-Anchor" href="#논리적-데이터-모델링-특성"></a> 논리적 데이터 모델링 특성</h3><ul><li><u>요구사항을 충분히 수집하지 않으면 다음 단계의 요구사항 변경에 따른 많은 비용이 발생</u></li><li>모든 이해당사자들과 의사소통의 보조자료로서 E-R 모델을 활용</li><li>논리적 모델은 H/W나 S/W에 독립적<br /><u></li><li>DBMS에 맞는 논리적 스키마 설계</li><li>트랜잭션 인터페이스를 설계<ul><li><b>사용자의 요구에 대한 트랜잭션을 모델링하는 것은 개념적 설계단계</b></li></ul></li><li>관계형 데이터베이스에서는 테이블을 설계하는 단계<br /></u></li><li>종류<ul><li>관계 데이터 모델</li><li>계층 데이터 모델</li><li>네트워크 데이터 모델</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;논리적-데이터-모델링-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리적데이터모델링" scheme="https://hyeonukdev.github.io/tags/%EB%85%BC%EB%A6%AC%EC%A0%81%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 개체-관계(E-R)모델</title>
    <link href="https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EA%B0%9C%EC%B2%B4%EA%B4%80%EA%B3%84%EB%AA%A8%EB%8D%B8/"/>
    <id>https://hyeonukdev.github.io/2020/05/14/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EA%B0%9C%EC%B2%B4%EA%B4%80%EA%B3%84%EB%AA%A8%EB%8D%B8/</id>
    <published>2020-05-13T15:01:27.000Z</published>
    <updated>2020-05-13T15:01:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="개체-관계entity-relationship-모델-정의"><a class="markdownIt-Anchor" href="#개체-관계entity-relationship-모델-정의"></a> 개체-관계(Entity-Relationship) 모델 정의</h3><ul><li><u>개념적 데이터 모델</u>의 가장 대표적</li><li><u>데이터를 개체, 관계, 속성으로 묘사</u></li><li>E-R 다이어그램으로 표현하며, 1:1, 1:N, N:M 등의 관계 유형을 제한 없이 나타낼 수 있음</li></ul><h3 id="e-r-다이어그램-개념"><a class="markdownIt-Anchor" href="#e-r-다이어그램-개념"></a> E-R 다이어그램 개념</h3><ul><li>E-R 모델의 기본 아이디어를 이해하기 쉽게 <u>기호를 사용하여 시각적으로 표현한 그림</u></li><li>실체 간의 관계는 물론 조직, 사용자, 프로그램, 데이터 등 시스템 내에서 역할을 가진 모든 실체를 표현</li><li>데이터에 대해 개발자, 관리자, 사용자들이 서로 다르게 인식하고 있는 뷰들을 하나로 단일화 시킴</li><li>표기법<ul><li>피터첸 표기법</li><li>정보공학 표기법</li><li>바커 표기법</li></ul></li></ul><h3 id="e-r-다이어그램-기호"><a class="markdownIt-Anchor" href="#e-r-다이어그램-기호"></a> E-R 다이어그램 기호</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_01.png" alt="피터첸표기법" /></p><h3 id="e-r-다이어그램-표기법-비교"><a class="markdownIt-Anchor" href="#e-r-다이어그램-표기법-비교"></a> E-R 다이어그램 표기법 비교</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_02.png" alt="표기법 비교" /></p><h3 id="관계의-표현-및-이해"><a class="markdownIt-Anchor" href="#관계의-표현-및-이해"></a> 관계의 표현 및 이해</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0514_03.png" alt="관계의 표현" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;개체-관계entity-relationship-모델-정의&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="ER모델" scheme="https://hyeonukdev.github.io/tags/ER%EB%AA%A8%EB%8D%B8/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 데이터모델개념</title>
    <link href="https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EA%B0%9C%EB%85%90/"/>
    <id>https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EB%A7%81%EB%B0%8F%EC%84%A4%EA%B3%84/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EA%B0%9C%EB%85%90/</id>
    <published>2020-05-13T12:58:24.000Z</published>
    <updated>2020-05-13T12:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><ul><li><u>E-R 표기법</u>에 따라 주제 영역별로 <u>개체와 식별자를 포함한 속성</u>을 <u>도식화 및 개체 간 관계</u>의 기수성, 선택성, 식별/비식별 관계를 도식화</li><li>개체 내 속성 원자성과 함수 종속성을 분석하여 <u>데이터베이스 정규화 대상 개체를 도출하고 데이터베이스 정규화</u>를 수행</li><li><u>논리 데이터 모델에 대하여 <b>정확성, 완전성, 준거성, 최신성, 일관성, 활용성의 품질기준을 적용</b></u>하고 개체, 속성, 관계에 대하여 체크리스트를 작성한 후 검증 결과에 따라 <u>논리 데이터 모델 품질 검증 결과서</u>를 작성</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>데이터 모델<ul><li>현실 세계의 정보들을 컴퓨터에 표현하기 위해 단순화, 추상화하여 체계적으로 표현한 개념적 모형</li></ul></li><li>이상 현상<ul><li>불필요한 데이터 중복으로 인해 릴레이션에 대한 데이터 삽입/수정/삭제 연산을 수행할 때 발생할 수 있는 부작용</li></ul></li></ul><h3 id="데이터베이스-개발절차"><a class="markdownIt-Anchor" href="#데이터베이스-개발절차"></a> 데이터베이스 개발절차</h3><ul><li>요구분석<ul><li>비지니스 요구사항</li></ul></li><li>전략수립<ul><li>개념적데이터 모델링</li></ul></li><li>분석<ul><li>논리적데이터 모델링</li></ul></li><li>설계<ul><li>물리적데이터 모델링</li></ul></li><li>개발<ul><li>데이터베이스 구축<blockquote><p>운영시스템 안에 데이터베이스 존재</p></blockquote></li></ul></li></ul><h3 id="데이터-모델의-정의"><a class="markdownIt-Anchor" href="#데이터-모델의-정의"></a> 데이터 모델의 정의</h3><ul><li><u>현실 세계의 정보들을 컴퓨터에 표현</u>하기 위해서 <b>단순화, 추상화</b>하여 체계적으로 표현한 개념적 모형</li><li>종류<ul><li>개념적 데이터 모델</li><li>논리적 데이터 모델</li><li>물리적 데이터 모델</li></ul></li><li>구성 요소<ul><li>개체</li><li>속성</li><li>관계</li></ul></li><li>표시 요소<ul><li>구조</li><li>연산</li><li>제약 조건</li></ul></li></ul><h3 id="데이터-모델링-절차"><a class="markdownIt-Anchor" href="#데이터-모델링-절차"></a> 데이터 모델링 절차</h3><ol><li>개념적 데이터 모델링</li></ol><ul><li>중요 개념을 구분</li><li>핵심 개체 도출</li><li>ERD 작성</li></ul><ol start="2"><li>논리적 데이터 모델링</li></ol><ul><li>각 개념을 구체화</li><li>ERD-RDB 모델 사상</li><li>상세 속성 정의</li><li>정규화</li></ul><ol start="3"><li>물리적 데이터 모델링</li></ol><ul><li>개체, 인덱스 등 생성</li><li>DB 개체 정의</li><li>테이블 및 인덱스 등 설계</li></ul><h3 id="데이터-모델의-종류"><a class="markdownIt-Anchor" href="#데이터-모델의-종류"></a> 데이터 모델의 종류</h3><h4 id="1-개념적-데이터-모델"><a class="markdownIt-Anchor" href="#1-개념적-데이터-모델"></a> 1. 개념적 데이터 모델</h4><ul><li>현실 세계에 대한 인식을 <u>추상적 개념으로 표현하는 과정</u></li><li><u>속성들로 기술된 개체 타입과 이 개체 타입들 간의 관계를 이용하여 현실 세계를 표현</u></li><li>현실 세계에 존재하는 개체를 인간이 이해할 수 있는 <u>정보 구조</u>로 표현하기 때문에 <u>정보 모델</u>이라고 함</li><li>대표적인 개념적 데이터 모델에는 E-R 모델이 있음<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_09.png" alt="E-R모델" /></li></ul><h4 id="2-논리적-데이터-모델"><a class="markdownIt-Anchor" href="#2-논리적-데이터-모델"></a> 2. 논리적 데이터 모델</h4><ul><li>개념적 모델링 과정에서 얻은 개념적 구조를 <u>컴퓨터가 이해하고 처리할 수 있는</u> 컴퓨터 세계의 환경에 맞도록 <u>변환</u>하는 과정</li><li><u>필드로 기술된 데이터 타입과 이 데이터 타입들 간의 관계</u>를 이용한 현실 세계를 표현</li><li><u>단순히 데이터 모델이라고 하면 논리적 데이터 모델을 의미</u></li><li>특정 DBMS는 특정 논리적 데이터 모델 하나만 선정하여 사용</li><li>데이터 간의 관계를 어떻게 표현하느냐에 따라 <u>관계 모델, 계층 모델, 네트워크 모델로 구분</u></li></ul><h4 id="3-물리적-데이터-모델"><a class="markdownIt-Anchor" href="#3-물리적-데이터-모델"></a> 3. 물리적 데이터 모델</h4><ul><li>논리적 데이터 모델에서 레코드의 상세 스펙 등을 기술한 모델로 <u>실제 컴퓨터에 데이터가 저장되는 방법</u>을 정의</li><li>DB 개체 정의</li><li>테이블 및 인덱스 등 설계</li></ul><h3 id="데이터-모델의-구성-요소"><a class="markdownIt-Anchor" href="#데이터-모델의-구성-요소"></a> 데이터 모델의 구성 요소</h3><h4 id="1-entity-개체"><a class="markdownIt-Anchor" href="#1-entity-개체"></a> 1. Entity 개체</h4><ul><li><u>데이터베이스에 표현하려는 것</u>으로 사람이 생각하는 <u>개념이나 정보 단위 같은 현실 세계의 대상체</u></li><li>실세계에 독립적으로 존재하는 유형, 무형의 정보로서 <u>서로 연관된 몇 개의 속성으로 구성</u></li><li><u>파일 시스템의 레코드에 대응</u> 하는 것으로 어떤 정보를 제공하는 역할을 수행</li><li>독립적으로 존재하거나 그 자체로서도 구별 가능</li><li>유일한 <u>식별자</u>에 의해 식별되고 다른 개체와 하나 이상의 <u>관계가 있음</u></li></ul><h4 id="2-attribute-속성"><a class="markdownIt-Anchor" href="#2-attribute-속성"></a> 2. Attribute 속성</h4><ul><li><u>데이터베이스를 구성하는 가장 작은 논리적 단위</u></li><li><u>파일 구조상</u>의 데이터 항목 또는 데이터 <u>필드</u>에 해당</li><li>속성은 개체를 구성하는 항목</li><li>속성의 수는 Degree<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_10.png" alt="체계 예시" /></li></ul><h4 id="3-relationship-관계"><a class="markdownIt-Anchor" href="#3-relationship-관계"></a> 3. Relationship 관계</h4><ul><li>개체와 개체 사이의 논리적 연결을 의미</li><li>개체 간의 관계와 속성 간의 관계가 있음</li><li>형태<ul><li>일대일(1:1)</li><li>일대다(1:N)</li><li>다대다(N:M)</li></ul></li><li><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_11.png" alt="개체간 관계" /></li></ul><h3 id="데이터-모델에-표시할-요소"><a class="markdownIt-Anchor" href="#데이터-모델에-표시할-요소"></a> 데이터 모델에 표시할 요소</h3><ul><li>Structure 구조<ul><li>논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질을 표현</li></ul></li><li>Operation 연산<ul><li>데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본도구</li></ul></li><li>Constraint 제약조건<ul><li>데이터베이스에 저장될 수 있는 실제 데이터베이스의 논리적인 제약 조건</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;E-R 표기법&lt;/u&gt;에 따라 주제 영역별로 &lt;u&gt;개체와 식별자를 포함한 속성&lt;/u
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터모델개념" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%EA%B0%9C%EB%85%90/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-12T17:26:34.000Z</published>
    <updated>2020-05-12T17:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="1-관계-데이터-모델"><a class="markdownIt-Anchor" href="#1-관계-데이터-모델"></a> 1. 관계 데이터 모델</h3><ul><li>실 세계 데이터를 행과 열과 구성된 표 형태로 저장하고 한 테이블의 필드 값을 이용하여 다른 테이블에 관련된 데이터를 찾는 식으로 검색하는 데이터 모델</li><li>용어<ul><li>릴레이션</li><li>속성</li><li>튜플</li><li>도메인</li><li>차수</li><li>카디널리티</li></ul></li><li>릴레이션 특성과 무결성 제약조건</li></ul><h3 id="2-관계-데이터언어"><a class="markdownIt-Anchor" href="#2-관계-데이터언어"></a> 2. 관계 데이터언어</h3><ul><li>관계 데이터 모델의 연산</li><li>원하는 데이터를 얻기 위해 릴레이션에 필요한 처리 요구를 수행하는 것</li><li>종류<ul><li>일반 집합 연산자</li><li>순수 관계 연산자</li></ul></li><li>관계해석의 개념</li></ul><h3 id="3-시스템-카탈로그와-뷰"><a class="markdownIt-Anchor" href="#3-시스템-카탈로그와-뷰"></a> 3. 시스템 카탈로그와 뷰</h3><ul><li>데이터베이스의 객체(사용자, 릴레이션 뷰, 인덱스, 권한)와 구조들에 관한 모든 데이터를 포함하는 <u>시스템 데이터베이스</u></li><li>뷰는 <u>가상 테이블을</u> 구성하는 데이터베이스 오브젝트로 <u>별도의 저장 공간은 없지만</u> 뷰를 통해 SELECT, DELETE, UPDATE를 할 수 있음</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-관계-데이터-모델&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 시스템 카탈로그와 뷰</title>
    <link href="https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%B9%B4%ED%83%88%EB%A1%9C%EA%B7%B8%EC%99%80%EB%B7%B0/"/>
    <id>https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%B9%B4%ED%83%88%EB%A1%9C%EA%B7%B8%EC%99%80%EB%B7%B0/</id>
    <published>2020-05-12T16:36:56.000Z</published>
    <updated>2020-05-12T16:36:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><h3 id="시스템-카탈로그-개념"><a class="markdownIt-Anchor" href="#시스템-카탈로그-개념"></a> 시스템 카탈로그 개념</h3><ul><li>데이터베이스의 객체(사용자, 릴레이션 뷰, 인덱스, 권한)와 구조들에 관한 모든 데이터를 포함하는 <u>시스템 데이터베이스</u></li><li>카탈로그에 저장된 정보를 <u>메타데이터</u>라고 함</li><li>시스템 카탈로그는 사용자 및 질의 최적호 모듈 등 DBMS 자신의 구성요소에 의해서 사용</li><li>시스템 카탈로그는 관계DBMS마다 표준화되어 있지 않아서 관계 DBMS마다 서로 다른 형태로 시스템 카탈로그 기능을 제공</li><li>데이터 사전 또는 시스템 테이블이라고 함</li></ul><h3 id="시스템-카탈로그-특징"><a class="markdownIt-Anchor" href="#시스템-카탈로그-특징"></a> 시스템 카탈로그 특징</h3><ul><li>사용자가 SQL 문으로 내용 검색이 가능</li><li>데이터베이스 관리시스템에 의해 생성 및 유지</li><li>기본 테이블, 뷰, 인덱스 등이 변경되면 자동으로 시스템 카탈로그는 갱신</li><li><u>사용자가 SQL문으로 갱신은 불가능</u></li><li>위치 투명성 및 중복 투명성을 제공하기 위해 필요한 모든 제어 정보를 포함</li></ul><h3 id="시스템-카탈로그-내용"><a class="markdownIt-Anchor" href="#시스템-카탈로그-내용"></a> 시스템 카탈로그 내용</h3><ul><li>릴레이션의 정보<ul><li>릴레이션 이름</li><li>저장된 파일 이름과 파일 구조</li><li>속성들에 대한 속성 이름과 타입</li><li>정의된 각 인덱스의 이름</li><li>정의된 무결성 제약 조건</li></ul></li><li>인덱스 관련 정보<ul><li>인덱스 이름</li><li>인덱스의 구조</li><li>인덱스의 키에 대한 정보</li></ul></li><li>뷰 관련 정보<ul><li>뷰의 이름</li><li>뷰의 정의</li><li>뷰의 소유자</li></ul></li><li>사용자 관련 정보<ul><li>사용자 계정 정보</li><li>사용자 권한 정보</li></ul></li><li>통계 관련 정보<ul><li>릴레이션 카디널리티</li><li>인덱스 카디널리티</li><li>인덱스의 높이</li><li>인덱스의 범위</li></ul></li></ul><h3 id="view-뷰-개념"><a class="markdownIt-Anchor" href="#view-뷰-개념"></a> View 뷰 개념</h3><ul><li><u>가상 테이블을</u> 구성하는 데이터베이스 오브젝트로 <u>별도의 저장 공간은 없지만</u> 뷰를 통해 SELECT, DELETE, UPDATE를 할 수 있음</li></ul><h3 id="뷰의-장점과-단점"><a class="markdownIt-Anchor" href="#뷰의-장점과-단점"></a> 뷰의 장점과 단점</h3><ul><li>장점<ul><li>논리적 독립성 제공</li><li>사용자 데이터 관리 용이</li><li>데이터 보안 용이</li></ul></li><li>단점<ul><li>뷰 자체 인덱스 불가</li><li>뷰 정의 변경 불가</li><li>데이터 변경 제약 존재</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;시스템-카탈로그-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="시스템카탈로그와뷰" scheme="https://hyeonukdev.github.io/tags/%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%B9%B4%ED%83%88%EB%A1%9C%EA%B7%B8%EC%99%80%EB%B7%B0/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 관계데이터언어</title>
    <link href="https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%96%B8%EC%96%B4/"/>
    <id>https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%96%B8%EC%96%B4/</id>
    <published>2020-05-12T16:08:48.000Z</published>
    <updated>2020-05-12T16:08:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_01.png" alt="관계데이터개념" /></p><h3 id="relation-data-operaton-관계-데이터-연산"><a class="markdownIt-Anchor" href="#relation-data-operaton-관계-데이터-연산"></a> Relation data operaton 관계 데이터 연산</h3><ul><li>관계 데이터 모델의 연산</li><li>원하는 데이터를 얻기 위해 릴레이션에 필요한 처리 요구를 수행하는 것</li><li><u>관계대수와 관계 해석</u>이 있음<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_02.png" alt="관계데이터연산의 종류" /></li></ul><h3 id="relational-algebra-관계-대수의-개념"><a class="markdownIt-Anchor" href="#relational-algebra-관계-대수의-개념"></a> Relational algebra 관계 대수의 개념</h3><ul><li>원하는 결과를 얻기 위해 릴레이션의 처리 과정을 <u>순서대로 기술하는 언어</u><ul><li>절차 언어</li></ul></li><li>릴레이션을 처리하는 연산자들의 모임<ul><li>대표 연산자 8개</li><li><u>일반 집합 연산자와 순수 관계 연산자로 분류</u></li></ul></li><li>폐쇠 특성이 존재<ul><li>피연산자도 릴레이션이고 연산의 결과도 릴레이션</li></ul></li></ul><h3 id="관계-대수-연산자의-종류"><a class="markdownIt-Anchor" href="#관계-대수-연산자의-종류"></a> 관계 대수 연산자의 종류</h3><ul><li><u>일반 집합 연산자와 순수 관계 연산자</u><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_03.png" alt="관계 대수 연산의 종류" /></li></ul><h3 id="set-operation-일반-집합-연산자"><a class="markdownIt-Anchor" href="#set-operation-일반-집합-연산자"></a> Set operation 일반 집합 연산자</h3><ul><li>릴레이션이 튜플의 집합이라는 개념을 이용하는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_04.png" alt="일반집합연산자의 종류" /><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_05.png" alt="일반집합연산자의 종류와 기능" /></li></ul><h3 id="일반-집합-연산자-특성"><a class="markdownIt-Anchor" href="#일반-집합-연산자-특성"></a> 일반 집합 연산자 특성</h3><ul><li>피연산자가 2개 필요함<ul><li>2개의 릴레이션을 대상으로 연산을 수행</li></ul></li><li>합집합, 교집합, 차집합은 피연산자인 두 릴레이션이 합병 가능해야 함</li><li><b>합병가능 조건</b><ul><li>두 릴레이션의 차수가 같아야 함</li><li>두 릴레이션에서 서로 대응되는 속성의 도메인이 같아야 함</li></ul></li></ul><h3 id="일반-집합-연산자-카티션-프로덕트-cartesian-product"><a class="markdownIt-Anchor" href="#일반-집합-연산자-카티션-프로덕트-cartesian-product"></a> 일반 집합 연산자 - 카티션 프로덕트 cartesian product</h3><ul><li>두 릴레이션 R과 S의 카티션 프로덕트 : R x S<ul><li>릴레이션 R에 속한 각 튜플과 릴레이션 S에 속한 각 튜플을 모두 연결하여 새로운 튜플로 결과 릴레이션을 구성</li></ul></li><li><b>결과 릴레이션의 특성</b><ul><li><u>차수는 릴레이션 R과 S의 차수를 더함</u></li><li><u>카디널리티는 릴레이션 R과 S의 카디널리티를 곱함</u></li></ul></li><li>교환적 특징<ul><li>R x S = S x R</li></ul></li><li>결합적 특징<ul><li>(R x S) x T = R x (S x T)</li></ul></li></ul><h3 id="카디션-프로덕트-연산"><a class="markdownIt-Anchor" href="#카디션-프로덕트-연산"></a> 카디션 프로덕트 연산</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_06.png" alt="카디션 프로덕트 연산" /></p><h3 id="relational-operation-순수-관계-연산자"><a class="markdownIt-Anchor" href="#relational-operation-순수-관계-연산자"></a> Relational operation 순수 관계 연산자</h3><ul><li>릴레이션 구조와 특성을 이용하는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_07.png" alt="순수관계 연산자의 종류" /><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0513_08.png" alt="순수관계 연산자의 종류와 기능" /></li></ul><h3 id="relational-calculus-관계-해석-개념"><a class="markdownIt-Anchor" href="#relational-calculus-관계-해석-개념"></a> Relational calculus 관계 해석 개념</h3><ul><li>처리를 원하는 <u>데이터가 무엇</u>인지만 기술하는 언어<ul><li>비절차 언어</li></ul></li><li>분류<ul><li>튜플 관계 해석</li><li>도메인 관계 해석</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="관계데이터언어" scheme="https://hyeonukdev.github.io/tags/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>논리데이터베이스 - 관계데이터베이스 모델</title>
    <link href="https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8/"/>
    <id>https://hyeonukdev.github.io/2020/05/13/Engineer_Information_Processing/ch12_%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8/</id>
    <published>2020-05-12T15:40:54.000Z</published>
    <updated>2020-05-12T15:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="논리데이터베이스"><a class="markdownIt-Anchor" href="#논리데이터베이스"></a> 논리데이터베이스</h2><ul><li><u>관계 데이터 모델의 기본 용어를 익히고 릴레이션을 구성하는 요소와 특성을 이해</u></li><li>관계 데이터 언어의 종류인 관계 대수의 일반 집합 연산자와 순수 관계 연산자의 차이를 이해하고 <u>관계해석</u>의 개념을 정리</li><li><u>시스템 카탈로그와 뷰</u>에 대한 개념 및 특징 이해</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>관계 데이터 모델<ul><li>실 세계 데이터를 행과 열과 구성된 표 형태로 저장하고 한 테이블의 필드 값을 이용하여 다른 테이블에 관련된 데이터를 찾는 식으로 검색하는 데이터 모델</li></ul></li><li>시스템 카탈로그<ul><li>데이터베이스의 객체와 구조들에 관한 모든 데이터를 포함하는 시스템 데이터베이스</li></ul></li></ul><h3 id="관계-데이터-모델-개념"><a class="markdownIt-Anchor" href="#관계-데이터-모델-개념"></a> 관계 데이터 모델 개념</h3><ul><li>DBMS에서 지원하는 데이터 모델</li><li>실 세계 데이터를 행과 열과 구성된 표 형태로 저장하고 한 테이블의 필드 값을 이용하여 다른 테이블에 관련된 데이터를 찾는 식으로 검색하는 데이터 모델</li><li><img src="https://lh3.googleusercontent.com/proxy/6jet3UI9WT52UF8Wd9vEJNVkPWuKU5Uvz6xwg5xcEG77-0abamnbuM8BJH8QrLrpqcNENI6NzlDHAc8tvpH5PCCMwvFsbxy8bb8SKjRc5jqaEPmiYyAnkfPglp4ZSjtY39j2jbX2ebAC1TvbPY13pG33MDuvDfTiJXY8FIZroH1mC3PJIF4uyOcNYckzvbEbtl3gcQ" alt="릴레이션" /></li></ul><h3 id="관계-데이터-모델의-기본-용어"><a class="markdownIt-Anchor" href="#관계-데이터-모델의-기본-용어"></a> 관계 데이터 모델의 기본 용어</h3><ol><li>Relation 릴레이션<ul><li>하나의 개체에 관한 데이터를 <u>2차원 테이블 구조</u>로 저장한 것</li><li>파일 관리 시스템 관점에서 <i>파일에 대응</i></li></ul></li><li>Attribute 속성<ul><li>릴레이션의 <u>열</u></li><li>파일 관리 시스템 관점에서 <i>필드에 대응</i></li></ul></li><li>Tuple 튜플<ul><li>릴레이션의 행</li><li>파일 관리 시스템 관점에서 <i>레코드에 대응</i></li></ul></li><li>Domain 도메인<ul><li>하나의 속성이 가질 수 있는 모든 값의 집합</li><li>속성 값을 입력 및 수정 할 때 적합성 판단의 기준이 됨</li><li>일반적으로 속성의 특성을 고려한 <u>데이터 타입으로 정의</u></li></ul></li><li>Null 널<ul><li>속성 값을 아직 모르거나 해당되는 값이 없음을 표현</li></ul></li><li>Degree 차수<ul><li>하나의 릴레이션에서 <u>속성의 전체 개수</u></li></ul></li><li>Cardinality 카디널리티<ul><li>하나의 릴레이션에서 <u>튜플의 전체 개수</u></li></ul></li></ol><h3 id="릴레이션의-구성"><a class="markdownIt-Anchor" href="#릴레이션의-구성"></a> 릴레이션의 구성</h3><ol><li>Relation schema 릴레이션 스키마<ul><li>릴레이션의 <u>논리적 구조</u></li><li>릴레이션의 이름과 릴레이션에 포함된 모든 속성 이름으로 저으이</li><li>정적인 특성</li></ul></li><li>Relation instance 릴레이션 인스턴스<ul><li>어느 한 시점에 릴레이션에 존재하는 튜플들의 집합</li><li>동적인 특징</li></ul></li><li>릴레이션 구성</li></ol><ul><li><img src="https://2.bp.blogspot.com/-nKfZzzWZ_70/V0KVxKGgKGI/AAAAAAAAAB8/p-Uu3v96WzMI8BYgnmZION6x_58Hg6BvgCLcB/s400/123.PNG" alt="릴레이션 구성" /></li></ul><ol start="4"><li>릴레이션 특성<ol><li>튜플의 유일성<ul><li>하나의 릴레이션에는 동일한 튜플이 존재할 수 없음</li></ul></li><li>튜플의 무순서<ul><li>하나의 릴레이션에서 튜플 사이의 순서는 무의미함</li></ul></li><li>속성의 무순서<ul><li>하나의 릴레이션에서 속성 사이의 순서는 무의미함</li></ul></li><li>속성의 원자성<ul><li>속성 값으로 원자 값만 사용 가능</li></ul></li></ol></li></ol><h3 id="integrity-constraint-무결성-제약조건"><a class="markdownIt-Anchor" href="#integrity-constraint-무결성-제약조건"></a> Integrity constraint 무결성 제약조건</h3><ul><li>데이터의 <u>무결성</u>을 보장하고 <u>일관된 상태로 유지</u>하기 위한 규칙</li><li>무결성<ul><li>데이터의 결함이 없는 상태</li><li>정확하고 유효하게 유지</li></ul></li><li>무결성 제약 조건<ul><li>개체 무결성 제약조건<ul><li>기본키를 구성하는 모든 속성은 널 값을 가질 수 없다</li></ul></li><li>참조 무결성 제약조건<ul><li>외래키는 참조할 수 없는 값을 가질 수 없다</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;논리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#논리데이터베이스&quot;&gt;&lt;/a&gt; 논리데이터베이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;관계 데이터 모델의 기본 용어를 익히고 릴레이션을 구성하는 요소와 특성을 이해&lt;/
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="논리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%85%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="관계데이터베이스모델" scheme="https://hyeonukdev.github.io/tags/%EA%B4%80%EA%B3%84%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 분산데이터베이스</title>
    <link href="https://hyeonukdev.github.io/2020/05/12/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%B6%84%EC%82%B0%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    <id>https://hyeonukdev.github.io/2020/05/12/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%B6%84%EC%82%B0%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/</id>
    <published>2020-05-12T14:37:18.000Z</published>
    <updated>2020-05-12T14:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="분산-데이터베이스의-정의"><a class="markdownIt-Anchor" href="#분산-데이터베이스의-정의"></a> 분산 데이터베이스의 정의</h3><ul><li><p><u>하나</u>의 데이터베이스 관리 시스템(DBMS)이 <u>여러 CPU에 연결된</u> 저장장치들을 제어하는 형태의 데이터베이스</p></li><li><p>논리적으로 같은 시스템에 속하지만, <u>컴퓨터 네트워크를 통해 물리적으로 분산되어 있는 데이터베이스</u></p></li><li><p>데이터베이스를 연결하는 <u>빠른 네트워크 환경을 이용</u>하여 데이터베이스를 여러 지역 노드로 위치시켜 사용성과 성능을 극대화 시킨 데이터베이스</p></li></ul><h3 id="분산-데이터베이스-설계-시-고려사항"><a class="markdownIt-Anchor" href="#분산-데이터베이스-설계-시-고려사항"></a> 분산 데이터베이스 설계 시 고려사항</h3><ul><li>작업부하(Work Load)의 노드별 분산 정책</li><li>지역의 자치성 보장 정책</li><li>데이터의 일관성 정책</li><li>사이트나 회선의 고장으로 부터의 회복 기능</li><li>통신 네트워크를 통한 원격 접근 기능</li></ul><h3 id="분산-데이터베이스의-목표"><a class="markdownIt-Anchor" href="#분산-데이터베이스의-목표"></a> 분산 데이터베이스의 목표</h3><ul><li><p><b>투명성</b></p></li><li><p>위치투명성</p><ul><li>액세스하려는 데이터베이스의 실제 위치를 알 필요 없이 단지 데이터베이스의 논리적인 명칭만으로 액세스 할 수 있음</li></ul></li><li><p>중복투명성</p><ul><li>동일 데이터가 여러 곳에 중복되어 있더라도 사용자는 마치 하나의 데이터만 존재하는 것처럼 사용하고, 시스템은 자동으로 여러 자료에 대한 작업을 수행</li></ul></li><li><p>병행투명성</p><ul><li>분산 데이터베이스와 관련된 다수의 트랜잭션들이 동시에 실현되더라도 그 트랜잭션의 결과는 영향을 받지 않음</li></ul></li><li><p>장애투명성</p><ul><li>트랜잭션, DBMS, 네트워크, 컴퓨터 장애에도 불구하고 트랜잭션을 정확하게 처리</li></ul></li></ul><h3 id="분산-데이터베이스의-장단점"><a class="markdownIt-Anchor" href="#분산-데이터베이스의-장단점"></a> 분산 데이터베이스의 장/단점</h3><ul><li>장점<ul><li>지역 자치성, 점증적 시스템 용량 확장</li><li>신뢰성과 가용성이 높음</li><li>효용성과 융통성이 높음</li><li>빠른 응답 속도와 통신비용 절감</li><li>시스템의 성능 향상</li><li>중앙 컴퓨터의 장애가 전체 시스템에 영향을 끼치지 않음</li><li>자료의 공유성 향상</li><li>시스템 규모의 적절한 조절 가능</li><li>각 지역 사용자의 요구 수용 증대</li></ul></li><li>단점<ul><li>소프트웨어 개발 비용 증가</li><li>DBMS가 수행할 기능이 복잡</li><li>데이터베이스 설계, 관리의 복잡성</li><li>오류의 잠재성 증가</li><li>처리 비용의 증가</li><li>데이터 무결성에 대한 위협</li></ul></li></ul><h3 id="분산-데이터베이스-설계-방법"><a class="markdownIt-Anchor" href="#분산-데이터베이스-설계-방법"></a> 분산 데이터베이스 설계 방법</h3><h4 id="1-테이블-위치-분산"><a class="markdownIt-Anchor" href="#1-테이블-위치-분산"></a> 1. 테이블 위치 분산</h4><ul><li>테이블 위치 분산은 <u>데이터베이스의 테이블</u>을 <u>각기 다른 서버에 분산시켜 배치하는 방법</u><ul><li>테이블 위치를 분산할 때는 <u>테이블의 구조를 변경하지 않으며, 다른 데이터베이스의 테이블과 중복되지 않게 배치</u></li><li>데이터베이스의 테이블을 각각 다른 위치에 배치하려면 <u>해당 테이블들이 놓일 서버들을 미리 설정해야 함</u></li></ul></li></ul><h4 id="2-fragment-분할"><a class="markdownIt-Anchor" href="#2-fragment-분할"></a> 2. Fragment 분할</h4><ul><li>테이블의 데이터를 분할하여 분산시키는 것</li><li>분할 규칙<ul><li>완전성 : 전체 데이터를 대상으로 분할해야 함</li><li>재구성 : 분할된 데이터는 관계 연산을 활용하여 본래의 데이터로 재구성할 수 있어야 함</li><li>상호 중첩 배제 : 분할된 데이터는 서로 다른 분할의 항목에 속하지 않아야 함</li></ul></li><li>주요 분할 방법<ul><li>수평 분할 : 테이블을 행(Row) 단위로 분할</li><li>수직 분할 : 테이블을 열(Column) 단위로 분할</li></ul></li></ul><h4 id="3-allocation-할당"><a class="markdownIt-Anchor" href="#3-allocation-할당"></a> 3. Allocation 할당</h4><ul><li>할당은 <u>동일한 분할을 여러 개의 서버에 생성하는 분산 방법</u></li><li>중복이 없는 할당과 중복이 있은 할당으로 구분됨</li><li><u>비중복 할당 방식</u><ul><li>최적의 노드를 선택해서 분산 데이터베이스의 <u>단일 노드에서만 분할이 존재</u>하도록 하는 방식</li><li>일반적으로 애플리케이션에는 릴레이션을 배타적 분할로 분리하기 힘든 요구가 포함되므로 분할된 테이블 간의 의존성은 무시되고 비용 증가, 성능 저하 등의 문제가 발생할 수 있음</li></ul></li><li><u>중복 할당 방식</u><ul><li>동일한 테이블을 다른 서버에 복제하는 방식</li><li>일부만 복제하는 부분 복제와 전체를 복제하는 완전 복제가 있음</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;분산-데이터베이스의-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="분산데이터베이스" scheme="https://hyeonukdev.github.io/tags/%EB%B6%84%EC%82%B0%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 물리요소 조사 분석</title>
    <link href="https://hyeonukdev.github.io/2020/05/12/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/"/>
    <id>https://hyeonukdev.github.io/2020/05/12/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/</id>
    <published>2020-05-12T13:56:23.000Z</published>
    <updated>2020-05-12T13:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><ul><li><p>기존 시스템을 분석하여 업무 영역과 시스템 영역으로 구분하여 용어 사전 기반으로 명명 규칙을 파악할 수 있다.</p></li><li><p>서버, 네트워크, 스토리지 자원을 조사하고, 데이터베이스가 설치될 시스템의 운영체계와 데이터베이스 버전을 확인할 수 있다.</p></li><li><p>데이터베이스 운영과 관련된 관리 요소를 파악하고, <u>데이터베이스 구조, 이중화 구성, 분산 구조, 접근제어, DB 암호화</u>에 대한 시스템 조사 분석서를 작성할 수 있다.</p></li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li><p>분산 데이터베이스<br />논리적으로 같은 시스템에 속하지만, 컴퓨터 네트워크를 통해 물리적으로 분산되어 있는 데이터베이스</p></li><li><p>데이터베이스 이중화<br />시스템 오류로 인한 데이터베이스 서비스 중단이나 물리적 손상 발생 시 이를 복구하기 위해 동일한 데이터베이스를 복제하여 관리</p></li></ul><h3 id="스토리지-시스템의-정의"><a class="markdownIt-Anchor" href="#스토리지-시스템의-정의"></a> 스토리지 시스템의 정의</h3><ul><li><p>스토리지는 단일 디스크로 처리할 수 없는 대용량의 데이터를 저장하기 위해 <u>서버와 저장장치를 연결하는 기술</u></p></li><li><p>스토리지 종류</p><ul><li>DAS(Direct Attached Storage)</li><li>NAS(Network Attached Storage)</li><li>SAN(Storage Area Network)</li></ul></li></ul><h3 id="das-direct-attached-storage"><a class="markdownIt-Anchor" href="#das-direct-attached-storage"></a> DAS; Direct Attached Storage</h3><ul><li>DAS는 <u>서버와 저장장치</u>를 전용 케이블로 <u>직접 연결</u>하는 방식<ul><li>저장장치를 직접 연결하므로 <u>속도가 빠르고 설치 및 운영이 쉬움</u></li><li><u>초기 구축 비용 및 유지보수 비용이 저렴</u></li><li><u>다른 서버에서 접근할 수 없고 파일 공유 불가능</u></li><li><u>확장성 및 유연성이 상대적이 떨어짐</u></li></ul></li><li><img src="https://t1.daumcdn.net/cfile/tistory/21470F4656EF5FBE16" alt="DAS" /></li></ul><h3 id="nas-network-attached-storage"><a class="markdownIt-Anchor" href="#nas-network-attached-storage"></a> NAS; Network Attached Storage</h3><ul><li>NAS는 <u>서버와 저장장치</u>를 <u>네트워크</u>를 통해 <u>연결</u>하는 방식<ul><li>별도의 <u>파일 관리 기능이 있는 NAS Storage</u>가 내장된 저장장치를 관리하기 때문에 <u>서버간 스토리지, 파일 공유 용이함</u></li><li>DAS에 비해 <u>확장성 및 유연성이 우수함</u></li><li><u>네트워크 환경 상태에 영향을 많이 받음</u></li><li>접속 증가 시 성능이 저하될 수 있음</li></ul></li><li><img src="https://t1.daumcdn.net/cfile/tistory/230F864356EF5FBE36" alt="NAS" /></li></ul><h3 id="san-storage-area-network"><a class="markdownIt-Anchor" href="#san-storage-area-network"></a> SAN; Storage Area Network</h3><ul><li>SAN은 DAS의 빠른 처리와 NAS의 스토리지 공유 장점을 합친 방식<ul><li>광케이블(FC)과 광채널 스위치를 통해 근거리 네트워크 환경을 구성하여 <u>빠른 속도로 데이터 처리</u></li><li>저장 장치 연결로 <u>스토리지 공유가 가능</u></li><li>스토리지 시스템 중 <u>대용량 환경의 높은 트랜잭션 처리 효과적</u></li><li><u>기존 시스템의 경우 장비 업그레이드가 필요하고, 구축비용이 비쌈</u></li></ul></li><li><img src="https://t1.daumcdn.net/cfile/tistory/215A693556EF5FBF13" alt="SAN" /></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기존 시스템을 분석하여 업무 영역과 시스템 영역으로 구분하여 용어 사전 기반으로
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리요소조사분석" scheme="https://hyeonukdev.github.io/tags/%EB%AC%BC%EB%A6%AC%EC%9A%94%EC%86%8C%EC%A1%B0%EC%82%AC%EB%B6%84%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>데이터전환 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch14_%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%95%EC%A0%9C/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch14_%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%95%EC%A0%9C/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-10T08:34:41.000Z</published>
    <updated>2020-05-10T08:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="데이터전환"><a class="markdownIt-Anchor" href="#데이터전환"></a> 데이터전환</h2><h3 id="1-데이터-정제"><a class="markdownIt-Anchor" href="#1-데이터-정제"></a> 1. 데이터 정제</h3><ul><li>데이터 정제 항목을 정제 시점에 따라 전환 테스트 전, 중, 최종전환 3단계로 구분하여 데이터 정제 작업을 수행</li></ul><h3 id="2-데이터-품질-분석"><a class="markdownIt-Anchor" href="#2-데이터-품질-분석"></a> 2. 데이터 품질 분석</h3><ul><li>데이터 품질 관리는 기관이나 조직 내외부의 정보시스템 및 DB사용자의 기대를 만족시키기 위해 지속적으로 수행하는 데이터 관리 및 개선활동</li><li>원천 데이터와 전환된 목적 데이터베이스의 품질 분석</li><li>원천 데이터와 전환 데이터의 정합성 검증 항목</li></ul><h3 id="3-오류-데이터-측정"><a class="markdownIt-Anchor" href="#3-오류-데이터-측정"></a> 3. 오류 데이터 측정</h3><ul><li>데이터 중 정상 데이터와 오류 데이터를 정량적으로 측정</li><li>오류 목록의 내용을 확인하고 오류 해결 방안을 참조하여 원천 데이터의 정제를 요청할 것인지, 아니면 전환 프로그램을 수정할 것인지 데이터 정제 여부를 결정</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;데이터전환&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#데이터전환&quot;&gt;&lt;/a&gt; 데이터전환&lt;/h2&gt;
&lt;h3 id=&quot;1-데이터-정제&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-데이터-정제&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터전환" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>데이터전환 - 오류데이터측정</title>
    <link href="https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch14_%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%95%EC%A0%9C/%EC%98%A4%EB%A5%98%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%B8%A1%EC%A0%95/"/>
    <id>https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch14_%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%95%EC%A0%9C/%EC%98%A4%EB%A5%98%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%B8%A1%EC%A0%95/</id>
    <published>2020-05-10T08:21:18.000Z</published>
    <updated>2020-05-10T08:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="데이터전환"><a class="markdownIt-Anchor" href="#데이터전환"></a> 데이터전환</h2><h3 id="정상-데이터와-오류-데이터-정량적-측정"><a class="markdownIt-Anchor" href="#정상-데이터와-오류-데이터-정량적-측정"></a> 정상 데이터와 오류 데이터 정량적 측정</h3><h4 id="1-정상-데이터의-건수를-정량적으로-측정"><a class="markdownIt-Anchor" href="#1-정상-데이터의-건수를-정량적으로-측정"></a> 1. 정상 데이터의 건수를 정량적으로 측정</h4><ul><li>전환 대상 범위의 데이터를 업무 영역별, 테이블별로 세분화하여 정상 데이터의 수량을 정확히 측정하고 기록</li></ul><h4 id="2-오류-데이터의-유형과-건수를-정량적으로-측정"><a class="markdownIt-Anchor" href="#2-오류-데이터의-유형과-건수를-정량적으로-측정"></a> 2. 오류 데이터의 유형과 건수를 정량적으로 측정</h4><ul><li>원천 데이터의 정합성 기준을 근거로 업무별로 오류 위치와 유형을 파악하고 그 수량을 정확히 측정하여 기록</li></ul><h4 id="3-원천-데이터-오류-관리-목록-예시"><a class="markdownIt-Anchor" href="#3-원천-데이터-오류-관리-목록-예시"></a> 3. 원천 데이터 오류 관리 목록 예시</h4><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0510_04.png" alt="오류관리목록" /></p><h3 id="오류-원인-파악-및-정제-여부-결정"><a class="markdownIt-Anchor" href="#오류-원인-파악-및-정제-여부-결정"></a> 오류 원인 파악 및 정제 여부 결정</h3><h4 id="1-발견된-데이터-오류를-분석하고-원인-파악"><a class="markdownIt-Anchor" href="#1-발견된-데이터-오류를-분석하고-원인-파악"></a> 1. 발견된 데이터 오류를 분석하고 원인 파악</h4><ul><li>해결방안<ul><li>오류의 내용과 원인을 분서갛여 해결 가능한 오류는 향후 처리 방침을 기술하고, 해결 불가한 오류는 고객과 협의한 내용을 기술</li></ul></li><li>심각도<ul><li>상<ul><li>더 이상 데이터 이행을 진행할 수 없게 만드는 오류</li></ul></li><li>중<ul><li>데이터 이행 전반에 영향을 미치는 오류</li></ul></li><li>하<ul><li>데이터 이행의 흐름에는 영향을 미치지 않는 오류이나 상황에 맞지 않는 용도 및 배치 오류</li></ul></li></ul></li><li>상태<ul><li>Open<ul><li>오류가 보고되었지만 아직 분석되지 않은 상태</li></ul></li><li>Assigned<ul><li>영향 분석 및 수정을 위해 오류를 개발자에게 할당한 상태</li></ul></li><li>Fixed<ul><li>개발자가 오류를 수정한 상태</li></ul></li><li>Closed<ul><li>오류가 수정되었는지 확인하고 재테스트 시 오류가 발견되지 않은 상태</li></ul></li><li>Deferred<ul><li>오류 우선 순위가 낮게 분류되었기 때문에 오류 수정을 연기한 상태</li></ul></li><li>Classified<ul><li>보고된 오류가 프로젝트 팀에 의해 오류가 아니라고 판단한 상태</li></ul></li></ul></li></ul><h4 id="2-원천-데이터와-전환-프로그램의-정제-필요-여부-결정"><a class="markdownIt-Anchor" href="#2-원천-데이터와-전환-프로그램의-정제-필요-여부-결정"></a> 2. 원천 데이터와 전환 프로그램의 정제 필요 여부 결정</h4><ul><li><u>파악된 오류 원인을 기반으로 해결방안 협의</u></li><li>무시해야하는 오류가 아닌 경우에는 <u>원천 데이터의 정제</u>를 통해 해결해야할 것인지, <u>전환 프로그램을 수정할 것인지 결정</u></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;데이터전환&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#데이터전환&quot;&gt;&lt;/a&gt; 데이터전환&lt;/h2&gt;
&lt;h3 id=&quot;정상-데이터와-오류-데이터-정량적-측정&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터전환" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="오류데이터측정" scheme="https://hyeonukdev.github.io/tags/%EC%98%A4%EB%A5%98%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%B8%A1%EC%A0%95/"/>
    
  </entry>
  
  <entry>
    <title>데이터전환 - 데이터품질분석</title>
    <link href="https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch14_%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%95%EC%A0%9C/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%92%88%EC%A7%88%EB%B6%84%EC%84%9D/"/>
    <id>https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch14_%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%95%EC%A0%9C/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%92%88%EC%A7%88%EB%B6%84%EC%84%9D/</id>
    <published>2020-05-10T08:12:06.000Z</published>
    <updated>2020-05-10T08:12:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="데이터전환"><a class="markdownIt-Anchor" href="#데이터전환"></a> 데이터전환</h2><h3 id="원천-데이터-품질-분석의-개념"><a class="markdownIt-Anchor" href="#원천-데이터-품질-분석의-개념"></a> 원천 데이터 품질 분석의 개념</h3><ul><li>원천 데이터의 품질이 보장되지 않으면 전환 후의 데이터도 정확하지 않으며, 전환 후의 데이터 정합성 검증 시 오류가 발생할 때 그 원인을 찾기도 어려움</li><li>따라서 <u>전환 전에 원천 데이터의 품질을 검증함으로써 전환의 정확성을 보장</u>할 수 있으며, 이전에 <u>미처 발견하지 못한 데이터의 오류도 찾아낼 수 있음</u></li></ul><h3 id="원천-데이터-품질-검증을-위한-대표적인-정합성-항목"><a class="markdownIt-Anchor" href="#원천-데이터-품질-검증을-위한-대표적인-정합성-항목"></a> 원천 데이터 품질 검증을 위한 대표적인 정합성 항목</h3><blockquote><ul><li>필수 항목의 데이터가 모두 존재하는가?</li><li>데이터의 유형이 정확하게 관리되고 있는가?</li><li>날짜의 경우 날짜로서 유효한 형태를 가지고 있는가?</li><li>금액의 경우 유효한 값의 범위인가?</li><li>계좌 번호 등이 정해진 법칙에 따른 번호인가?</li><li>영업점이 실제로 존재하는 영업점인가?</li><li>코드 값이 정해진 범위에 속하는가?</li><li>개설 일자, 해지 일자 등 모든 일자의 시점이 업무 규칙에 위배되지 않고 정확하게 설정되어 있는가?</li><li>업무 규칙에 위배되는 잘못된 정보가 존재하는가?</li><li>잔액의 총합이 회계정보와 동일한가?</li><li>보고서 값과 실제 데이터 값이 일치하는가?</li></ul></blockquote><h3 id="목적-데이터-품질-분석"><a class="markdownIt-Anchor" href="#목적-데이터-품질-분석"></a> 목적 데이터 품질 분석</h3><ul><li>원천 데이터와 목적 데이터베이스 속성(Column)간 대응 관계는 1:1대응보다 N:M대응 관계가 더 많기 때문에 양자 간의 대응 관계를 정확히 표현하기 위해서는 데이터 레이아웃을 정확하게 파악하고 품질 검증 진행</li></ul><h3 id="목적-데이터베이스-전환-데이터-검증-고려-사항"><a class="markdownIt-Anchor" href="#목적-데이터베이스-전환-데이터-검증-고려-사항"></a> 목적 데이터베이스 전환 데이터 검증 고려 사항</h3><ul><li>현재 업무에서 사용하는 보고서나 통계용 정보를 사전에 조사하여 검증에 필요한 내용을 선정하고, 현재의 원장을 바탕으로 검증용 정보 도출</li><li>전환 데이터 검증은 데이터 전환 팀 인원 뿐만 아니라, 현업 인원도 함께 검증을 수행함으로써 검증의 정확성을 높이고 시간을 단축시키는 것이 중요함</li></ul><h3 id="전환-데이터의-대표적인-정합성-검증-항목"><a class="markdownIt-Anchor" href="#전환-데이터의-대표적인-정합성-검증-항목"></a> 전환 데이터의 대표적인 정합성 검증 항목</h3><ul><li>과목별 좌수 및 잔액</li><li>특정 기준으로 분류된 좌수 및 잔액</li><li>보고서 항목 또는 통계 수치</li><li>계좌 및 고객을 Sampling하여 해당 사항을 모두 검증</li><li>특수 관계가 있는 고객을 추출하여 관련된 데이터가 정확한지 검증</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;데이터전환&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#데이터전환&quot;&gt;&lt;/a&gt; 데이터전환&lt;/h2&gt;
&lt;h3 id=&quot;원천-데이터-품질-분석의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#원천-데
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터전환" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%84%ED%99%98/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터품질분석" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%92%88%EC%A7%88%EB%B6%84%EC%84%9D/"/>
    
  </entry>
  
</feed>
