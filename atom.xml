<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Engineering</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyeonukdev.github.io/"/>
  <updated>2020-05-09T15:50:50.000Z</updated>
  <id>https://hyeonukdev.github.io/</id>
  
  <author>
    <name>Hyeonukdev</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>서버프로그램구현 - 핵심기능</title>
    <link href="https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EB%B0%B0%EC%B9%98%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%ED%95%B5%EC%8B%AC%EA%B8%B0%EB%8A%A5/"/>
    <id>https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EB%B0%B0%EC%B9%98%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%ED%95%B5%EC%8B%AC%EA%B8%B0%EB%8A%A5/</id>
    <published>2020-05-09T15:50:50.000Z</published>
    <updated>2020-05-09T15:50:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><h3 id="1-배치-프로그램"><a class="markdownIt-Anchor" href="#1-배치-프로그램"></a> 1. 배치 프로그램</h3><ul><li>사용자의 상호 작용 없이 일련의 작업들을 작업 단위로 묶어 정기적으로 반복 수행하거나 정해진 규칙에 따라 일괄처리하는 것</li><li>일괄처리(Batch Processing)를 위해 주기적으로 발생하거나 반복적으로 발생하는 작업을 지원하는 도구</li><li>종류<ul><li>Spring Batch</li><li>Quartz</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;h3 id=&quot;1-배치-프로그램&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심기능" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EA%B8%B0%EB%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 배치프로그램</title>
    <link href="https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EB%B0%B0%EC%B9%98%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EB%B0%B0%EC%B9%98%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8/"/>
    <id>https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EB%B0%B0%EC%B9%98%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EB%B0%B0%EC%B9%98%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8/</id>
    <published>2020-05-09T15:31:08.000Z</published>
    <updated>2020-05-09T15:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><ul><li>애플리케이션 설계를 기반으로 프로그래밍 언어와 도구를 활용하여 배치 프로그램 구현 기술에 부합하는 <u>배치 프로그램을 구현</u></li><li>목표 시스템을 구성하는 하위 시스템 간의 연동시 안정적이고 안전하게 동작할 수 있는 배치 프로그램을 구현</li><li>개발된 배치 프로그램의 테스트를 수행</li></ul><h3 id="배치-프로그램의-개념"><a class="markdownIt-Anchor" href="#배치-프로그램의-개념"></a> 배치 프로그램의 개념</h3><ul><li>사용자의 상호 작용 없이 일련의 작업들을 작업 단위로 묶어 정기적으로 반복 수행하거나 정해진 규칙에 따라 일괄처리하는 것</li></ul><h3 id="배치-프로그램의-필수-요소"><a class="markdownIt-Anchor" href="#배치-프로그램의-필수-요소"></a> 배치 프로그램의 필수 요소</h3><ul><li>대용량 데이터<ul><li>대용량의 데이터를 처리할 수 있어야 함</li></ul></li><li>자동화<ul><li>심각한 오류 상황 외에는 사용자의 개입 없이 동작해야 함</li></ul></li><li>견고함<ul><li>유효하지 않은 데이터의 경우도 처리해서 비정상적인 동작 중단이 발생하지 않아야 함</li></ul></li><li>안정성<ul><li>어떤 문제가 생겼는지, 언제 발생했는지 등을 추적할 수 있어야 함</li></ul></li><li>성능<ul><li>주어진 시간 내에 처리를 완료할 수 있어야 하고, 동시에 동작하고 있는 다른 애플리케이션을 방해하지 말아야 함</li></ul></li></ul><h3 id="배치-스케줄러의-개념"><a class="markdownIt-Anchor" href="#배치-스케줄러의-개념"></a> 배치 스케줄러의 개념</h3><ul><li>일괄처리(Batch Processing)를 위해 주기적으로 발생하거나 반복적으로 발생하는 작업을 지원하는 도구</li><li>특정 업무를 원하는 시간에 처리할 수 있도록 지원하는 특성 때문에 잡 스케줄러 라고 함</li><li>종류<ul><li>Spring Batch</li><li>Quartz</li></ul></li></ul><h3 id="배치-스케줄러의-종류"><a class="markdownIt-Anchor" href="#배치-스케줄러의-종류"></a> 배치 스케줄러의 종류</h3><ol><li><p>Spring Batch 스프링 배치</p><ul><li>Spring Source사와 Accenture사가 2007년에 공동으로 개발한 오픈소스 프레임워크</li><li>아키텍처<br /><img src="https://t1.daumcdn.net/cfile/tistory/117AB50E49F566E038" alt="Spring Batch Architecture" /><ul><li>Run Tier<ul><li>배치의 실행을 담당</li></ul></li><li>Job Tier<ul><li>XML로 기술된 Job내의 각 Step들을 순차적으로 실행</li></ul></li><li>Application Tier<ul><li>Job을 수행하는데 필요한 Item Reader, Item Writer, Item Processor 등의 컴포넌트로 구성</li><li>파일 혹은 데이터베이스로부터 읽고 쓰는 기능을 수행</li></ul></li><li>Data Tier<ul><li>Database, File, Queue 등 물리적 데이터소스와의 결합이 이루어지는 영역</li></ul></li></ul></li><li>핵심 컴포넌트<ul><li>Job Repository<ul><li>Job Execution 관련 메타데이터를 저장하는 기반 컴포넌트</li></ul></li><li>Job Launcher<ul><li>Job Execution 실행하는 기반 컴포넌트</li></ul></li><li>JPA; Java Persistence API<ul><li>페이징 기능 제공</li></ul></li><li><b>Job</b><ul><li><u>배치 처리를 의미하는 애플리케이션 컴포넌트</u></li></ul></li><li><b>Step</b><ul><li><u>Job의 각 단계를 의미하며, Job은 일련의 연속된 Step으로 구성</u></li></ul></li><li>Item<ul><li>Data Source로부터 읽거나 저장하는 각 레코드</li></ul></li><li>Chunk<ul><li>특정크기를 갖는 아이템 목록을 의미</li></ul></li><li>Item Reader<ul><li>데이터소스로부터 아이템을 읽어 들이는 컴포넌트</li></ul></li><li><b>Item Processor</b><ul><li><u>Item Reader로 읽어 들인 아이템을 Item Writer를 사용해 저장하기 전에 처리하는 컴포넌트</u></li></ul></li><li>Item Writer<ul><li>Item Chunk를 데이터 소스에 저장하는 컴포넌트</li></ul></li></ul></li><li>핵심기능<ul><li>스프링 프레임워크 기반<ul><li>DI; Dependency Injection, AOP; Aspect Oriented Programming 및 다양한 엔터프라이즈 지원 기능 사용</li></ul></li><li>자체 제공 컴포넌트<ul><li>배치처리(데이터베이스나 파일로부터 데이터를 읽거나 쓰는 등) 시 공통적으로 필요한 컴포넌트를 제공</li></ul></li><li>견고함과 안정성<ul><li>선언적 생략과 처리 실패 후 재시도 설정을 제공</li></ul></li></ul></li></ul></li><li><p>Quartz 스케줄러</p><ul><li>Spring Framework에 플러그인되어 수행하는 Job과 실행스케줄을 정의하는 Trigger를 분리하여 유연성을 제공하는 오픈소스 스케줄러</li><li>구성요소<ul><li>Scheduler<ul><li>Quartz 실행환경을 관리하는 핵심개체</li></ul></li><li>Job<ul><li>사용자가 수행할 작업을 정의하는 인터페이스로서 Trigger 개체를 이용하여 스케줄 할 수 있음</li></ul></li><li>JobDetail<ul><li>작업명과 작업 그룹과 같은 수행할 Job에 대한 상세 정보를 정의하는 개체</li></ul></li><li>Trigger<ul><li>정의한 Job 개체의 실행 스케줄을 정의하는 개체로서 Scheduler 개체에게 Job 수행 지점을 알려주는 개체</li></ul></li></ul></li><li><u>유닉스의 크론 명령어와 유사한 오픈소스 배치 스케줄러</u></li></ul></li></ol><h3 id="배치-프로그램-구현"><a class="markdownIt-Anchor" href="#배치-프로그램-구현"></a> 배치 프로그램 구현</h3><h4 id="1-애플리케이션-설계를-기반으로-배치-프로그램-확인"><a class="markdownIt-Anchor" href="#1-애플리케이션-설계를-기반으로-배치-프로그램-확인"></a> 1. 애플리케이션 설계를 기반으로 배치 프로그램 확인</h4><ol><li>프로그램 관리 대장을 확인</li><li>배치 설계서를 확인<ul><li>프로그램 관리 대장의 ID와 일치하는 배치 설계를 확인</li></ul></li></ol><h4 id="2-애플리케이션-설계를-기반으로-배치-프로그램-구현"><a class="markdownIt-Anchor" href="#2-애플리케이션-설계를-기반으로-배치-프로그램-구현"></a> 2. 애플리케이션 설계를 기반으로 배치 프로그램 구현</h4><ol><li>배치 프로그램을 구현하기 위한 SQL을 작성</li><li>배치 프로그램을 구현하기 위한 I/O 오브젝트(DTO; Data Transfer Object, VO; Value Object)를 정의</li><li>배치 프로그램을 구현하기 위한 데이터 접근 오브젝트(DAO; Data Access Object) 작성</li><li>배치 프로그램을 구현하기 위한 스케줄러 클래스를 작성</li></ol><ul><li><u> 배치 설계서는 작성하지 않음</u></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 설계를 기반으로 프로그래밍 언어와 도구를 활용하여 배치 프로그램 구현 기술
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="배치프로그램" scheme="https://hyeonukdev.github.io/tags/%EB%B0%B0%EC%B9%98%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-09T15:28:23.000Z</published>
    <updated>2020-05-09T15:28:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><h3 id="1-보안-취약성-식별"><a class="markdownIt-Anchor" href="#1-보안-취약성-식별"></a> 1. 보안 취약성 식별</h3><ul><li>개발자의 실수, 논리적 오류 등으로 인해 <u>발생할 수 있는 보안 취약점을 최소화</u>하고, 사이버보안 위협에 대응할 수 있는 안전한 소프트웨어 개발하기 위한 일련의 보안 활동</li><li>보안 점검 항목<ul><li>입력 데이터 검증 및 표현</li><li>보안 기능</li><li>시간 및 상태</li><li>에러 처리</li><li>코드 오류</li><li>캡슐화</li><li>API 오용</li></ul></li></ul><h3 id="2-api"><a class="markdownIt-Anchor" href="#2-api"></a> 2. API</h3><ul><li><u>운영체제나 프로그래밍 언어 등에 있는 라이브러리를 이용할 수 있도록 규칙 등을 정해 놓은 인터페이스</u></li><li>종류<ul><li>Windows API</li><li>단일 유닉스 규격(SUS)</li><li>Java API</li><li>웹 API</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;h3 id=&quot;1-보안-취약성-식별&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - API</title>
    <link href="https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/API/"/>
    <id>https://hyeonukdev.github.io/2020/05/10/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/API/</id>
    <published>2020-05-09T15:15:30.000Z</published>
    <updated>2020-05-09T15:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><h3 id="api-application-programming-interface-개념"><a class="markdownIt-Anchor" href="#api-application-programming-interface-개념"></a> API; Application Programming Interface 개념</h3><ul><li><u>운영체제나 프로그래밍 언어 등에 있는 라이브러리를 이용할 수 있도록 규칙 등을 정해 놓은 인터페이스</u></li><li><u>프로그래밍 언어에서 특정한 작업을 수행하기 위해 사용</u>하거나 <u>운영체제의 파일 제어, 화상 처리, 문자 제어 등의 기능을 활용</u>하기 위해 사용</li><li>개발에 필요한 여러 도구를 제공하기 때문에 이를 이용하면 <u>원하는 기능을 쉽고 효율적으로 구현 가능</u></li><li>종류<ul><li>Windows API</li><li>단일 유닉스 규격</li><li>Java API</li><li>웹 API</li><li>Open API</li></ul></li></ul><h3 id="api-종류"><a class="markdownIt-Anchor" href="#api-종류"></a> API 종류</h3><h4 id="1-windows-api"><a class="markdownIt-Anchor" href="#1-windows-api"></a> 1. Windows API</h4><ul><li>마이크로소프트 윈도우 운영체제에서 사용하는 API</li><li>C/C++ 프로그램에서 직접 운영체제와 상호 작용할 수 있도록 만들어졌으며, 그 보다 낮은 수준의 제어는 Ntdll.dll을 사용</li><li>윈도우 API 서비스<ul><li>기본 서비스</li><li>고급 서비스</li><li>그래픽장치 인터페이스</li><li>사용자 인터페이스</li><li>공통 대화 상자 라이브러리</li><li>공통 컨트롤 라이브러리</li><li>윈도 셀</li><li>네트워크 서비스</li><li>웹</li></ul></li></ul><h4 id="2-sus-single-unix-specification-단일-유닉스-규격"><a class="markdownIt-Anchor" href="#2-sus-single-unix-specification-단일-유닉스-규격"></a> 2. SUS; Single UNIX Specification 단일 유닉스 규격</h4><ul><li><u>유닉스를 사용하기 위해 지켜져야 하는 표준 규격의 총칭</u></li><li>SUS 는 전기전자기술자협회와 오픈 그룹의 표준화 작업 결과물에 바탕을 두고 있으며, 오스틴 그룹이 개발 및 유지 관리를 담당</li></ul><h3 id="3-java-api"><a class="markdownIt-Anchor" href="#3-java-api"></a> 3. Java API</h3><ul><li><u>Java를 사용하기 쉽게 구현할 수 있도록 한 클래스 라이브러리의 집합</u></li><li>Java 언어를 사용하여 사용자의 부담을 최소화하는 반면에 입출력, 화면 구성, 이미지, 네트워크와 같이 복잡하지만 필요한 클래스들을 미리 구현하여 사용자가 쉽게 구현하도록 하는 API</li></ul><h3 id="4-웹-api"><a class="markdownIt-Anchor" href="#4-웹-api"></a> 4. 웹 API</h3><ul><li>웹 어플리케이션 개발에서 다른 서비스에 요청을 보내고 응답을 받기 위해 정의된 명세</li><li>블로그 API는 블로그에 접속하지 않고도 워드 아래한글에서 글을 작성하여 올릴 수 있음</li><li>우체국의 우체국 API, 구글과 네이버 지도 API등 다양한 API가 서비스 되고 있음</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;h3 id=&quot;api-application-programming-interface-개념&quot;&gt;&lt;a clas
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="API" scheme="https://hyeonukdev.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 보안취약성식별</title>
    <link href="https://hyeonukdev.github.io/2020/05/09/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EB%B3%B4%EC%95%88%EC%B7%A8%EC%95%BD%EC%84%B1%EC%8B%9D%EB%B3%84/"/>
    <id>https://hyeonukdev.github.io/2020/05/09/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EB%B3%B4%EC%95%88%EC%B7%A8%EC%95%BD%EC%84%B1%EC%8B%9D%EB%B3%84/</id>
    <published>2020-05-09T14:46:38.000Z</published>
    <updated>2020-05-09T14:46:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><ul><li>업무 프로세스 맵과 세부 업무 프로세스를 확인</li><li>세부 업무 프로세스를 기반으로 <u>프로그래밍 언어와 도구를 활용하여 서비스의 구현에 필요한 업무 프로그램 구현</u></li><li>개발하고자 하는 <u>목표 시스템의 잠재적 보안 취약성이 제거될 수 있도록 서버 프로그램을 구현</u></li><li>개발된 업무 프로그램의 내부 기능과 제공하는 인터페이스에 대해 테스트 수행</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>API; Application Programming Interface<ul><li>응용 프로그램 개발 시 운영체제나 프로그래밍 언어 등에 있는 라이브러리를 이용할 수 있도록 규칙을 정의해 놓은 인터페이스</li></ul></li></ul><h3 id="소프트웨어-개발-보안의-개념"><a class="markdownIt-Anchor" href="#소프트웨어-개발-보안의-개념"></a> 소프트웨어 개발 보안의 개념</h3><ul><li>개발자의 실수, 논리적 오류 등으로 인해 <u>발생할 수 있는 보안 취약점을 최소화</u>하고, 사이버보안 위협에 대응할 수 있는 안전한 소프트웨어 개발하기 위한 일련의 보안 활동</li><li>데이터의 <u>Confidentiality 기밀성, Integrity 무결성, Availability 가용성 유지를 목표</u></li></ul><h3 id="소프트웨어-개발-보안-가이드-구성"><a class="markdownIt-Anchor" href="#소프트웨어-개발-보안-가이드-구성"></a> 소프트웨어 개발 보안 가이드 구성</h3><ul><li>입력 데이터 검증 및 표현<ul><li>프로그램 입력 값에 대한 검증 누락 또는 부적절한 검증, 데이터의 잘못 된 형식 지정으로 인해 발생할 수 있는 보안 약점</li><li>SQL 삽입</li><li>자원 삽입</li><li>크로스 사이트 스크립트 등</li></ul></li><li>보안 기능<ul><li>보안 기능(인증, 접근제어, 기밀성, 암호화, 권한 관리)을 적절하지 않게 구현 시 발생할 수 있는 보안 약점</li><li>부적절한 인가</li><li>중요 정보 펭문 저장 등</li></ul></li><li>시간 및 상태<ul><li>동시 또는 거의 동시 수행을 지원하는 병렬 시스템, 하나 이상의 프로세스가 동작하는 환경에서 시간 및 상태를 부적절하게 관리하여 발생할 수 있는 보안 약점</li><li>경쟁 조건</li><li>제어문을 사용하지 않은 재귀 함수 등</li></ul></li><li>에러 처리<ul><li>에러를 처리하지 않거나, 불충분하게 처리하여 에러 정보에 중요 정보가 포함될 때 발생할 수 있는 보안 약점</li><li>취약한 패스워드 요구 조건</li><li>오류 메시지를 통한 정보 노출 등</li></ul></li><li>코드 오류<ul><li>타입 변환 오류, 자원의 부적절한 반환 등과 같이 개발자가 범할 수 있는 코딩 오류로 인해 유발되는 보안 약점</li><li>널 포인터 역참조</li><li>부적절한 자원 해제 등</li></ul></li><li>캡슐화<ul><li>중요한 데이터 또는 기능성을 불충분하게 캡슐화하였을 때 인가되지 않는 사용자에게 데이터 누출이 가능해지는 보안 약점</li><li>제거되지 않고 남은 디버그 코드</li><li>시스템 데이터 정보 노출 등</li></ul></li><li>API 오용<ul><li>의도된 사용에 반하는 방법으로 API를 사용하거나, 보안에 취약한 API를 사용하여 발생할 수 있는 보안 약점</li><li>DNS Lookup에 의존한 보안 결정</li><li>Null 매개 변수 미조사 등</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;업무 프로세스 맵과 세부 업무 프로세스를 확인&lt;/li&gt;
&lt;li&gt;세부 업무 프로세스를 기
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="보안취약성식별" scheme="https://hyeonukdev.github.io/tags/%EB%B3%B4%EC%95%88%EC%B7%A8%EC%95%BD%EC%84%B1%EC%8B%9D%EB%B3%84/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/09/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B3%B5%ED%86%B5%EB%AA%A8%EB%93%88%EA%B5%AC%ED%98%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/09/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B3%B5%ED%86%B5%EB%AA%A8%EB%93%88%EA%B5%AC%ED%98%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-09T14:43:44.000Z</published>
    <updated>2020-05-09T14:43:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><h3 id="1-재사용"><a class="markdownIt-Anchor" href="#1-재사용"></a> 1. 재사용</h3><ul><li>목표 시스템의 개발 시간 및 비용 절감을 위하여 검증된 기능을 파악하고 재구성하여 시스템에 응용하기 위한 최적화 작업</li><li>분류<ul><li>함수와 객체 재사용</li><li>컴포넌트 재사용</li><li>애플리케이션 재사용</li></ul></li></ul><h3 id="2-모듈화"><a class="markdownIt-Anchor" href="#2-모듈화"></a> 2. 모듈화</h3><ul><li>스프트웨어 개발 작업을 실제로 개발할 수 있는 작은 단위로 나누는 것</li><li>측정 척도<ul><li>응집도</li><li>결합도</li></ul></li><li>관계<ul><li>응집도는 높게</li><li>결합도는 낮게</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;h3 id=&quot;1-재사용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-재사용&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 모델화</title>
    <link href="https://hyeonukdev.github.io/2020/05/09/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B3%B5%ED%86%B5%EB%AA%A8%EB%93%88%EA%B5%AC%ED%98%84/%EB%AA%A8%EB%93%88%ED%99%94/"/>
    <id>https://hyeonukdev.github.io/2020/05/09/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B3%B5%ED%86%B5%EB%AA%A8%EB%93%88%EA%B5%AC%ED%98%84/%EB%AA%A8%EB%93%88%ED%99%94/</id>
    <published>2020-05-09T14:30:48.000Z</published>
    <updated>2020-05-09T14:30:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><h3 id="모듈화-개념"><a class="markdownIt-Anchor" href="#모듈화-개념"></a> 모듈화 개념</h3><ul><li>해결하기 어려운 큰 문제를 작은 단위로 쪼개어 하나씩 해결하는 것처럼, 소프트웨어 개발 작업을 실제로 개발할 수 있는 작은 단위로 나누는 것</li></ul><h3 id="모듈화의-장점"><a class="markdownIt-Anchor" href="#모듈화의-장점"></a> 모듈화의 장점</h3><ul><li>분할과 정복의 원리가 적용되어 복잡도 감소</li><li>문제를 이해하기 쉽게 만듦</li><li>변경하기 쉽고, 변경으로 인한 영향으로 적음</li><li>유지보수 용이</li><li>프로그램을 효율적으로 관리</li><li>오류로 인한 파급효과를 최소화</li><li>설계 및 코드 재사용</li></ul><h3 id="모듈화-측정-척도"><a class="markdownIt-Anchor" href="#모듈화-측정-척도"></a> 모듈화 측정 척도</h3><ul><li>Cohesion 응집도<ul><li>인터페이스의 요청을 처리함에 있어서 <u>공통 모듈 내의 클래스들 간에 얼마나 유기적으로 협업하여 처리하는 가</u>에 관한 정도</li><li><b>높여야 함</b></li></ul></li><li>Couplling 결합도<ul><li><u>어떤 모듈이 다른 모듈에 의존하는 정도</u></li><li><b>낮춰야 함</b></li></ul></li></ul><h4 id="응집도-개념"><a class="markdownIt-Anchor" href="#응집도-개념"></a> 응집도 개념</h4><ul><li>공통 모듈 내의 클래스들이 외부의 기능을 수행함에 있어서 <u>얼마나 서로 클래스들끼리 내부적으로 연계되어 수행되는지에</u> 대한 정도<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0509_01.png" alt="공통모듈내 응집도" /></li></ul><h4 id="응집도의-유형과-품질"><a class="markdownIt-Anchor" href="#응집도의-유형과-품질"></a> 응집도의 유형과 품질</h4><ul><li><u><b>기능</b>은 <b>순차</b>적으로 <b>통신</b>해야, <b>절차</b>적 <b>시간</b>이 <b>논리적</b>이 되고 <b>우연</b>이 낮음</u><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0509_02.png" alt="응집도의 유형과 품질" /></li></ul><h4 id="결합도-개념"><a class="markdownIt-Anchor" href="#결합도-개념"></a> 결합도 개념</h4><ul><li>프로세스를 처리 함에 있어서 <u>각각의 공통 모듈이 서로 연계되어 있는 정도</u><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0509_03.png" alt="공통모듈내 결합도" /></li></ul><h4 id="결합도-유형과-품질"><a class="markdownIt-Anchor" href="#결합도-유형과-품질"></a> 결합도 유형과 품질</h4><ul><li><u>높은 <b>내용</b>은 <b>공통</b>적인 것을 <b>외부</b>로부터 <b>제어</b>한 후 <b>도장</b>찍은 <b>자료</b>이다</u></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;h3 id=&quot;모듈화-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#모듈화-개
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="모델화" scheme="https://hyeonukdev.github.io/tags/%EB%AA%A8%EB%8D%B8%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 재사용</title>
    <link href="https://hyeonukdev.github.io/2020/05/09/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B3%B5%ED%86%B5%EB%AA%A8%EB%93%88%EA%B5%AC%ED%98%84/%EC%9E%AC%EC%82%AC%EC%9A%A9/"/>
    <id>https://hyeonukdev.github.io/2020/05/09/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B3%B5%ED%86%B5%EB%AA%A8%EB%93%88%EA%B5%AC%ED%98%84/%EC%9E%AC%EC%82%AC%EC%9A%A9/</id>
    <published>2020-05-09T13:13:28.000Z</published>
    <updated>2020-05-09T13:13:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><ul><li>공통 모듈의 상세 설계를 기반으로 <u>프로그래밍 언어와 도구를 활용</u>하여 업무 프로세스 및 서비스의 구현에 필요한 <u>공통 모듈을 작성</u></li><li>소프트웨어 측정 지표 중 <u>모듈 간의 <b>결합도는 줄이고</b> 개별 모듈들의 내부 <b>응집도를 높인</b> 공통 모듈을 구현</u></li><li>공통 개발된 공통 모듈의 내부 기능과 제공하는 인터페이스에 대해 테스트할 수 있는 <u>테스트 케이스를 작성</u>하고 단위 테스트를 수행하기 위한 테스트 조건을 명세화</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>Cohesion 응집도<ul><li>모듈 내부에 존재하는 구성 요소들 사이의 밀접한 정도로, 응집도가 높을수록 구성 요소들이 꼭 필요한 것으로만 모여 있음</li></ul></li><li>Coupling 결합도<ul><li>모듈과 모듈 사이의 관계에서 관련 정도를 나타내며 모듈 간에는 관련이 적을수록 상호 의존성이 줄어 모듈의 독립성이 높아지고 독립성이 높으면 모듈 간에 영향이 적어 좋은 설계가 됨</li></ul></li></ul><h3 id="공통-모듈-reuse-재사용의-개념"><a class="markdownIt-Anchor" href="#공통-모듈-reuse-재사용의-개념"></a> 공통 모듈 Reuse 재사용의 개념</h3><ul><li>공통모듈은 <u>정보시스템 구축 시 자주 사용하는 기능</u>들로서 재사용이 가능하게 <u>패키지(클래스, 라이브러리, 컴포넌트, 프레임워크)로 제공</u>하는 <u>독립된 모듈</u>을 의미</li><li>재사용은 <u>목표 시스템의 개발 시간 및 비용 절감을 위하여 검증된 기능을 파악하고 재구성하여 시스템에 응용</u>하기 위한 최적화 작업</li></ul><h3 id="재사용-범위에-따른-분류"><a class="markdownIt-Anchor" href="#재사용-범위에-따른-분류"></a> 재사용 범위에 따른 분류</h3><ul><li>함수와 객체 재사용<ul><li>함수나 클래스 단위로 구현한 소스코드를 재사용</li></ul></li><li>컴포넌트 재사용<ul><li>컴포넌트 단위로 재사용하며, 컴포넌트의 인터페이스를 통해 통신</li></ul></li><li>애플리케이션 사용<ul><li>공통된 기능을 제공하도록 구현된 애플리케이션과의 통신으로 기능을 공유하여 재사용</li></ul></li></ul><h3 id="재사용의-이점"><a class="markdownIt-Anchor" href="#재사용의-이점"></a> 재사용의 이점</h3><ul><li>생산성 증가</li><li>소프트웨어 품질 향상</li><li>프로젝트 문서 공유</li><li><u>새로운 개발 방법론 도입은 <b>어렵게 함</b></u></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;공통 모듈의 상세 설계를 기반으로 &lt;u&gt;프로그래밍 언어와 도구를 활용&lt;/u&gt;하여 업무 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="재사용" scheme="https://hyeonukdev.github.io/tags/%EC%9E%AC%EC%82%AC%EC%9A%A9/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-08T10:04:31.000Z</published>
    <updated>2020-05-08T10:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><h3 id="1-개발환경-구축"><a class="markdownIt-Anchor" href="#1-개발환경-구축"></a> 1. 개발환경 구축</h3><ul><li><u>응용소프트웨어 개발</u>에 필요한 하드웨어 및 소프트웨어의 필요 사항을 검토하고, 이에 따라 <u>개발환경에 필요한 준비를 수행</u></li><li>개발 하드웨어 환경<ul><li>클라이언트</li><li>서버</li></ul></li><li>개발 소프트웨어 환경<ul><li>시스템소프트웨어</li><li>개발 소프트웨어<ul><li>요구사항 관리 도구</li><li>설계/모델링 도구</li><li>구현 도구</li><li>빌드 도구</li><li>테스트 도구</li><li>형상 관리 도구</li></ul></li></ul></li></ul><h3 id="2-서버-개발-프레임워크"><a class="markdownIt-Anchor" href="#2-서버-개발-프레임워크"></a> 2. 서버 개발 프레임워크</h3><ul><li><p><u>서버 프로그램 개발 시 </u> 다양한 <u>네트워크 설정, 요청 및 응답처리, 아키텍처 모델 구현등을 손쉽게 처리할 수 있도록 클래스나 인터페이스를 제공하는 소프트웨어</u></p></li><li><p>종류</p><ul><li>Spring</li><li>Node.js</li><li>Django</li><li>Codeigiter</li><li>Ruby on Rails</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;h3 id=&quot;1-개발환경-구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 서버개발프레임워크</title>
    <link href="https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/</id>
    <published>2020-05-08T09:51:11.000Z</published>
    <updated>2020-05-08T09:51:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><h3 id="framework-프레임워크의-개념"><a class="markdownIt-Anchor" href="#framework-프레임워크의-개념"></a> Framework 프레임워크의 개념</h3><ul><li>사전적으로 뼈대, 골조를 의미하며 소프트웨어에서는 특정 기능을 수행하기 위해 필요한 <u>클래스나 인터페이스 등을 모다운 집합체</u></li></ul><h3 id="프레임워크의-특징"><a class="markdownIt-Anchor" href="#프레임워크의-특징"></a> 프레임워크의 특징</h3><ol><li>Modularity 모듈화<ul><li>캡슐화를 통해 모듈화를 강화하고 설계와 구현의 변경에 따른 영향을 최소화하여 소프트웨어의 품질을 향상시킴</li></ul></li><li>Reusability 재사용성<ul><li>재사용 가능한 모듈들을 제공함으로써 개발자의 생산성을 향상시킴</li></ul></li><li>Extensibility 확장성<ul><li>프레임워크는 다형성을 통해 인터페이스의 확장이 가능하여 다양한 형태와 기능을 가진 애플리케이션 개발이 가능함</li></ul></li><li>Inversion of Control 제어의 흐름<ul><li>프레임워크 코드가 전체 애플리케이션의 처리 흐름을 제어하여 특정한 이벤트가 발생할 때 다형성을 통해 애플리케이션의 확장한 메소드를 호출함으로써 제어가 프레임워크로부터 애플리케이션으로 거꾸로 흐르게 함</li></ul></li></ol><h3 id="서버-개발-프레임워크"><a class="markdownIt-Anchor" href="#서버-개발-프레임워크"></a> 서버 개발 프레임워크</h3><h4 id="1-서버-개발-프레임워크의-개념"><a class="markdownIt-Anchor" href="#1-서버-개발-프레임워크의-개념"></a> 1. 서버 개발 프레임워크의 개념</h4><ul><li><u>서버 프로그램 개발 시 </u> 다양한 <u>네트워크 설정, 요청 및 응답처리, 아키텍처 모델 구현등을 손쉽게 처리할 수 있도록 클래스나 인터페이스를 제공하는 소프트웨어</u></li><li>서버 개발 프레임워크에 따라 지원하는 <u>프로그래밍 언어</u>가 제한적이므로 선정할 수 있는 <u>프레임워크도 제한적</u></li><li>서버 개발 프레임워크의 대부분은 <code>모델-뷰-컨트롤러</code><u>MVC패턴</u>을 기반으로 개발됨</li></ul><h4 id="2-서버-개발-프레임워크의-종류"><a class="markdownIt-Anchor" href="#2-서버-개발-프레임워크의-종류"></a> 2. 서버 개발 프레임워크의 종류</h4><ul><li>Spring<ul><li>JAVA를 기반으로 만들어진 프레임워크로, 전자정부 표준 프레임워크의 기반 기술로 사용되고 있음</li></ul></li><li>Node.js<ul><li>JavaScript를 기반으로 만들어진 프레임워크로, 비동기 입,출력 처리와 이벤트 위주의 높은 성능을 갖고 있어 실시간으로 입/출력이 빈번한 애플리케이션</li></ul></li><li>Django<ul><li>Python을 기반으로 만들어진 프레임워크로, 컴포넌트의 재사용과 플러그인화를 강조하여 신속한 개발이 가능하도록 지원</li></ul></li><li>Ruby on Rails<ul><li>Ruby를 기반으로 만들어진 프레임워크로, 테스트를 위한 웹서버를 지원하며 데이터베이스 작업을 단순화, 자동화시켜 개발 코드의 길이가 짧아 신속한 개발이 가능</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;h3 id=&quot;framework-프레임워크의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버개발프레임워크" scheme="https://hyeonukdev.github.io/tags/%EC%84%9C%EB%B2%84%EA%B0%9C%EB%B0%9C%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
  </entry>
  
  <entry>
    <title>서버프로그램구현 - 개발환경구축</title>
    <link href="https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    <id>https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch15_%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/</id>
    <published>2020-05-08T09:07:20.000Z</published>
    <updated>2020-05-08T09:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서버프로그램구현"><a class="markdownIt-Anchor" href="#서버프로그램구현"></a> 서버프로그램구현</h2><ul><li><u>응용소프트웨어 개발</u>에 필요한 하드웨어 및 소프트웨어의 필요 사항을 검토하고, 이에 따라 <u>개발환경에 필요한 준비를 수행</u></li><li>응용소프트웨어 개발에 필요한 하드웨어 및 소프트웨어를 설치하고 설정하여 <u>개발환경을 구축</u></li><li>사전에 수립된 형상관리 방침에 따라 운영 정책에 부합하는 <u>형상관리 환경을 구축</u></li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>구현도구<ul><li>프로그램을 개발할 때 가장 많이 사용되는 도구로서 코드의 작성 및 편집, 디버깅 등과 같은 다양한 작업이 가능</li></ul></li><li>클라이언트<ul><li>시스템에서 제공하는 서버를 활용하기 위해 거래를 발생시키는 하드웨어</li></ul></li><li>형상관리<ul><li>소프트웨어 개발 과정에서 소프트웨어의 변경사항을 관리하기 위해 개발된 일련의 활동</li></ul></li></ul><h3 id="개발환경-구축의-개념"><a class="markdownIt-Anchor" href="#개발환경-구축의-개념"></a> 개발환경 구축의 개념</h3><ul><li><u>해당 프로젝트의 목적과 구축 설계에 대한 명확한 이해가 필요</u></li><li>이에 맞는 하드웨어 소프트웨어 선정이 필요</li><li><u>제품들의 성능과 라이선스 그리고 사용 편의성 등에 대한 내용 파악도 필요</u></li></ul><h3 id="개발-하드웨어-환경"><a class="markdownIt-Anchor" href="#개발-하드웨어-환경"></a> 개발 하드웨어 환경</h3><h4 id="1-client-클라이언트-환경-구성"><a class="markdownIt-Anchor" href="#1-client-클라이언트-환경-구성"></a> 1. Client 클라이언트 환경 구성</h4><ul><li><u>서버 시스템</u>에서 제공하는 서비스를 활용하기 위해 <u>사용자와의 인터페이스를 제공하는 하드웨어</u></li><li>종류<ul><li>PC</li><li>웹 브라우저 화면</li><li>모바일 앱</li></ul></li></ul><h4 id="2-server-서버-환경-구성"><a class="markdownIt-Anchor" href="#2-server-서버-환경-구성"></a> 2. Server 서버 환경 구성</h4><ol><li>Web 웹 서버</li></ol><ul><li>클라이언트에서 요청하는 서비스의 속도를 향상시키기 위해 <u>정적파일</u>들을 제공하는 웹 서버 애플리케이션이 설치되는 <u>하드웨어</u></li></ul><ol start="2"><li>WAS; Web Application Server 웹 애플리케이션 서버</li></ol><ul><li><u>동적 웹 서비스</u>를 제공하기 위해 Tomcat, Underflow, IIS 등 미들웨어인 WAS와 서비스에 관련된 애플리케이션이 설치되는 하드웨어</li></ul><ol start="3"><li>Database 데이터베이스 서버</li></ol><ul><li>MySQL, Oracle</li></ul><ol start="4"><li>파일 서버</li></ol><ul><li>서비스 제공을 위해 파일을 저장하고, 공유하기 위한 파일 저장 하드웨어</li></ul><h3 id="개발-소프트웨어-환경"><a class="markdownIt-Anchor" href="#개발-소프트웨어-환경"></a> 개발 소프트웨어 환경</h3><h4 id="1-시스템-소프트웨어"><a class="markdownIt-Anchor" href="#1-시스템-소프트웨어"></a> 1. 시스템 소프트웨어</h4><ol><li>OS; Operation System 운영체제</li></ol><ul><li>종류<ul><li>Windows</li><li>Linux</li><li>UNIX</li></ul></li></ul><ol start="2"><li>JVM; Java Virtual Machine</li></ol><ul><li>Java 관련 응용프로그램을 가동하기 위한 인터프리터 환경</li></ul><ol start="3"><li>Web Server</li></ol><ul><li>정적 웹 서비스를 수행하는 미들웨어로서 웹 브라우저 화면에서 요청하는 정적파일 제공</li><li>종류<ul><li>Apache</li><li>Nginx</li><li>IIS</li><li>GWS</li></ul></li></ul><ol start="4"><li>WAS; Web Application Server</li></ol><ul><li>웹 애플리케이션을 수행하는 미드뤠어로서 웹서버와 JSP/Servlet 애플리케이션 수행을 위한 엔진으로 구성</li><li>종류<ul><li>Tomcat</li><li>Undertow</li><li>JEUS</li><li>Weblogic</li><li>Websphere</li></ul></li></ul><ol start="5"><li>DBMS; Database Management System</li></ol><ul><li>데이터 저장과 관리를 위한 데이터베이스 소프트웨어</li><li>종류<ul><li>Oracle</li><li>DB2</li><li>Sybase</li><li>SQL Server</li><li>MySQL</li></ul></li></ul><h4 id="2-개발-소프트웨어"><a class="markdownIt-Anchor" href="#2-개발-소프트웨어"></a> 2. 개발 소프트웨어</h4><ol><li>요구사항 관리도구</li></ol><ul><li>목표 시스템의 기능과 제약 조건 등 고객의 요구사항을 수집, 분석, 추적을 쉽게 할 수 있게 지원</li><li>종류<ul><li>JFeature</li><li>JRequisite</li><li>OSRMT</li><li>Trello</li></ul></li></ul><ol start="2"><li>설계/모델링 도구</li></ol><ul><li>기능을 논리적으로 결정하기 위해 통합 모델링한 언어(UML)지원</li><li>Database 설계 지원</li><li>종류<ul><li>ArgoUML</li><li>DB Designer</li><li>StarUML</li></ul></li></ul><ol start="3"><li>구현 도구</li></ol><ul><li>문제 해결방법을 소프트웨어 언어를 통해 구현 및 개발을 지원하는 도구</li><li>종류<ul><li>Eclipse</li><li>Intelli J</li><li>Vistual Studio</li></ul></li></ul><ol start="4"><li>테스터 도구</li></ol><ul><li>구현및 개발된 모듈들에 대하여 요구 사항에 적합하게 구현되어 있는지 테스트를 지원하는 도구</li><li>종류<ul><li>JUnit</li><li>CppUnit</li><li>Jmeter</li><li>SpringTest</li></ul></li></ul><ol start="5"><li>형상관리 도구</li></ol><ul><li>산출물의 변경 사항을 버전별로 관리하여 목표 시스템의 품질 향상을 지원하는 도구</li><li>종류<ul><li>CSV</li><li>SVN</li><li>Git</li></ul></li></ul><h3 id="개발환경-구축-순서"><a class="markdownIt-Anchor" href="#개발환경-구축-순서"></a> 개발환경 구축 순서</h3><h4 id="1-목표시스템의-환경-및-요구사항-분석"><a class="markdownIt-Anchor" href="#1-목표시스템의-환경-및-요구사항-분석"></a> 1. 목표시스템의 환경 및 요구사항 분석</h4><ul><li><u>제안 요청서, 제안서, 사업 수행 계획서, 요구사항 정의서, 시스템 아키텍처, 애플리케이션 아키텍처 </u> 등 분석 및 설계시의 산출물을 분석하여 개발환경 준비</li><li>목표시스템의 환경 예시<ul><li>목표시스템</li><li>개발언어</li><li>개발인원 및 기간</li><li>사양관련</li></ul></li></ul><h4 id="2-개발언어-설정"><a class="markdownIt-Anchor" href="#2-개발언어-설정"></a> 2. 개발언어 설정</h4><ul><li><p>기준</p><ul><li>적정성<ul><li>대상 업무의 성격</li><li><u>개발하고자 하는 시스템이나 응용 프로그램의 목적에 적합</u></li></ul></li><li>효율성<ul><li>프로그래밍의 효율성이 고려</li></ul></li><li>이식성<ul><li>일반적인 PC 및 OS에 개발환경이 설치 가능</li></ul></li><li>친밀성<ul><li>프로그래머가 그 언어를 이해하고 사용할 수 있음</li></ul></li><li>범용성<ul><li>관거 개발 실적이나 사례가 존재하고, 광범위한 분야에서 사용되고 있어야 함</li></ul></li></ul><h4 id="3-통합-개발환경-선정"><a class="markdownIt-Anchor" href="#3-통합-개발환경-선정"></a> 3. 통합 개발환경 선정</h4><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0508_04.png" alt="통합개발환경도구비교" /></p><h4 id="4-프로그램의-배포-및-라이브러리-관리를-위한-빌드-도구-선정"><a class="markdownIt-Anchor" href="#4-프로그램의-배포-및-라이브러리-관리를-위한-빌드-도구-선정"></a> 4. 프로그램의 배포 및 라이브러리 관리를 위한 빌드 도구 선정</h4><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0508_05.png" alt="빌드도구비교" /></p><ul><li>빌드 도구의 선정<ul><li>프로젝트 팀원의 빌드 도구의 친밀도와 숙련도에 따라 결정</li><li>형상관리 도구를 고려하여 빌드 도구 선정</li><li>통합 개발 도구와 호환이 가능한 빌드 도구 선정</li></ul></li></ul><h4 id="5-개발-인원을-고려한-형상관리-도구를-선정"><a class="markdownIt-Anchor" href="#5-개발-인원을-고려한-형상관리-도구를-선정"></a> 5. 개발 인원을 고려한 형상관리 도구를 선정</h4><ul><li>종류<ul><li>CVS</li><li>SVN</li><li>Git</li></ul></li><li>목표 시스템 환경 등을 고려하여 선정</li><li>통합 개발 도구와 호환이 가능한 빌드 도구를 선정</li></ul><h4 id="6-프로젝트-검증에-적합한-테스트-도구를-선정"><a class="markdownIt-Anchor" href="#6-프로젝트-검증에-적합한-테스트-도구를-선정"></a> 6. 프로젝트 검증에 적합한 테스트 도구를 선정</h4><ul><li>통합 개발 도구와 호환이 가능하고 널리 사용되는 테스트 자동화 도구를 선정</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서버프로그램구현&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#서버프로그램구현&quot;&gt;&lt;/a&gt; 서버프로그램구현&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;응용소프트웨어 개발&lt;/u&gt;에 필요한 하드웨어 및 소프트웨어의 필요 사항을 검토하고
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="서버프로그램구현" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%84%9C%EB%B2%84%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B5%AC%ED%98%84/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="개발환경구축" scheme="https://hyeonukdev.github.io/tags/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-07T16:43:20.000Z</published>
    <updated>2020-05-07T16:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="1-라이브러리"><a class="markdownIt-Anchor" href="#1-라이브러리"></a> 1. 라이브러리</h3><ul><li>프로그램을 효율적으로 개발할 수 있도록 <u>자주 사용하는 함수나 데이터들을 미리 만들어 모아 놓은 집합체</u></li><li>프로그래밍 언어에 따라 일반적으로 <u>도움말, 설치파일, 샘플 코드 등을 제공</u><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0508_01.png" alt="C언어의 대표적인 표준라이브러리" /><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0508_02.png" alt="Java언어의 대표적인 표준라이브러리" /></li></ul><h3 id="2-데이터-입출력"><a class="markdownIt-Anchor" href="#2-데이터-입출력"></a> 2. 데이터 입출력</h3><ul><li>키보드로 입력 받은 값을 저장하고 화면에서 서식을 지정하여 출력할 때 사용하는 클래스와 메소드</li><li>C언어 관련<ul><li>scanf()</li><li>getchar()</li><li>gets()</li><li>printf()</li><li>putchar()</li><li>puts()</li></ul></li><li>Java언어 관련<ul><li>Scanner</li><li>Sytem.out.printf()</li></ul></li></ul><h3 id="3-예외처리"><a class="markdownIt-Anchor" href="#3-예외처리"></a> 3. 예외처리</h3><ul><li>프로그램의 정상적인 실행을 방해하는 조건이나 상태를 뜻하는 예외가 발생했을 때 해당 문제에 대한 처리 루틴을 수행하도록 하는 것</li></ul><h3 id="4-프로토타입"><a class="markdownIt-Anchor" href="#4-프로토타입"></a> 4. 프로토타입</h3><ul><li>프로그래밍 언어에서 프로토타입이란 함수 원형</li><li>컴파일러에게 사용될 함수에 대한 정보를 미리 알리는 것</li><li>본문이 없다는 점을 제외하고 함수와 형태가 동일</li><li><u>반환 형식은 함수 정의에 지정된 반환 형식과 반드시 일치</u></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;1-라이브러리&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 프로토타입</title>
    <link href="https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/"/>
    <id>https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/</id>
    <published>2020-05-07T16:41:20.000Z</published>
    <updated>2020-05-07T16:41:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="프로토타입의-개념"><a class="markdownIt-Anchor" href="#프로토타입의-개념"></a> 프로토타입의 개념</h3><ul><li>함수 원형이라는 의미</li><li><u>컴파일러에게 사용될 함수에 대한 정보를 미리 알리는 것</u></li><li>본문이 없다는 점을 제외하고 함수와 형태가 동일</li><li><u>반환 형식은 함수 정의에 지정된 반환 형식과 반드시 일치</u></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;프로토타입의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로토타입" scheme="https://hyeonukdev.github.io/tags/%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 예외처리</title>
    <link href="https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC/</id>
    <published>2020-05-07T16:33:30.000Z</published>
    <updated>2020-05-07T16:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="예외처리의-개념"><a class="markdownIt-Anchor" href="#예외처리의-개념"></a> 예외처리의 개념</h3><ul><li><u>정상적인 실행을 방해하는 조건이나 상태</u>를 뜻</li><li>예외가 발생했을 때 해당 문제에 대한 <u>처리 루틴을 수행</u>하도록 하는 것</li><li>예외의 원인은 <u>컴퓨터 하드웨어 문제, 운영 체제의 설정 실수, 라이브러리 손상, 사용자의 입력 실수, 할당하지 못한 기억 장치 접근</u>이 있음</li></ul><h3 id="java에서의-예외처리"><a class="markdownIt-Anchor" href="#java에서의-예외처리"></a> Java에서의 예외처리</h3><ul><li>예외를 객체로 취급</li><li>try~catch 구문 이용<ul><li>try 블록 코드를 수행하다가 예외가 발생하면 예외를 처리하는 catch 블록으로 이동하여 예외 처리 코드를 실행하고 예외 발생 이후 코드는 실행 안됨</li></ul></li><li>catch 블록에서 선언한 변수는 해당 catch 블록에서만 유효</li><li>try~catch 안에 또 다른 try~catch 포함 가능</li></ul><h3 id="java의-주요-예외-객체"><a class="markdownIt-Anchor" href="#java의-주요-예외-객체"></a> Java의 주요 예외 객체</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0508_03.png" alt="Java의 주요 예외 객체" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;예외처리의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="예외처리" scheme="https://hyeonukdev.github.io/tags/%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 데이터입출력</title>
    <link href="https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5/"/>
    <id>https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5/</id>
    <published>2020-05-07T15:46:40.000Z</published>
    <updated>2020-05-07T15:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="c언어의-데이터-표준-입출력-함수"><a class="markdownIt-Anchor" href="#c언어의-데이터-표준-입출력-함수"></a> C언어의 데이터 표준 입출력 함수</h3><ul><li><u>키보드로 입력 받아 화면으로 출력</u>할 때 사용하는 함수</li><li>종류<ul><li>scanf()</li><li>getchar()</li><li>gets()</li><li>printf()</li><li>putchar()</li><li>puts()</li></ul></li></ul><h3 id="java언어의-데이터-표준-입출력"><a class="markdownIt-Anchor" href="#java언어의-데이터-표준-입출력"></a> Java언어의 데이터 표준 입출력</h3><ul><li>키보드로 입력 받은 값을 저장하고 화면에서 서식을 지정하여 출력할 때 사용하는 클래스와 메소드</li><li>표준 입력 관련 클래스<ul><li>Scanner</li></ul></li><li>표준 출력 관련 클래스와 메소드<ul><li>System.out.printf()</li></ul></li></ul><h3 id="scanf함수-사용형식"><a class="markdownIt-Anchor" href="#scanf함수-사용형식"></a> scanf()함수 사용형식</h3><ul><li><code>scanf(서식문자열, 변수의 주소)</code></li><li><code>scanf(&quot;%3d&quot;, &amp;a)</code></li><li>서식 문자열<ul><li>입력 받을 데이터의 데이터 타입 지정</li></ul></li><li>변수의 주소<ul><li>입력 받을 데이터의 테이터 주소 저장</li></ul></li><li>입력 받을 데이터의 자료형, 자릿수 지정 기능</li><li>한 번에 여러 개의 데이터 입력 가능</li><li>서식 문자열과 변수의 자료형은 일치해야 함</li></ul><h3 id="printf함수-사용형식"><a class="markdownIt-Anchor" href="#printf함수-사용형식"></a> printf()함수 사용형식</h3><ul><li><code>print(서식문자열, 변수)</code></li><li><code>printf(&quot;%-8.2f&quot;, 100.3)</code><ul><li>100.30vv(v는 빈칸)</li></ul></li><li>서식 문자열<ul><li>변수의 자ꅐ형에 맞는 서식문자열 입력</li></ul></li><li>변수<ul><li>서식문자열의 순서에 맞게 출력할 변수 입력</li></ul></li><li><code>%</code> 서식문자임을 지정</li><li><code>-</code> 왼쪽부터 출력</li><li><code>8</code> 출력자리수</li><li><code>2</code> 소수점 이하 2자리 지정</li><li><code>f</code> 실수로 출력</li></ul><h3 id="서식문자열"><a class="markdownIt-Anchor" href="#서식문자열"></a> 서식문자열</h3><ul><li>%d<ul><li>정수형 10진수 입출력시 지정</li></ul></li><li>%u<ul><li>부호 없는 정수형 10진수 입출력시 지정</li></ul></li><li>%o<ul><li>정수형 8진수 입출력시 지정</li></ul></li><li>%x<ul><li>정수형 16진수 입출력시 지정</li></ul></li><li>%c<ul><li>문자 입출력시 지정</li></ul></li><li>%s<ul><li>문자열 입출력시 지정</li></ul></li><li>%f<ul><li>소수점을 포함하는 실수 입출력시 지정</li></ul></li><li>%e<ul><li>지수형 실수 입출력시 지정</li></ul></li></ul><h3 id="제어문자"><a class="markdownIt-Anchor" href="#제어문자"></a> 제어문자</h3><ul><li>\n<ul><li>new line</li><li>커서 다음 줄 앞으로 이동</li></ul></li><li>\b<ul><li>backspace</li><li>커서를 왼쪽으로 한 칸 이동</li></ul></li><li>\t<ul><li>tab</li><li>커서를 일정 간격 띄움</li></ul></li><li>\r<ul><li>carriage return</li><li>커서를 현재 줄의 처음으로 이동</li></ul></li><li>\0<ul><li>null</li><li>널 문자를 출력</li></ul></li><li>\`<ul><li>single quote</li><li>작은 따옴표 출력</li></ul></li><li>\&quot;<ul><li>double quote</li><li>큰 따옴표 출력</li></ul></li><li>\\<ul><li>backslash</li><li>역 슬래시 출력</li></ul></li><li>\f<ul><li>form feed</li><li>한 페이지를 넘김</li></ul></li></ul><h3 id="c언어-기타-표준-입출력-함수"><a class="markdownIt-Anchor" href="#c언어-기타-표준-입출력-함수"></a> C언어 기타 표준 입출력 함수</h3><ul><li>입력<ul><li>getchar()<ul><li>키보드로 한 문자를 입력 받아 변수에 저장하는 함수</li></ul></li><li>gets()<ul><li>키보드로 문자열을 입력 받아 변수에 저장하는 함수</li></ul></li></ul></li><li>출력<ul><li>putchar()<ul><li>인수로 주어진 한 문자를 화면에 출력하는 함수</li></ul></li><li>puts()<ul><li>인수로 주어진 문자열을 화면에 출력한 후 커서를 자동으로 다음 줄 앞으로 이동하는 함수</li></ul></li></ul></li></ul><h3 id="java-표준-입력-사용-형식"><a class="markdownIt-Anchor" href="#java-표준-입력-사용-형식"></a> Java 표준 입력 사용 형식</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner scan1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">in_var = scan1.nextInt();</span><br></pre></td></tr></table></figure><ul><li>Scanner 클래스를 인스턴스화하여 scan1 객체 변수를 생성</li><li>System.in은 표준 입력장치 즉 키보드로 부터 값을 입력 받는 객체 변수 생성</li><li>scan1 객체변수의 nextInt() 메소드는 입력 값을 정수형으로 반환</li><li>in_var : 입력 받은 값을 저장할 변수</li></ul><h3 id="java-표준-출력-사용-형식"><a class="markdownIt-Anchor" href="#java-표준-출력-사용-형식"></a> Java 표준 출력 사용 형식</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(서식문자열, 변수);</span><br><span class="line">System.out.printf(<span class="string">"%-8.2f"</span>,<span class="number">100.3</span>);</span><br></pre></td></tr></table></figure><ul><li>Sytem 클래스의 서브 클래스인 out 클래스의 printf()메소드를 사용</li><li>printf() 메소드는 C언어의 printf() 함수의 사용법도 동일함</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;c언어의-데이터-표준-입출력-함수&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터입출력" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%85%EC%B6%9C%EB%A0%A5/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 라이브러리</title>
    <link href="https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/08/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%ED%99%9C%EC%9A%A9/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/</id>
    <published>2020-05-07T15:35:28.000Z</published>
    <updated>2020-05-07T15:35:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><ul><li>애플리케이션에 필요한 <u>라이브러리를 검색하고 선택</u></li><li>애플리케이션 구현을 위해 선택한 <u>라이브러리를 프로그래밍 언어 특성에 맞게 구성</u></li><li>선택한 라이브러리를 사용하여 <u>애플리케이션 구현에 적용</u></li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>라이브러리<ul><li>효율적인 프로그램 개발을 위해 필요한 프로그램을 모아 놓은 집합체로서, 프로그래밍 언어에 따라 일반적으로 도움말, 설치 파일, 샘플 코드 등을 제공</li></ul></li></ul><h3 id="라이브러리의-개념"><a class="markdownIt-Anchor" href="#라이브러리의-개념"></a> 라이브러리의 개념</h3><ul><li>프로그램을 효율적으로 개발할 수 있도록 <u>자주 사용하는 함수나 데이터들을 미리 만들어 모아 놓은 집합체</u></li><li>프로그래밍 언어에 따라 일반적으로 <u>도움말, 설치파일, 샘플 코드 등을 제공</u></li></ul><h3 id="라이브러리의-구성"><a class="markdownIt-Anchor" href="#라이브러리의-구성"></a> 라이브러리의 구성</h3><ol><li>도움말 : 라이브러리를 사용할 수 있도록 하는 도움말 문서</li><li>설치파일 : 라이브러리를 적용하기 위해 제공되는 설치 파일</li><li>샘플 코드 : 라이브러리를 이해하고 손쉽게 적용하기 위해 제공되는 샘플 소스코드</li></ol><h3 id="라이브러리-종류"><a class="markdownIt-Anchor" href="#라이브러리-종류"></a> 라이브러리 종류</h3><h4 id="1-표준-라이브러리"><a class="markdownIt-Anchor" href="#1-표준-라이브러리"></a> 1. 표준 라이브러리</h4><ul><li><u>프로그래밍 언어에 기볹거으로 포함</u>되어 있는 라이브러리</li><li><u>여러 종류의 모듈과 패키지를</u> 가지며, 표준라이브러리를 이용하면 <u>별도의 파일 설치 없이</u> 날짜와 시간 등의 다양한 기능 이용이 가능함</li></ul><h4 id="2-외부-라이브러리"><a class="markdownIt-Anchor" href="#2-외부-라이브러리"></a> 2. 외부 라이브러리</h4><ul><li><u>별도 파일을 설치해야함</u></li><li>누구나 개발하여 설치할 수 있으며 공유도 가능</li></ul><h3 id="모듈과-패키지"><a class="markdownIt-Anchor" href="#모듈과-패키지"></a> 모듈과 패키지</h3><h4 id="1-module-모듈"><a class="markdownIt-Anchor" href="#1-module-모듈"></a> 1. Module 모듈</h4><ul><li>하나의 기능이 한 개의 파일로 구현된 형태</li></ul><h4 id="2-package-패키지"><a class="markdownIt-Anchor" href="#2-package-패키지"></a> 2. Package 패키지</h4><ul><li>여러 개의 모듈을 한 개의 폴더에 묶어서 기능을 제공</li><li>패키지명과 모듈을 import하여 불러올 수 있음</li></ul><h4 id="3-c언어의-대표적인-표준라이브러리"><a class="markdownIt-Anchor" href="#3-c언어의-대표적인-표준라이브러리"></a> 3. C언어의 대표적인 표준라이브러리</h4><ul><li>라이브러리를 헤더 파일로 제공</li><li>헤어 파일을 함수들이 포함<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0508_01.png" alt="C언어의 대표적인 표준라이브러리" /></li></ul><h4 id="4-java언어의-대표적인-표준라이브러리"><a class="markdownIt-Anchor" href="#4-java언어의-대표적인-표준라이브러리"></a> 4. Java언어의 대표적인 표준라이브러리</h4><ul><li>라이브러리를 패키지에 포함하여 제공<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0508_02.png" alt="Java언어의 대표적인 표준라이브러리" /></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션에 필요한 &lt;u&gt;라이브러리를 검색하고 선택&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;애플
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="라이브러리" scheme="https://hyeonukdev.github.io/tags/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-07T14:59:50.000Z</published>
    <updated>2020-05-07T14:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="1-절차적-프로그래밍-언어"><a class="markdownIt-Anchor" href="#1-절차적-프로그래밍-언어"></a> 1. 절차적 프로그래밍 언어</h3><ul><li>일련의 <u>처리 절차를 정해진 문법에 따라 순서대로 기술</u>하는 언어</li><li>장점<ul><li>컴퓨터의 처리 구조와 유사하며 <u>실행속도가 빠름</u></li><li>같은 코드를 복사하지 않고 <u>다른 위치에서 호출하여 사용가능</u></li><li><u>모듈 구성이 용이하며</u> 구조적인 프로그래밍 가능</li></ul></li><li>단점<ul><li>프로그램을 분석하기 어려움</li><li><u>유지보수나 코드의 수정이 어려움</u></li></ul></li><li>종류<ul><li>C</li><li>COBOL</li><li>ALGOL</li><li>FORTRAN</li></ul></li></ul><h3 id="2-객체지향-프로그래밍-언어"><a class="markdownIt-Anchor" href="#2-객체지향-프로그래밍-언어"></a> 2. 객체지향 프로그래밍 언어</h3><ul><li><u>프로시저보다는 명령과 데이터로 구성된 객체를 중심</u>으로 하는 프로그래밍 기법</li><li>장점<ul><li><u>상속을 통함 <b>재사용과 시스템 확장</b>이 용이</u></li><li><u>코드의 재활용성</u>이 높음</li><li>현실 세계를 모형화하여 <u>사용자와 개발자가 쉽게 이해</u></li><li>대형 프로그램의 작성이 용이</li><li>소프트웨어 <u>개발 및 유지보수가 용이</u></li></ul></li><li>단점<ul><li>프로그래밍 구현을 지원해 주는 정형화된 분석 및 설계방법이 없음</li><li>구현 시 <u>처리 시간이 지연</u></li></ul></li><li>특징<ul><li>캡슐화</li><li>정보은닉</li><li>추상화</li><li>상속성</li><li>다형성</li></ul></li><li>종류<ul><li>C#</li><li>JAVA</li><li>C++</li></ul></li></ul><h3 id="3-스크립트-언어"><a class="markdownIt-Anchor" href="#3-스크립트-언어"></a> 3. 스크립트 언어</h3><ul><li>HTML 문서 안에 직접 프로그래밍 언어를 삽입하여 사용되며, 기계어로 컴파일 되지 않고 별도의 번역기가 소스를 분석하여 동작하는 언어</li><li>장점<ul><li><u>컴파일 없이 바로 실행</u>하므로 결과를 바로 확인가능</li><li>배우고 코딩하기 쉬움</li><li>개발시간이 짧음</li><li>소스코드를 쉽고 빠르게 수정할 수 있음</li></ul></li><li>단점<ul><li>코드를 읽고 해석해야 하므로 실행 속도가 느림</li><li><u>런타임 오류가 많이 발생</u></li></ul></li><li>클라이언트용 스크립트 언어<ul><li>JavaScript</li></ul></li><li>서버용 스크립트 언어<ul><li>ASP</li><li>JSP</li><li>PHP</li><li>Python</li></ul></li></ul><h3 id="4-선언형-언어"><a class="markdownIt-Anchor" href="#4-선언형-언어"></a> 4. 선언형 언어</h3><ul><li>명령형 언어가 문제를 해결하기 위한 방법을 기술한다면 선언형 언어는 프로그램이 수행해야 할 문제를 기술하는 언어</li><li>종류<ul><li>LISP</li><li>PROLOG</li><li>Haskell</li><li>SQL</li><li>HTML</li><li>XML</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;1-절차적-프로그래밍-언어&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 선언형 언어</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%84%A0%EC%96%B8%ED%98%95%EC%96%B8%EC%96%B4/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%84%A0%EC%96%B8%ED%98%95%EC%96%B8%EC%96%B4/</id>
    <published>2020-05-07T14:59:40.000Z</published>
    <updated>2020-05-07T14:59:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="선언형-언어의-개념"><a class="markdownIt-Anchor" href="#선언형-언어의-개념"></a> 선언형 언어의 개념</h3><ul><li>명령어 언어와 반대</li><li>프로그램이 수행해야 할 문제를 기술하는 언어</li><li>목표를 명시하고 알고리즘을 명시하지 않음</li><li>함수형 언어<ul><li>수학적 함수를 조합하여 문제를 해결하는 언어</li><li>적용형 언어라고 불림</li><li>재귀호출이 자주 이용되고 병렬처리에 유리</li></ul></li><li>논리형 언어<ul><li>기호 논리학에 기반을 둔 언어</li><li>선언적 언어라고 불림</li><li>반복문이나 선택문을 사용하지 않으며 비절차적 언어</li></ul></li></ul><h3 id="선언형-언어의-특징"><a class="markdownIt-Anchor" href="#선언형-언어의-특징"></a> 선언형 언어의 특징</h3><ul><li>알고리즘에 집중하여 이미 만들어진 것을 <u>선언을 통해 사용</u></li><li>구체적인 작동순서를 나열하지 않기 때문에 <u>오류가 적음</u></li><li><u>가독성이나 재사용이 좋음</u></li></ul><h3 id="선언형-언어의-종류"><a class="markdownIt-Anchor" href="#선언형-언어의-종류"></a> 선언형 언어의 종류</h3><ul><li>LISP<ul><li>인공지능 분야에 사용되는 언어</li><li>기본 구조가 연결 리스트 구조</li></ul></li><li>PROLOG<ul><li>논리학을 기초로 한 고급 언어</li><li>추론이나 리스트 처리등에 사용</li></ul></li><li>Haskell<ul><li>함수형 언어들을 통합 정리하며 만든 일반적인 순수 함수형 프로그램</li><li>코드가 간결하고 에러 발생 가능성이 낮음</li></ul></li><li>SQL<ul><li>관계형 데이터베이스 관리 시스템의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍언어</li></ul></li><li>HTML<ul><li>웹페이지 문서를 만들기 위해 사용되는 언어</li></ul></li><li>XML<ul><li>새로운 태그를 정의할 수 있으며, 문서의 내용과 이를 표현하는 방식이 독립적임</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;선언형-언어의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="선언형언어" scheme="https://hyeonukdev.github.io/tags/%EC%84%A0%EC%96%B8%ED%98%95%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 스크립트 언어</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%96%B8%EC%96%B4/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%96%B8%EC%96%B4/</id>
    <published>2020-05-07T14:51:40.000Z</published>
    <updated>2020-05-07T14:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="script-language-스크립트-언어의-개념"><a class="markdownIt-Anchor" href="#script-language-스크립트-언어의-개념"></a> Script Language 스크립트 언어의 개념</h3><ul><li>HTML 문서 안에 직접 프로그래밍 언어를 삽입하여 사용되며, 기계어로 컴파일 되지 않고 별도의 번역기가 소스를 분석하여 동작하는 언어</li><li>게시판, 상품 검색, 회원 가입 등과 같은 데이터베이스 처리 작업을 수행하기 위해 주로 사용</li><li>스크립트 언어는 <u>웹브라우저에서 해석되어 실행하는 클라이언트용 스크립트 언어와 서버에서 해석되어 실행된 후 결과만 클라이언트로 보내는 서버용 스크립트 언어로 구분</u></li><li>클라이언트용 스크립트 언어<ul><li>JavaScript</li></ul></li><li>서버용 스크립트 언어<ul><li>ASP</li><li>JSP</li><li>PHP</li><li>Python</li></ul></li></ul><h3 id="스크립트-언어의-장단점"><a class="markdownIt-Anchor" href="#스크립트-언어의-장단점"></a> 스크립트 언어의 장/단점</h3><ul><li>장점<ul><li><u>컴파일 없이 바로 실행</u>하므로 결과를 바로 확인가능</li><li>배우고 코딩하기 쉬움</li><li>개발시간이 짧음</li><li>소스코드를 쉽고 빠르게 수정할 수 있음</li></ul></li><li>단점<ul><li>코드를 읽고 해석해야 하므로 실행 속도가 느림</li><li><u>런타임 오류가 많이 발생</u></li></ul></li></ul><h3 id="스크립트-언어의-종류"><a class="markdownIt-Anchor" href="#스크립트-언어의-종류"></a> 스크립트 언어의 종류</h3><ul><li>JavaScript<ul><li>웹 브라우저에서 주로 사용되는 클라이언트용 스크립트 언어</li><li>폼 양식에서 필수 입력사항을 체크하는 용도로 많이 사용</li></ul></li><li>ASP; Active Server Page<ul><li>IIS 서버 측에서 동적으로 수행하는 페이지를 만들기 위해 마이크로 소프트에서 개발</li><li>Window 운영체제에서만 실행 가능한 프로그래밍 언어</li></ul></li><li>JSP; Java Server Page<ul><li>Java로 만들어진 서버용 스크립트 언어</li><li>Window, Linux등 다양한 운영체제에서 사용 가능</li></ul></li><li>PHP; Professional Hypertext Preprocessor<ul><li>서버용 스크립트 언어</li><li>배우기 쉬움</li></ul></li><li>Python<ul><li>객체지향 기능을 지원하는 대화형 인터프리터 언어로 플랫폼 독립적이고 문법이 간단하여 배우기 쉬움</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;script-language-스크립트-언어의-개념&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="스크립트언어" scheme="https://hyeonukdev.github.io/tags/%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 객체지향 프로그래밍 언어</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/</id>
    <published>2020-05-07T13:51:40.000Z</published>
    <updated>2020-05-07T13:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="object-oriented-객체지향-프로그래밍-언어의-개념"><a class="markdownIt-Anchor" href="#object-oriented-객체지향-프로그래밍-언어의-개념"></a> Object Oriented 객체지향 프로그래밍 언어의 개념</h3><ul><li>구조적 방식의 문제점을 극복하고 인간이 사고하는 방식대로 프로그램을 개발하려는 노력으로 탄생</li><li>현실 세계의 개체 Entity 를 기계의 부품처럼 하나의 객체 Object 로 만들어 <u>객체들을 조립해서 프로그램을 작성</u>할 수 있도록 한 프로그래밍 기법</li><li><u>프로시저보다는 명령과 데이터로 구성된 객체를 중심</u>으로 하는 프로그래밍 기법</li></ul><h3 id="객체지향-프로그래밍-언어의-장단점"><a class="markdownIt-Anchor" href="#객체지향-프로그래밍-언어의-장단점"></a> 객체지향 프로그래밍 언어의 장/단점</h3><ul><li>장점<ul><li><u>상속을 통함 <b>재사용과 시스템 확장</b>이 용이</u></li><li><u>코드의 재활용성</u>이 높음</li><li>현실 세계를 모형화하여 <u>사용자와 개발자가 쉽게 이해</u></li><li>대형 프로그램의 작성이 용이</li><li>소프트웨어 <u>개발 및 유지보수가 용이</u></li></ul></li><li>단점<ul><li>프로그래밍 구현을 지원해 주는 정형화된 분석 및 설계방법이 없음</li><li>구현 시 <u>처리 시간이 지연</u></li></ul></li></ul><h3 id="객체지향-프로그래밍의-특징"><a class="markdownIt-Anchor" href="#객체지향-프로그래밍의-특징"></a> 객체지향 프로그래밍의 특징</h3><ul><li>Encapsulation 캡슐화<ul><li><u>데이터(속성)와 데이터를 처리하는 함수를 하나로 묶는 것</u></li><li>캡슐화된 객체의 세부 내용이 외부에 은폐되어 변경이 발생할 때 오류의 파급 효과가 적음</li><li>캡슐화된 객체들은 <u>재사용이 용이</u></li></ul></li><li>Information Hiding 정보은닉<ul><li>다른 객체에게 자신의 <u>정보를 숨기고 자신의 연산만을 통하여 접근</u>을 허용하는 것</li></ul></li><li>Abstraction 추상화<ul><li>불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 모델화하는 것</li><li><u>공통 성질을 추출하여 슈퍼클래스를 설정하는 것</u></li></ul></li><li>Inheritance 상속성<ul><li><u>상위 클래스의 모든 속성과 메소드를 하위 클래스가 물려 받는 것</u></li></ul></li><li>Polymorphism 다형성<ul><li>동일한 이름의 메소드가 각 클래스마다 다른 사양으로 정의될 수 있음</li><li>다형성의 종류는 메소드 오버라이딩과 오버로딩이 있음</li></ul></li></ul><h3 id="객체지향-프로그래밍의-구성요소"><a class="markdownIt-Anchor" href="#객체지향-프로그래밍의-구성요소"></a> 객체지향 프로그래밍의 구성요소</h3><ul><li>Class 클래스<ul><li>객체의 타입을 정의하고 객체를 생성하는 틀</li></ul></li><li>Object 객체<ul><li>개체, 속성, 메소드로 구성된 클래스이 인스턴스</li></ul></li><li>Message 메시지<ul><li>객체간의 통신</li></ul></li></ul><h3 id="객체의-구성요소"><a class="markdownIt-Anchor" href="#객체의-구성요소"></a> 객체의 구성요소</h3><ul><li>Entity 개체<ul><li>현실 세계에 보이는 본질을 의미</li></ul></li><li>Attribute 속성<ul><li>자료 저장소 역할을 하며, 절차 지향 프로그래밍의 변수와 대응</li></ul></li><li>Method 메소드<ul><li>호출 단위를 의미하며, 절차지향 프로그래밍의 함수와 대응</li></ul></li></ul><h3 id="객체지향-프로그래밍-언어의-종류"><a class="markdownIt-Anchor" href="#객체지향-프로그래밍-언어의-종류"></a> 객체지향 프로그래밍 언어의 종류</h3><ul><li>C#<ul><li>마이크로소프트에서 개발한 객체지향 프로그래밍 언어로, 닷넷 프레임워크의 한 부분으로 만들어짐</li></ul></li><li>JAVA<ul><li>분산 네트워크 환경에서 적용이 가능하며, 멀티스레드 기능을 제공하여 여러 작업 동시 처리 가능</li><li>운영체제 및 하드웨어 독립적이며 이식성이 강함</li><li>캡슐화가 가능하고 재사용성이 높음</li></ul></li><li>C++<ul><li>C언어에 객체지향 개념을 적용한 언어</li><li>모든 문제를 객체로 모델링하여 표현</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;object-oriented-객체지향-프로그래밍-언어의-개념&quot;&gt;&lt;a class=&quot;m
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="객체지향프로그래밍언어" scheme="https://hyeonukdev.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
</feed>
