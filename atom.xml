<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Engineering</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyeonukdev.github.io/"/>
  <updated>2020-05-06T18:11:34.000Z</updated>
  <id>https://hyeonukdev.github.io/</id>
  
  <author>
    <name>Hyeonukdev</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>프로그래밍언어활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-06T18:11:34.000Z</published>
    <updated>2020-05-06T18:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="1-데이터-타입"><a class="markdownIt-Anchor" href="#1-데이터-타입"></a> 1. 데이터 타입</h3><ul><li>변수에 저장될 데이터 형식을 나타내는 것</li><li><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_02.png" alt="C/C++의 데이터 타입 크기 및 기억 범위" /></li></ul><h3 id="2-변수"><a class="markdownIt-Anchor" href="#2-변수"></a> 2. 변수</h3><ul><li>변수는 저장하고자 하는 어떠한 값이 있을 때, 그 값을 <u>주기억장치에 기억하기 위한 공간</u>을 의미</li><li>저장하는 값에 따라 <u>정수형, 실수형, 문자형</u> 등으로 구분</li><li>C언어 변수명 설정 규칙<ul><li>영문자, 숫자, 밑줄의 사용 가능</li><li>첫 글자는 영문자나 '_'로 시작해야하며 숫자 사용 불가</li><li>변수명에는 공백사용 불가</li><li>글자 수에 제한이 없음</li><li>영문자는 대소문자를 구분</li><li>변수명은 제어문, 자료형 등 예약어 사용 불가능</li></ul></li></ul><h3 id="3-연산자"><a class="markdownIt-Anchor" href="#3-연산자"></a> 3. 연산자</h3><ul><li>연산자는 프로그램 실행을 위해 연산을 표현하는 기호</li><li>연산자의 종류는 산술 연산자, 시프트 연산자, 관계 연산자, 논리 연산자</li><li>연산 표기법의 종류<ul><li>Prefix 전위 표기법 +a*bc</li><li>Infix 중위 표기법 a+(b*c)</li><li>Postfix 후위 표기법 abc*+</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;1-데이터-타입&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 연산자</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EC%97%B0%EC%82%B0%EC%9E%90/</id>
    <published>2020-05-06T17:40:53.000Z</published>
    <updated>2020-05-06T17:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="operator-연산자의-개념"><a class="markdownIt-Anchor" href="#operator-연산자의-개념"></a> Operator 연산자의 개념</h3><ul><li>연산자는 프로그램 실행을 위해 연산을 표현하는 기호</li><li>프로그램 내에서는 +,-와 같은 연산자 사용</li><li>연산자의 종류는 산술 연산자, 시프트 연산자, 관계 연산자, 논리 연산자</li></ul><h3 id="연산자-종류"><a class="markdownIt-Anchor" href="#연산자-종류"></a> 연산자 종류</h3><h4 id="1-산술-연산자"><a class="markdownIt-Anchor" href="#1-산술-연산자"></a> 1. 산술 연산자</h4><ul><li>일반적으로 사용되는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_03.png" alt="산술연산자" /></li></ul><h4 id="2-관계-연산자"><a class="markdownIt-Anchor" href="#2-관계-연산자"></a> 2. 관계 연산자</h4><ul><li>두 피연산자 사이의 크기를 비교하는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_04.png" alt="관계연산자" /></li></ul><h4 id="3-시프트-연산자"><a class="markdownIt-Anchor" href="#3-시프트-연산자"></a> 3. 시프트 연산자</h4><ul><li>비트를 이동시키는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_05.png" alt="시프트연산자" /></li></ul><h4 id="4-논리-연산자"><a class="markdownIt-Anchor" href="#4-논리-연산자"></a> 4. 논리 연산자</h4><ul><li>두 피연산자 사이의 논리적인 관계를 정의하는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_06.png" alt="논리연산자" /></li></ul><h4 id="5-비트-연산자"><a class="markdownIt-Anchor" href="#5-비트-연산자"></a> 5. 비트 연산자</h4><ul><li>0과 1의 각 자리에 대한 연산을 수행하며, 0또는 1의 결과값을 가짐<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_07.png" alt="비트연산자" /></li></ul><h3 id="연산자-우선순위"><a class="markdownIt-Anchor" href="#연산자-우선순위"></a> 연산자 우선순위</h3><h4 id="1-java의-연산자-우선순위"><a class="markdownIt-Anchor" href="#1-java의-연산자-우선순위"></a> 1. Java의 연산자 우선순위</h4><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_08.png" alt="Java의 연산자 우선순위" /></p><h4 id="2-c언어의-연산자-우선순위"><a class="markdownIt-Anchor" href="#2-c언어의-연산자-우선순위"></a> 2. C언어의 연산자 우선순위</h4><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_09.png" alt="C언어의 연산자 우선순위" /></p><h3 id="연산-표기법의-종류"><a class="markdownIt-Anchor" href="#연산-표기법의-종류"></a> 연산 표기법의 종류</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_10.png" alt="연산 표기법의 종류" /></p><h3 id="연산-표기법간-전환prefix-postfix"><a class="markdownIt-Anchor" href="#연산-표기법간-전환prefix-postfix"></a> 연산 표기법간 전환(Prefix -&gt; Postfix)</h3><ul><li>Prefix -&gt; Infix 변환(+a*bc)<ol><li>(연산자, 변수, 변수)를 찾은 후 (변수, 연산자, 변수) 순으로 변경<ul><li>+a(b*c)</li></ul></li><li>같은 방법으로 나머지도 변수, 연산자, 변수 순으로 변경 후 괄호제거<ul><li>a+b*c</li></ul></li></ol></li><li>Infix -&gt; Postfix 변환(a+b*v)<ol><li>(변수, 연산자, 변수) 중 우선순위가 높은 연산자를 (변수, 변수, 연산자) 순으로 변경<ul><li>a+(bc*)</li></ul></li><li>나머지도 변수, 변수, 연산자 순으로 변경 후 괄호 제거<ul><li>a(bc*)+</li><li>abc*+</li></ul></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;operator-연산자의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="연산자" scheme="https://hyeonukdev.github.io/tags/%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 변수</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EB%B3%80%EC%88%98/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EB%B3%80%EC%88%98/</id>
    <published>2020-05-06T17:30:53.000Z</published>
    <updated>2020-05-06T17:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="variable-변수의-개념"><a class="markdownIt-Anchor" href="#variable-변수의-개념"></a> Variable 변수의 개념</h3><ul><li>변수는 저장하고자 하는 어떠한 값이 있을 때, 그 값을 <u>주기억장치에 기억하기 위한 공간</u>을 의미</li><li>저장하는 값에 따라 <u>정수형, 실수형, 문자형</u> 등으로 구분</li></ul><h3 id="c언어-변수명-설정-규칙"><a class="markdownIt-Anchor" href="#c언어-변수명-설정-규칙"></a> C언어 변수명 설정 규칙</h3><ul><li>영문자, 숫자, 밑줄의 사용 가능</li><li>첫 글자는 영문자나 '_'로 시작해야하며 숫자를 사용할 수 없음</li><li>변수명에는 공백이나 밑줄이외의 특수문자(*,?,+,- 등) 사용 불가</li><li>글자 수에 제한이 없음</li><li>영문자는 대소문자를 구분</li><li>변수명은 제어문, 자료형 등 예약어 사용 불가능<ul><li>예약어<ul><li>제어문이나 데이터 타입 등 이미 용도가 정해져 있는 단어</li><li>do, for, while, char, double</li></ul></li></ul></li><li>변수 선언시 문장 끝에 세미콜론(’;’)을 붙여야 함</li></ul><h3 id="변수의-선언"><a class="markdownIt-Anchor" href="#변수의-선언"></a> 변수의 선언</h3><ul><li>변수는 일반적으로 다음과 같은 형식으로 선언</li><li><code>자료형 변수명 = 값;</code> - 자료형 : 변수에 저장될 자료의 형식을 지정 - 변수명 : 변수명 작성 규칙에 맞게 변수명 지정 - 값 : 변수를 선언하면서 초기값 지정<blockquote><p>int a = 10;<br />int : 자료의 형식을 정수형으로 지정<br />a : 변수명을 a로 지정<br />10 : 초기값을 10으로 지정</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;variable-변수의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="변수" scheme="https://hyeonukdev.github.io/tags/%EB%B3%80%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 데이터타입</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85/</id>
    <published>2020-05-06T17:29:53.000Z</published>
    <updated>2020-05-06T17:29:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><ul><li>응용소프트웨어 개발에 필요한 <u>프로그래밍 언어의 데이터 타입을 적용하여 변수를 사용</u></li><li><u>프로그래밍 언어의 연산자와 명령문을 사용</u>하여 애플리케이션에 필요한 기능을 정의하고 사용</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>변수<ul><li>어떤 값을 주기억 장치에 기억하기 위해서 사용하는 공간</li></ul></li><li>데이터 타입<ul><li>변수가 가질 수 있는 속성값의 길이 및 성절</li></ul></li><li>연산자<ul><li>데이터 처리를 위해 연산을 표현하는 기호로 +, - 등과 같은 연산자를 포함</li></ul></li></ul><h3 id="데이터-타입data-type의-개념"><a class="markdownIt-Anchor" href="#데이터-타입data-type의-개념"></a> 데이터 타입(Data Type)의 개념</h3><ul><li><u>데이터 타입은 변수에 저장될 데이터의 형식을 나타내는 것</u></li><li>변수에 값을 저장하기 전에 문자형, 정수형, 실수형 등 어떤 형식의 값을 저장할지 데이터 타입을 지정하여 변수를 선언</li></ul><h3 id="데이터-타입-유형"><a class="markdownIt-Anchor" href="#데이터-타입-유형"></a> 데이터 타입 유형</h3><ul><li>불린 타입<ul><li>조건이 <u>참인지 거짓인지 판단</u>할 때 사용</li></ul></li><li>문자 타입<ul><li><u>문자 하나를 저장</u>하여 작은 따옴표 사용</li></ul></li><li>문자열 타입<ul><li><u>나열된 여러 개의 문자를 저장</u>하여 큰 따옴표 사용</li></ul></li><li>정수 타입<ul><li><u>정수 값을 저장</u>하고자 할 때 사용</li></ul></li><li>부동 소숮점 타입<ul><li><u>소수점을 포함하는 실수 값을 저장</u>할 때 사용</li></ul></li><li>배열 타입<ul><li><u>여러 데이터를 하나로 묶어서 저장</u>할 때 사용</li></ul></li></ul><h3 id="java의-데이터-타입-크기-및-기억-범위"><a class="markdownIt-Anchor" href="#java의-데이터-타입-크기-및-기억-범위"></a> Java의 데이터 타입 크기 및 기억 범위</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_01.png" alt="Java의 데이터 타입 크기 및 기억 범위" /></p><h3 id="cc의-데이터-타입-크기-및-기억-범위"><a class="markdownIt-Anchor" href="#cc의-데이터-타입-크기-및-기억-범위"></a> C/C++의 데이터 타입 크기 및 기억 범위</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_02.png" alt="C/C++의 데이터 타입 크기 및 기억 범위" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;응용소프트웨어 개발에 필요한 &lt;u&gt;프로그래밍 언어의 데이터 타입을 적용하여 변수를
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터타입" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85/"/>
    
  </entry>
  
  <entry>
    <title>기본개발환경구축 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-06T17:24:06.000Z</published>
    <updated>2020-05-06T17:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본개발환경구축"><a class="markdownIt-Anchor" href="#기본개발환경구축"></a> 기본개발환경구축</h2><h3 id="1-웹서버"><a class="markdownIt-Anchor" href="#1-웹서버"></a> 1. 웹서버</h3><ul><li>웹 브라우저 클라이언트로부터 HTTP request를 받아 HTML과 같은 정적인 contents를 제공하는 프로그램과 해당 애플리케이션 서버가 설치된 컴퓨터</li><li>종류<ul><li>Apache</li><li>Nginx</li><li>IIS</li><li>GWS</li></ul></li><li>WAS 서버는 DB조회나 다양한 로직 처리를 요구하는 동적인 contents를 제공하기 위한 Application Server</li><li>종류<ul><li>Tomcat</li><li>Undertow</li><li>JEUS</li><li>Weblogic</li><li>Websphere</li></ul></li></ul><h3 id="2-db서버"><a class="markdownIt-Anchor" href="#2-db서버"></a> 2. DB서버</h3><ul><li>사용자, 다른 어플리케이션, 데이터베이스와 <u>상호작용</u>하여 데이터를 <u>저장하고 분석</u>하기 위한 컴퓨터 소프트웨어</li><li>종류<ul><li>Oracle</li><li>DB2</li><li>Microsoft SQL Server</li><li>MySQL</li><li>MongoDB</li></ul></li><li>DB서버 고려사항<ul><li>가용성</li><li>성능</li><li>기술지원</li><li>상호호환성</li><li>구축비용</li></ul></li></ul><h3 id="3-패키지"><a class="markdownIt-Anchor" href="#3-패키지"></a> 3. 패키지</h3><ul><li>패키지 방식 개발은 여러 성공사례 노하우를 기반으로 만들어진 <u>개발된 제품을 이용</u>하여 시스템을 구축하는 방식</li><li>장점<ul><li>국제 및 산업계 표준으로 장착된 비즈니스 프로세스 적용</li><li>품질이 검증된 안정적인 시스템 구축 가능</li><li>개발 기간의 단축으로 비용절감 효과</li></ul></li><li>단점<ul><li>사용자 요구사항에 대한 대처가 쉽지 않음</li><li>사용자의 프로세스 개선의 저항 발생</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본개발환경구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본개발환경구축&quot;&gt;&lt;/a&gt; 기본개발환경구축&lt;/h2&gt;
&lt;h3 id=&quot;1-웹서버&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-웹서버&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="기본개발환경구축" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>기본개발환경구축 - 패키지</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%8C%A8%ED%82%A4%EC%A7%80/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%8C%A8%ED%82%A4%EC%A7%80/</id>
    <published>2020-05-06T16:34:25.000Z</published>
    <updated>2020-05-06T16:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본개발환경구축"><a class="markdownIt-Anchor" href="#기본개발환경구축"></a> 기본개발환경구축</h2><h3 id="package-패키지의-개녕"><a class="markdownIt-Anchor" href="#package-패키지의-개녕"></a> Package 패키지의 개녕</h3><ul><li>패키지 방식 개발은 여러 성공사례 노하우를 기반으로 만들어진 <u>개발된 제품을 이용</u>하여 시스템을 구축하는 방식</li><li><u>사용자의 기능 요구사항을 70%이상 충족</u>시키는 패키지SW가 있을 경우 패키지 SW방식이 적합</li><li><u>현존 시스템과 상호 연동 및 연계를 고려</u>해야 함</li><li>패키지를 통한 응용시스템 개발은 패키지 <u>커스터마이징 방법론</u>에 따라 진행</li></ul><h3 id="패키지-개발의-장점"><a class="markdownIt-Anchor" href="#패키지-개발의-장점"></a> 패키지 개발의 장점</h3><ul><li>기본적으로 필요한 기능이 사전에 모두 제공되며 <u>국제 및 산업계 표준</u>으로 장착된 <u>비즈니스 프로세스 적용</u>이 가능</li><li>품질이 검증된 우수한 패키지 SW의 사용으로 <u>안정적인 시스템 구축</u></li><li>전문업체의 지속적인 업그레이드로 <u>최신의 제품과 기능을 사용</u></li><li>개발 기간의 단축으로 <u>비용절감 효과</u></li><li>패키지SW 개발업체 관리가 용이</li></ul><h3 id="패키지-개발의-단점"><a class="markdownIt-Anchor" href="#패키지-개발의-단점"></a> 패키지 개발의 단점</h3><ul><li>요구사항을 패키지SW가 모두 수용하지 않기 때문에 <u>사용자 요구사항에 대한 대처가 쉽지 않음</u></li><li>사용자의 업무 프로세스를 패키지SW의 업무프로세스에 맞춰야 할 경우 <u>프로세스 개선의 저항발생으로 이어질 가능성 존재</u></li><li>고객 요구사항이 까다롭거나 특수조건일 경우 <u>&quot;Buy &amp; Build&quot;</u>형식으로 구축할 수 있음</li></ul><h3 id="구축-및-운영-절차"><a class="markdownIt-Anchor" href="#구축-및-운영-절차"></a> 구축 및 운영 절차</h3><h4 id="1-패키지-방식의-구축-절차"><a class="markdownIt-Anchor" href="#1-패키지-방식의-구축-절차"></a> 1. 패키지 방식의 구축 절차</h4><ol><li>요구사항에 맞춰 <u>커스터마이징</u> 수행</li><li>개별단위별 <u>단계쩍 개발 방법 적용</u></li><li>고객의 검수와 공식적 <u>통합테스트 수행</u></li><li><u>매뉴얼 작성</u> 및 패키지 전개계획 수립</li></ol><h4 id="2-패키지-방식의-운영-절차"><a class="markdownIt-Anchor" href="#2-패키지-방식의-운영-절차"></a> 2. 패키지 방식의 운영 절차</h4><ol><li>패키지를 <u>운영 환경에 전개</u></li><li><u>사용자 테스트</u>를 준비/시정요구사항 조치</li><li>유지보수 <u>운영 매뉴얼 작성</u></li><li>프로젝트 종료 위한 <u>개발완료보고서 작성</u></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본개발환경구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본개발환경구축&quot;&gt;&lt;/a&gt; 기본개발환경구축&lt;/h2&gt;
&lt;h3 id=&quot;package-패키지의-개녕&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="기본개발환경구축" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="패키지" scheme="https://hyeonukdev.github.io/tags/%ED%8C%A8%ED%82%A4%EC%A7%80/"/>
    
      <category term="Package" scheme="https://hyeonukdev.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>기본개발환경구축 - DB서버</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/DB%EC%84%9C%EB%B2%84/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/DB%EC%84%9C%EB%B2%84/</id>
    <published>2020-05-06T16:03:43.000Z</published>
    <updated>2020-05-06T16:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본개발환경구축"><a class="markdownIt-Anchor" href="#기본개발환경구축"></a> 기본개발환경구축</h2><h3 id="db서버-정의"><a class="markdownIt-Anchor" href="#db서버-정의"></a> DB서버 정의</h3><ul><li>사용자, 다른 어플리케이션, 데이터베이스와 <u>상호작용</u>하여 데이터를 <u>저장하고 분석</u>하기 위한 컴퓨터 소프트웨어</li><li>주요기능<ul><li>데이터베이스 생성</li><li>조회</li><li>변경</li></ul></li></ul><h3 id="db서버-종류-및-특징"><a class="markdownIt-Anchor" href="#db서버-종류-및-특징"></a> DB서버 종류 및 특징</h3><ul><li>대규모 데이터의 안정적 처리<ul><li>Oracle<ul><li>저작자 : Oracle</li><li>상용</li></ul></li><li>DB2<ul><li>저작자 : IBM</li><li>상용</li></ul></li></ul></li><li>중소 규모 데이터의 안정적 처리<ul><li>Microsoft SQL Server<ul><li>저작자 : Microsoft</li><li>상용</li></ul></li></ul></li><li>오픈소스<ul><li>MySQL<ul><li>저작자 : MySQLAB</li><li>상용 또는 GPL</li><li>오픈소스 RDBMS</li></ul></li><li>Mongo DB<ul><li>저작자 : MongoDB Inc</li><li>GNU AGPL v3.0</li><li>NoSQL 데이터베이스</li></ul></li><li>Redis<ul><li>저작자 : Salvatore Sanfilippo</li><li>BSD</li><li>메모리</li><li>키-값 데이터베이스</li></ul></li></ul></li><li>임베디드 데이터베이스<ul><li>SQLite<ul><li>저작자 : D.Richard Hipp</li><li>Public Domain</li></ul></li></ul></li><li>Query Caching 기능</li></ul><h3 id="db서버-고려사항"><a class="markdownIt-Anchor" href="#db서버-고려사항"></a> DB서버 고려사항</h3><ul><li>가용성<ul><li>장기간 시스템을 운영할 때 장애 발생 가능성</li><li>DBMS의 버그 등으로 인한 패치 설치를 위한 재가동</li><li>백업 및 복구 편의성</li><li>DBMS 이중화 및 복제 지원</li></ul></li><li>성능<ul><li>대규모 데이터 처리 기능</li><li>대량 거래 처리 기능</li><li>다양한 튜닝 옵션 지원</li><li>비용 기반 최적화 지원 및 설정의 최소화</li></ul></li><li>기술 지원<ul><li>공급 벤더들의 안정적인 기술 지원</li><li>다수의 사용자들 간의 정보 공유</li><li>오픈 소스 여부</li></ul></li><li>상호 호환성<ul><li>설치 가능한 운영체제 종류</li><li>다양한 운영체제에 지원되는 JDBC, ODBC</li></ul></li><li>구축 비용<ul><li>라이선스 정책 및 비용</li><li>유지 및 관리 비용</li><li>총 소유 비용 : TCO</li></ul></li></ul><h4 id="db구성의-장점"><a class="markdownIt-Anchor" href="#db구성의-장점"></a> DB구성의 장점</h4><ol><li>데이터 중복의 최소화</li><li>여러 사용자에 의한 데이터 공유</li><li>데이터 내용의 일관성 유지</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본개발환경구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본개발환경구축&quot;&gt;&lt;/a&gt; 기본개발환경구축&lt;/h2&gt;
&lt;h3 id=&quot;db서버-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#db서버
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="기본개발환경구축" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="DB서버" scheme="https://hyeonukdev.github.io/tags/DB%EC%84%9C%EB%B2%84/"/>
    
  </entry>
  
  <entry>
    <title>기본개발환경구축 - 웹서버</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%EC%9B%B9%EC%84%9C%EB%B2%84/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%EC%9B%B9%EC%84%9C%EB%B2%84/</id>
    <published>2020-05-06T15:45:50.000Z</published>
    <updated>2020-05-06T15:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본개발환경구축"><a class="markdownIt-Anchor" href="#기본개발환경구축"></a> 기본개발환경구축</h2><ul><li><u>웹 서버, DB 서버</u>등 응용개발에 필요한 기반 서버를 설치하고 운용</li><li><u>패키지</u> 개발 방식의 개념과 장단점을 이해하고 구축 및 운영 절차를 이해</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>Package 패키지 개발<ul><li>여러 성공사례의 노하우를 기반으로 개발된 제품을 이용하여 시스템을 구축하는 방식</li></ul></li></ul><h2 id="웹서버"><a class="markdownIt-Anchor" href="#웹서버"></a> 웹서버</h2><h3 id="정적static과-동적dynamic-웹-페이지"><a class="markdownIt-Anchor" href="#정적static과-동적dynamic-웹-페이지"></a> 정적(Static)과 동적(Dynamic) 웹 페이지</h3><ul><li>Static Pages<ul><li>Web Server는 파일 경로 이름을 받아 경로와 일치하는 File Contents를 반환하며 항상 동일한 페이지를 반환</li><li>image, html, css, javascript 파일 등 웹서버 저장 파일</li></ul></li><li>Dynamic Pages<ul><li>인자의 내용에 맞게 동적인 Contents를 반환</li><li>Client의 request를 해석, 데이터를 가공한 페이지 response</li></ul></li><li><img src="https://gmlwjd9405.github.io/images/web/static-vs-dynamic.png" alt="정적과 동적 웹 방식" /></li></ul><h3 id="web-server-웹-서버"><a class="markdownIt-Anchor" href="#web-server-웹-서버"></a> Web Server 웹 서버</h3><ul><li>개념<ul><li>하드웨어 : Web Server가 설치되어 있는 컴퓨터</li><li>소프트웨어 : 웹 브라우저 클라이언트로부터 HTTP request를 받아 정적인 contents를 제공하는 프로그램</li></ul></li><li>기능<ul><li>HTTP 프로토콜을 기반으로 하여 클라이언트의 요청을 서비스</li><li><u>WAS를 거치지 않음 -&gt; 저장되어 있는 정적 contents를 제공</u></li><li><u>WAS를 거침 -&gt; 동적인 contents를 제공</u>을 위해 <u>ASP, JSP, PHP등 서버 사이트 스크립트 언어</u>가 request를 WAS에 전달하고, 처리한 결과를 Client에게 Response</li></ul></li><li>주요 제품<ul><li>Apache</li><li>Nginx</li><li>MS-IIS</li><li>Google-GWS</li></ul></li></ul><h3 id="was-web-application-server-서버"><a class="markdownIt-Anchor" href="#was-web-application-server-서버"></a> WAS; Web Application Server 서버</h3><ul><li>개념<ul><li><u>DB 조회나 다양한 로직 처리를 요구하는 동적인 contents를 제공</u>하기 위한 Application Server</li><li>HTTP를 통해 어플리케이션을 수행해주는 <u>미들웨어</u></li><li>WAS = Web Server + Web Container</li></ul></li><li>기능<ul><li>ASP, JSP, PHP, Python 등 서버 사이드 스크립트 언어 활용</li><li>프로그램 실행 환경과 <u>DB 접속 기능</u></li><li>다수의 트랜잭션 관리 기능</li><li>다양한 로직 수행</li></ul></li><li>주요 제품<ul><li>Tomcat</li><li>Undertow</li><li>JEUS</li><li>Weblogic</li><li>Websphere</li></ul></li></ul><h3 id="스크립트-언어-종류"><a class="markdownIt-Anchor" href="#스크립트-언어-종류"></a> 스크립트 언어 종류</h3><ul><li>ASP; Active Server Page<ul><li>IIS 서버 측에서 동적으로 수행하는 페이지를 만들기 위해 마이크로소프트에서 개발</li><li>Window 운영체제에서만 실행 가능한 프로래밍 언어</li></ul></li><li>JSP; Java Server Page<ul><li>JAVA로 만들어진 서버용 스크립트 언어</li><li>Window, Linux 등 다양한 운영체제에서 사용 가능</li></ul></li><li>PHP; Professinal Hypertext Preprocessor<ul><li>서버용 스크립트 언어</li><li>Window, Linux, Unix 운영체제에서 사용 가능</li><li>배우기 쉬움</li></ul></li><li>Python<ul><li>객체지향 기능을 지원하는 대화형 인터프리터 언어로 플랫폼이 독립적이고 문법이 간단</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본개발환경구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본개발환경구축&quot;&gt;&lt;/a&gt; 기본개발환경구축&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;웹 서버, DB 서버&lt;/u&gt;등 응용개발에 필요한 기반 서버를 설치하고 운용&lt;/li
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="기본개발환경구축" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="웹서버" scheme="https://hyeonukdev.github.io/tags/%EC%9B%B9%EC%84%9C%EB%B2%84/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-05T07:51:21.000Z</published>
    <updated>2020-05-05T07:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="1-인터넷-구성의-개념"><a class="markdownIt-Anchor" href="#1-인터넷-구성의-개념"></a> 1. 인터넷 구성의 개념</h3><ul><li><u>TCP/IP 프로토콜을 기반으로 전세계</u> 수 많은 네트워크들이 연결된 광범위한 컴퓨터 통신망</li><li>장비 종류<ul><li>게이트웨이</li><li>라우터</li><li>리피터</li><li>허브</li><li>랜 카드</li><li>브리지</li><li>스위치</li></ul></li></ul><h3 id="2-네트워크-7계층"><a class="markdownIt-Anchor" href="#2-네트워크-7계층"></a> 2. 네트워크 7계층</h3><ul><li>국제 표준화 기구인 ISO에서 다른 시스템간 통신을 위해 <u>네트워크 구조를 제시한 기본 모델</u></li><li><img src="https://baekjungho.github.io/images/posts/201904/osi.jpg" alt="OSI 7 Layer" /></li></ul><h3 id="3-네트워크-프로토콜"><a class="markdownIt-Anchor" href="#3-네트워크-프로토콜"></a> 3. 네트워크 프로토콜</h3><ul><li>프로토콜은 서로 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화 시켜 놓은 통신 규약</li><li>TCP/IP 4계층<ul><li>네트워크 액세스</li><li>인터넷</li><li>전송</li><li>응용</li></ul></li><li>프로토콜의 기본 요소<ul><li>구문</li><li>의미</li><li>시간</li></ul></li><li>라우팅 프로토콜<ul><li>RIP</li><li>IGRP</li><li>OSPF</li><li>BGP</li></ul></li><li><img src="https://lh3.googleusercontent.com/proxy/qnU4O0x68NqJJyY112t2ihbFPIivUIA2UwRHRQ1xIFbfXsWmTtK3UnIlsnaze9a_msgiKEHJS8-wQOlF1_u57v_NXuNRTfvDD55_UjDCtucm5OKLLrsWnGM4mVlpDE6sY9UjWAQGQOFcr4wUa94lDgtNnJrUVCw" alt="OSI 7 Layer" /></li></ul><h3 id="4-ip"><a class="markdownIt-Anchor" href="#4-ip"></a> 4. IP</h3><ul><li>OSI 7 계층의 네트워크 계층에서 <u>호소트의 주소지정과 패킷분할 및 조립기능 담당</u></li><li><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0505_02.png" alt="IPv4 와 IPv6 주소 비교" /></li></ul><h3 id="5-tcpudp"><a class="markdownIt-Anchor" href="#5-tcpudp"></a> 5. TCP/UDP</h3><ul><li>OSI 7계층의 <u>전송계층</u>에서 CRC체크와 재전송 기능을 통해 <u><b>신뢰성</b>있는 연결형 서비스 제공</u></li><li>TCP 대표 서비스<ul><li>FTP</li><li>Telnet</li><li>Http</li><li>SMTP</li><li>POP</li><li>IMAP</li></ul></li><li>UDP는 비연결성이고 신뢰성 없는 데이터 전송</li><li>UDP는 대표 서비스<ul><li>SNMP</li><li>DNS</li><li>TFTP</li><li>NFS</li><li>NETBIOS</li><li>인터넷 게임</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;1-인터넷-구성의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - TCP/UDP</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/TCP_UDP/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/TCP_UDP/</id>
    <published>2020-05-05T07:33:39.000Z</published>
    <updated>2020-05-05T07:33:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="tcp-transmission-control-protocol-의-개념"><a class="markdownIt-Anchor" href="#tcp-transmission-control-protocol-의-개념"></a> TCP; Transmission Control Protocol 의 개념</h3><ul><li>OSI 7계층의 <u>전송계층</u>에서 CRC체크와 재전송 기능을 통해 <u><b>신뢰성</b>있는 연결형 서비스 제공</u><ul><li>연결형 서비스<ul><li>송수신 측간을 논리적으로 연결한 후 데이터를 전송하는 방식</li></ul></li></ul></li><li>Flow Control 기능을 수행하여 단계별 데이터 전송 상황을 체크</li><li><u>논리적인 1:1 가상 회선을 지원</u>하여 해당 경로로만 데이터 전달</li><li>기능<ul><li>패킷의 다중화</li><li>순서 제어</li><li>오류 제어</li><li>흐름 제어</li></ul></li><li>대표서비스<ul><li>FTP</li><li>Telnet</li><li>Http</li><li>SMTP</li><li>POP</li><li>IMAP</li></ul></li><li>TCP 헤더 정보<ul><li>Souce/Destination Port</li><li>Sequence Number</li><li>Acknowledge Number</li><li>Cheksum</li></ul></li><li><img src="https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&amp;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F223C0D4957286ABC24" alt="TCP 구조" /></li></ul><h3 id="udp-user-datagram-protocol의-개념"><a class="markdownIt-Anchor" href="#udp-user-datagram-protocol의-개념"></a> UDP; User Datagram Protocol의 개념</h3><ul><li>OSI 7계층의 <u>전송계층</u>에서 데이터 전송 전에 연결을 설정하지 않는 <u>비연결형 서비스</u>를 제공</li><li><u><b>비신뢰성</b> 데이터 전송</u></li><li>하나의 송신 정보를 <u>다수의 인원이 수신</u>해야할 경우 UDP 사용</li><li>대표 서비스<ul><li>SNMP</li><li>DNS</li><li>TFTP</li><li>NFS</li><li>NETBIOS</li><li>인터넷 게임</li></ul></li><li>UDP 헤더 포함 정보<ul><li>Source</li><li>Destination Port</li><li>Length</li><li>Cheksum</li></ul></li><li><img src="https://4.bp.blogspot.com/-rUej079_r6U/WeOMoP6xilI/AAAAAAAABCM/MUbB6qZGoZwIbuPVJPw-C1SuneOigpLCgCLcBGAs/s1600/UDP-Header.png" alt="UDP 구조" /></li></ul><h3 id="tcp와-udp-차이점"><a class="markdownIt-Anchor" href="#tcp와-udp-차이점"></a> TCP와 UDP 차이점</h3><ul><li>TCP<ul><li>데이터 전송 전 <b>연결설정</b></li><li><b>1:1</b> 전송</li><li><b>단계별</b> 데이터 전송</li><li><b>신뢰성</b>있는 데이터 전송</li><li>등기 우편물</li></ul></li><li>UDP<ul><li>데이터 전송 전 연결 <b>미설정</b></li><li><b>1:다</b> 전송</li><li>데이터 전송</li><li><b>비 신뢰성</b> 데이터 전송</li><li>소포 우편물<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0505_03.png" alt="TCP와 UDP 차이점" /></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;tcp-transmission-control-protocol-의-개념&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="TCP_UDP" scheme="https://hyeonukdev.github.io/tags/TCP-UDP/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - IP</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/IP/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/IP/</id>
    <published>2020-05-05T07:07:52.000Z</published>
    <updated>2020-05-05T07:07:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="ip-internet-protocol-의-개념"><a class="markdownIt-Anchor" href="#ip-internet-protocol-의-개념"></a> IP; Internet Protocol 의 개념</h3><ul><li>OSI 7 계층의 네트워크 계층에서 <u>호소트의 주소지정과 패킷분할 및 조립기능 담당</u></li><li>데이터그램을 기반으로 <u>비연결형 서비스 제공</u><ul><li>비연결형통신<ul><li>송수신 측간에 논리적 연결 없이 데이터를 독립적으로 전송하는 방식</li></ul></li></ul></li><li>IP 헤더의 길이는 최소 20Byte ~ 60Byte</li><li>IP 헤더 포함 정보<ul><li>Version</li><li>Header Length</li><li>Total Packet Length</li><li>Header</li><li>Checksum</li><li>Source IP Address</li><li>Destination IP 주소</li></ul></li><li><img src="https://www.gatevidyalay.com/wp-content/uploads/2018/09/IPv4-Header-1.png" alt="IPv4 Header" /></li></ul><h3 id="ipv4-와-ipv6-주소-비교"><a class="markdownIt-Anchor" href="#ipv4-와-ipv6-주소-비교"></a> IPv4 와 IPv6 주소 비교</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0505_02.png" alt="IPv4 와 IPv6 주소 비교" /></p><h3 id="subnetting-서브네팅"><a class="markdownIt-Anchor" href="#subnetting-서브네팅"></a> Subnetting 서브네팅</h3><ul><li>할당된 네트워크 주소를 다시 여러 개의 작은 네트워크로 나누어 사용</li><li>IPv4기준으로 4Byte 주소 중 네트워크 주소와 호스트 주소를 구분하기 위한 비트를 <u>Subment Maks 서브넷 마스크</u>라고 함</li></ul><h3 id="domain-name-도메인-네임"><a class="markdownIt-Anchor" href="#domain-name-도메인-네임"></a> Domain Name 도메인 네임</h3><ul><li>숫자로 된 IP주소를 사람이 이해하기 쉬운 문자 형태로 표현 한 것</li><li><code>호스트 컴퓨터이름.소속기관이름.소속기관종류.소속국가명</code> 순으로 구성되며 왼쪽에서 오른쪽으로 갈수록 상위 도메인</li><li>문자로 된 도메인 네임을 IP주소로 변환하는 역할을 담당하는 시스템은 DNS; Domain Name System 서버</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;ip-internet-protocol-의-개념&quot;&gt;&lt;a class=&quot;markdo
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="IP" scheme="https://hyeonukdev.github.io/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 네트워크 7계층</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC7%EA%B3%84%EC%B8%B5/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC7%EA%B3%84%EC%B8%B5/</id>
    <published>2020-05-05T05:33:01.000Z</published>
    <updated>2020-05-05T05:33:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="osi-open-system-interconnection-참조-모델-개요"><a class="markdownIt-Anchor" href="#osi-open-system-interconnection-참조-모델-개요"></a> OSI; Open System Interconnection 참조 모델 개요</h3><ul><li>국제 표준화 기구인 ISO에서 다른 시스템간 통신을 위해 <u>네트워크 구조를 제시한 기본 모델</u></li><li><u>데이터 통신 시 필요한 장비 및 처리 방법 등을 7단계로 표준화</u></li><li><img src="https://baekjungho.github.io/images/posts/201904/osi.jpg" alt="OSI 7 Layer" /></li><li><img src="https://lh3.googleusercontent.com/proxy/icCZleoAKcuSSkDhGQA1C-6Odmghiv2dVpVNg0WZZzdOgfSFuppsNMG0vtyNDHeGhqFPEw4TyHS74sx7-rIO3sSz2Gox6_t1Np7DRXY1rwoJPy6zpFTiNSCdymZkSbhRw9zzsX4CKgW6aOB5mpl7aPGEK-HWctvJGd08MJ911j4WbeKPVktE0s3drWn1h_9YOmjH-vYHDP5CY7orVuu1gmkUM58nU4XJXgLNa77_o2FFg_uTHdDRhEknJ-uZDw" alt="OSI 7 Layer" /></li></ul><h3 id="osi-참조-모델의-목적"><a class="markdownIt-Anchor" href="#osi-참조-모델의-목적"></a> OSI 참조 모델의 목적</h3><ul><li>서로 다른 시스템 간을 상호 접속하기 위한 개념 규정</li><li>OSI 규격을 개발하기 위한 범위 정립</li><li>관련 규정의 적합성을 조절하기 위한 공통적인 기반 제공</li></ul><h3 id="osi-참조-모델의-계층별-데이터-단위"><a class="markdownIt-Anchor" href="#osi-참조-모델의-계층별-데이터-단위"></a> OSI 참조 모델의 계층별 데이터 단위</h3><ul><li>프로토콜 데이터 단위 PDU; Protocol Data Unit<ul><li>7계층 응용 계층 : 메시지(Message)</li><li>6계층 표현 계층 : 메시지(Message)</li><li>5계층 세션 계층 : 메시지(Message)</li><li>4계층 전송 계층 : 세그먼트(Segment)</li><li>3계층 네트워크 계층 : 패킷(Packet)</li><li><u>2계층 데이터링크 계층 : 프레임(Frame)</u></li><li>1계층 물리 계층 : 비트(bit)</li></ul></li></ul><h3 id="osi-7-layer-계층별-기능"><a class="markdownIt-Anchor" href="#osi-7-layer-계층별-기능"></a> OSI 7 Layer 계층별 기능</h3><h4 id="1-physical-layer-물리-계층"><a class="markdownIt-Anchor" href="#1-physical-layer-물리-계층"></a> 1. Physical Layer 물리 계층</h4><ul><li>전송에 필요한 두 장치 간의 실제 접속과 절단 등 <u>기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의</u></li><li><u>물리적 전송매체와 전송 신호방식</u>을 정의</li><li>관련 장비<ul><li><u>허브</u></li><li><u>리피터</u></li></ul></li></ul><h4 id="2-data-link-layer-데이터링크-계층"><a class="markdownIt-Anchor" href="#2-data-link-layer-데이터링크-계층"></a> 2. Data Link Layer 데이터링크 계층</h4><ul><li>두 개의 개발 시스템들 간 <u>속도 차이</u>를 해결하기 위한 <u>흐름 제어</u></li><li>프레임의 시작과 끝을 구분하기 위한 <u>프레임의 동기화</u></li><li>오류의 검출과 회복을 위한 <u>오류 제어</u></li><li>프레임의 순서적 전송을 위한 <u>순서 제어</u></li><li>관련 장비<ul><li><u>랜카드</u></li><li><u>브리지</u></li><li><u>스위치</u></li></ul></li></ul><h4 id="3-network-layer-네트워크-계층"><a class="markdownIt-Anchor" href="#3-network-layer-네트워크-계층"></a> 3. Network Layer 네트워크 계층</h4><ul><li>개방 시스템들 간의 <u>네트워크 연결을 설정, 유지, 해제</u>하는 기능과 <u>경로 설정, 데이터 교화 및 중계, 트래픽 제어, 패킷 정보 전송</u></li><li>관련 장비<ul><li><u>라우터</u></li></ul></li></ul><h4 id="4-transport-layer-전송-계층"><a class="markdownIt-Anchor" href="#4-transport-layer-전송-계층"></a> 4. Transport Layer 전송 계층</h4><ul><li>논리적 안정과 균일한 데이터 전송 서비스를 제공함으로써 <u>종단시스템간에 투명한 데이터 전송을 가능하게 함</u></li><li>종단 시스템간 전송 연결설정, 데이터 전송, 연결해제 기능과 오류 제어, 흐름제어 수행</li><li>TCP, UDP의 표준</li><li>관련 장비<ul><li><u>게이트웨이</u></li></ul></li></ul><h4 id="5-session-layer-세션-계층"><a class="markdownIt-Anchor" href="#5-session-layer-세션-계층"></a> 5. Session Layer 세션 계층</h4><ul><li>송/수신 측 간의 관련성을 유지하고 대화 제어 담당</li></ul><h4 id="6-presentation-layer-표현-계층"><a class="markdownIt-Anchor" href="#6-presentation-layer-표현-계층"></a> 6. Presentation Layer 표현 계층</h4><ul><li>응용계층으로부터 받은 데이터를 세션 계층에 보내기 전에 통신에 적당한 형태로 변환하고, 세션 계층에서 받은 데이터는 응용 계층에 맞게 변환하는 기능</li><li>코드변환, 데이터 암호화, 데이터 압축, 구문 검색, <u>정보형식 변환</u></li></ul><h4 id="7-application-layer-응용-계층"><a class="markdownIt-Anchor" href="#7-application-layer-응용-계층"></a> 7. Application Layer 응용 계층</h4><ul><li>응용 프로세스와 직접 관계하여 <u>일반적인 응용 서비스를 수행</u></li><li>정보 교환, 파일 전송, 가상 터미널</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;osi-open-system-interconnection-참조-모델-개요&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="네트워크7계층" scheme="https://hyeonukdev.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC7%EA%B3%84%EC%B8%B5/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 인터넷 구성의 개념</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EC%9D%B8%ED%84%B0%EB%84%B7%EA%B5%AC%EC%84%B1%EC%9D%98%EA%B0%9C%EB%85%90/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EC%9D%B8%ED%84%B0%EB%84%B7%EA%B5%AC%EC%84%B1%EC%9D%98%EA%B0%9C%EB%85%90/</id>
    <published>2020-05-05T04:52:54.000Z</published>
    <updated>2020-05-05T04:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><ul><li><u>네트웤크 계층 구조</u>에서 각 층의 역할을 이해</li><li>응용의 특성에 따라 <u>TCP와 UDP를 구별</u>하여 적용</li><li>패킷 스위칭 시스템 이해하고, 다양한 라우팅 알고리즘과 <u>IP 프로토콜</u>을 설명</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li><p>OSI 7 Layer</p><ul><li>국제표준화 기구인 ISO(International Standard Organization)에서 다른 시스템간 통신을 위해 네트워크 구조를 제시한 기본 모델로 7계층 구조</li></ul></li><li><p>Protocol 프로토콜</p><ul><li>서로 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화시켜 놓은 통신 규약</li></ul></li></ul><h3 id="인터넷의-개념"><a class="markdownIt-Anchor" href="#인터넷의-개념"></a> 인터넷의 개념</h3><ul><li><u>TCP/IP 프로토콜을 기반으로 전세계</u> 수 많은 네트워크들이 연결된 광범위한 컴퓨터 통신망</li><li>1969년 미 국방성의 ARPANET에서 시작</li><li>유닉스 운영체제를 기반으로 함</li><li>인터넷에 연결된 모든 컴퓨터는 <u>고유한 IP주소를 가짐</u></li><li>동시에 여러 사람이 인터넷을 이용하여 데이터 송수신 할 수 있도록 패킷 단위로 데이터를 분할하여 전송하는 <u>패킷교환 방식을 사용</u></li><li>컴퓨터 또는 네트워크로 서로 연결하기 위해 <u>게이트 웨이, 라우터, 브리지, 허브 등 네트워크 장비가 필요</u></li><li><b>증폭기는 아날로그 신호 증폭을 위한 장비로 인터-네트워킹과는 무관</b></li></ul><h3 id="네트워크-관련-장비"><a class="markdownIt-Anchor" href="#네트워크-관련-장비"></a> 네트워크 관련 장비</h3><h4 id="1-gateway-게이트웨이"><a class="markdownIt-Anchor" href="#1-gateway-게이트웨이"></a> 1. Gateway 게이트웨이</h4><ul><li>LAN에서 <u>서로 다른 프로토콜의 네트워크</u>에 데이터를 보내거나 다른 네트워크로 부터 데이터를 받아들이는 <u>출입구 역할</u></li><li>수행 역할<ul><li>데이터 형식 변환</li><li>주소 변환</li><li>프로토콜 변환</li></ul></li></ul><h4 id="2-router-라우터"><a class="markdownIt-Anchor" href="#2-router-라우터"></a> 2. Router 라우터</h4><ul><li>서로 다른 프로토콜의 LAN이나 LAN과 WAN의 연결 기능에 <u>데이터 전송의 최적의 경로를 선택할</u> 수 있는 기능 추가</li></ul><h4 id="3-repeater-리피터"><a class="markdownIt-Anchor" href="#3-repeater-리피터"></a> 3. Repeater 리피터</h4><ul><li><u>전송되는 신호가</u> 전송 선로의 특성 및 외부 충격 등 요인으로 원래의 형태와 다르게 <u>왜곡되거나 약해질 경우 원래의 신호 형태로 재생하여 다시 전송</u>하는 역할 수행</li></ul><h4 id="4-hub-허브"><a class="markdownIt-Anchor" href="#4-hub-허브"></a> 4. Hub 허브</h4><ul><li>사무실이나 가까운 거리의 <u>컴퓨터들을 연결하는 장치</u>로 각 회선을 통합적으로 관리하며 신호 증폭 기능의 리피터 역할도 포함</li><li>종류<ul><li><u>더미 허브</u><ul><li>LAN이 보유한 대역폭을 연결된 컴퓨터 수 만큼 나누어 제공</li><li>100MB 대역폭 5대 연결시 20MB 대역폭으로 속도 낮아짐</li></ul></li><li><u>스위칭 허브</u><ul><li>네트워크 상에 흐르는 데이터의 유무 및 흐름을 제어하며, 연결된 컴퓨터 수에 상관없이 <u>LAN의 최대 대역폭을 사용할 수 있도록 신호 증폭 기능을 제공하는 허브</u></li></ul></li></ul></li></ul><h4 id="5-nic-network-interface-card-랜-카드"><a class="markdownIt-Anchor" href="#5-nic-network-interface-card-랜-카드"></a> 5. NIC; Network Interface Card 랜 카드</h4><ul><li>컴퓨터가 네트워크에 연결되도록 하는 접촉 점 역할 장치로, 이더넷 카드 혹은 네트워크 어댑터라고 함</li></ul><h4 id="6-bridge-브리지"><a class="markdownIt-Anchor" href="#6-bridge-브리지"></a> 6. Bridge 브리지</h4><ul><li><u>동일한 프로토콜을 사용하는 LAN과 LAN을 연결</u>하거나 LAN 안에서 컴퓨터 그룹을 연결하는 기능을 수행</li><li>네트워크를 분산적으로 구성하여 보안성을 높일 수 있음</li></ul><h4 id="7-switch-스위치"><a class="markdownIt-Anchor" href="#7-switch-스위치"></a> 7. Switch 스위치</h4><ul><li>브리지와 같이 LAN과 LAN을 연결하여 훨씬 더 큰 LAN을 만드는 장치</li><li>하드웨어를 기반으로 처리하므로 전송 속도가 빠름</li><li>포트마다 각기 다른 전송 속도를 지원하도록 제어할 수 있고 수십에서 수백 개의 포트 제공</li></ul><h3 id="네트워크-규모에-따른-분류"><a class="markdownIt-Anchor" href="#네트워크-규모에-따른-분류"></a> 네트워크 규모에 따른 분류</h3><ul><li>LAN; Local Area Network<ul><li>근거리 통신망</li></ul></li><li>MAN; Metropolitan Area Network<ul><li>대도시 통신망</li></ul></li><li>WAN; Wide Area Network<ul><li>광대역 통신망</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;네트웤크 계층 구조&lt;/u&gt;에서 각 층의 역할을 이해&lt;/li&gt;
&lt;li&gt;응
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="인터넷구성의개념" scheme="https://hyeonukdev.github.io/tags/%EC%9D%B8%ED%84%B0%EB%84%B7%EA%B5%AC%EC%84%B1%EC%9D%98%EA%B0%9C%EB%85%90/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-04T16:10:53.574Z</published>
    <updated>2020-05-04T16:10:53.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="1-운영체제-종류"><a class="markdownIt-Anchor" href="#1-운영체제-종류"></a> 1. 운영체제 종류</h3><ul><li><u>컴퓨터 시스템의 자원들(CPU, 주기억장치, 보조기억장치, 파일 등)을 효율적으로 관리</u>하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 <u>인터페이스를 제공하는 시스템 소프트웨어</u></li><li>종류<ul><li>Windows</li><li>UNIX</li><li>LINUX</li><li>MacOS</li><li>MS-DOS</li></ul></li></ul><h3 id="2-메모리-관리"><a class="markdownIt-Anchor" href="#2-메모리-관리"></a> 2. 메모리 관리</h3><ul><li>기억장치의 계층 구조(산 형태 순서 정렬)<ul><li>레지스터</li><li>캐시 기억장치</li><li>주기억장치</li><li>보조기억장치</li></ul></li><li>기억장치 관리 전략<ul><li>Fetch</li><li>Placement</li><li>Replacement</li></ul></li><li>주기억장치 할당 기법<ul><li>연속 할당</li><li>분산 할당</li></ul></li><li>가상기억장치의 구현 기법<ul><li>페이징</li><li>세그먼테이션</li></ul></li><li>페이지 교체 알고리즘 종류<ul><li>FIFO</li><li>LRU</li><li>NUR</li><li>OPT</li><li>LFU</li><li>SCR</li></ul></li><li>가상기억장치의 기타 관리<ul><li>Locality</li><li>Working Set</li><li>Thrashing</li></ul></li></ul><h3 id="3-프로세스-스케줄링"><a class="markdownIt-Anchor" href="#3-프로세스-스케줄링"></a> 3. 프로세스 스케줄링</h3><ul><li>프로세스<ul><li>프로세서에 의해 처리되는 사용자 프로그램</li><li>프로세서<ul><li>CPU</li><li>처리기</li></ul></li></ul></li><li>스레드<ul><li>프로세스 내에서 작업 단위로서 시스템의 여러 자원을 할당 받아 실행하는 프로그램의 단위</li></ul></li><li>스케줄링<ul><li>프로세스가 생성되어 실행될 때 필요한 시스템의 여러 자원ㅇ르 해당 프로세스에 할당하는 작업</li></ul></li><li>비선점 스케줄링의 종류<ul><li>FIFO(FCFS)</li><li>SJF</li><li>HRN</li></ul></li><li>선점 스케줄링의 종류<ul><li>RR</li><li>SRT</li><li>MLQ</li><li>MFQ</li></ul></li></ul><h3 id="4-환경변수"><a class="markdownIt-Anchor" href="#4-환경변수"></a> 4. 환경변수</h3><ul><li>시스템 소프트웨어 동작에 영향을 미치는 동적인 값들의 모임</li><li>윈도우 환경변수<ul><li>%APPDATA%, %COMSPEC%, %HOMEPATH%, %PATH%, %PATHEXT%, %PROGRAMFILES%, %SYSTEMDRIVE%, %SYSTEMROOT% , %USERNAME%, %USERPROFILE%</li></ul></li><li>유닉스 환경변수<ul><li>$DISPLAY, $HOME, $LANG, $MAIL, $PATH, $PS1, $PWD, $TERM, $USER</li></ul></li></ul><h3 id="5-shell-script"><a class="markdownIt-Anchor" href="#5-shell-script"></a> 5. Shell Script</h3><ul><li>GUI<ul><li>Graphic User Interface</li><li>마우스로 아이콘이나 메뉴를 선택하여 작업</li></ul></li><li>CLI<ul><li>Command Line Interface</li><li>키보드로 명령어를 직접 입력하여 작업</li></ul></li></ul><h3 id="unix와-linux-기본-명령어"><a class="markdownIt-Anchor" href="#unix와-linux-기본-명령어"></a> UNIX와 LINUX 기본 명령어</h3><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>cat</td><td>파일 내용을 화면에 표시</td></tr><tr><td>chdir</td><td>디렉토리 위치 변경</td></tr><tr><td>chmod</td><td>파일의 사용 허가 지정</td></tr><tr><td>chown</td><td>소유자 변경</td></tr><tr><td>cp</td><td>파일 복사</td></tr><tr><td>getpid</td><td>자신의 프로세스 아이디를 얻음</td></tr><tr><td>ls</td><td>현재 디렉토리 내의 파일 목록을 표시</td></tr><tr><td>rm</td><td>파일 삭제</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;1-운영체제-종류&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - Shell Script</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/ShellScript/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/ShellScript/</id>
    <published>2020-05-04T16:02:28.000Z</published>
    <updated>2020-05-04T16:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="운영체제-기본-명령어-개요"><a class="markdownIt-Anchor" href="#운영체제-기본-명령어-개요"></a> 운영체제 기본 명령어 개요</h3><ul><li><p>Shell은 사용자의 명령어를 수행하는 명령어 해석기</p></li><li><p>운영체제를 제어하는 방법</p><ul><li>GUI<ul><li>Graphic User Interface</li><li>마우스로 아이콘이나 메뉴를 선택하여 작업</li></ul></li><li>CLI<ul><li>Command Line Interface</li><li>키보드로 명령어를 직접 입력하여 작업</li></ul></li></ul></li></ul><h3 id="윈도우-cli-기본-명령어"><a class="markdownIt-Anchor" href="#윈도우-cli-기본-명령어"></a> 윈도우 CLI 기본 명령어</h3><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>ATTRIP</td><td>파일의 속성을 변경</td></tr><tr><td>CD</td><td>디렉토리의 위치 변경</td></tr><tr><td>CHKDSK</td><td>디스크 상태 점검</td></tr><tr><td>CLS</td><td>화면의 내용을 지움</td></tr><tr><td>COPY</td><td>파일 복사</td></tr><tr><td>DEL</td><td>파일 삭제</td></tr><tr><td>DIR</td><td>파일의 목록 표시</td></tr><tr><td>FIND</td><td>파일 검색</td></tr><tr><td>FORMAT</td><td>디스크 표면을 트랙과 섹터로 초기화</td></tr><tr><td>MD</td><td>디렉토리 생성</td></tr><tr><td>MOVE</td><td>파일 이동</td></tr><tr><td>REN</td><td>파일 이름 변경</td></tr><tr><td>TYPE</td><td>파일의 내용 표시</td></tr></tbody></table><h3 id="unix와-linux-기본-명령어"><a class="markdownIt-Anchor" href="#unix와-linux-기본-명령어"></a> UNIX와 LINUX 기본 명령어</h3><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>cat</td><td>파일 내용을 화면에 표시</td></tr><tr><td>chdir</td><td>디렉토리 위치 변경</td></tr><tr><td>chmod</td><td>파일의 사용 허가 지정</td></tr><tr><td>chown</td><td>소유자 변경</td></tr><tr><td>cp</td><td>파일 복사</td></tr><tr><td>exec</td><td>새로운 프로세스 수행</td></tr><tr><td>find</td><td>파일 검색</td></tr><tr><td>fork</td><td>새로운 프로세스를 생성</td></tr><tr><td>fsck</td><td>파일시스템을 검사하고 보수</td></tr><tr><td>getpid</td><td>자신의 프로세스 아이디를 얻음</td></tr><tr><td>ls</td><td>현재 디렉토리 내의 파일 목록을 표시</td></tr><tr><td>rm</td><td>파일 삭제</td></tr><tr><td>wait</td><td>fork 후 exec에 의해 실행되는 프로세스의 상위 프로세스가 하위 프로세스 종료 등의 event를 기다림</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;운영체제-기본-명령어-개요&quot;&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="ShellScript" scheme="https://hyeonukdev.github.io/tags/ShellScript/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 환경변수</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98/</id>
    <published>2020-05-04T15:53:21.000Z</published>
    <updated>2020-05-04T15:53:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="환경변수의-개념"><a class="markdownIt-Anchor" href="#환경변수의-개념"></a> 환경변수의 개념</h3><ul><li><u>시스템 소프트웨어의 동작에 영향을 미치는 동적인 값들의 모임</u></li><li>변수명과 값으로 구성</li><li>시스템의 기본 정보를 저장</li><li>자식프로세스에 상속됨</li><li><b>부모 프로세스에서 상속받아 사용</b></li><li><u>시스템 전반에 걸쳐 적용되는 시스템 환경변수와 사용자 계정 내에만 적용되는 사용자 환경변수로 구분</u></li></ul><h3 id="환경변수-보기"><a class="markdownIt-Anchor" href="#환경변수-보기"></a> 환경변수 보기</h3><ul><li>Windows<ul><li>echo %PATH%</li></ul></li><li>UNIX<ul><li>echo $PATH</li></ul></li></ul><h3 id="환경변수-설정"><a class="markdownIt-Anchor" href="#환경변수-설정"></a> 환경변수 설정</h3><ul><li>Windows<ul><li>self 변수 = 값</li></ul></li><li>UNIX<ul><li>env 변수 = 값</li><li>set 변수 = 값</li></ul></li></ul><h3 id="윈도우-운영체제-환경변수"><a class="markdownIt-Anchor" href="#윈도우-운영체제-환경변수"></a> 윈도우 운영체제 환경변수</h3><table><thead><tr><th>환경변수</th><th>용도</th></tr></thead><tbody><tr><td>%APPDATA%</td><td>설치된 모든 프로그램의 필요 데이터가 저장된 폴더</td></tr><tr><td>%COMSPEC%</td><td>기본 명령 프롬프트로 사용할 프로그램</td></tr><tr><td>%HOMEPATH%</td><td>로그인한 계정의 기본 폴더</td></tr><tr><td>%PATH%</td><td>실행 파일을 찾는 경로</td></tr><tr><td>%PATHEXT%</td><td>CMD에서 실행할 수 있는 파일 확장자 목록</td></tr><tr><td>%PROGRAMFILES%</td><td>기본프로그램의 설치 폴더</td></tr><tr><td>%SYSTEMDRIVE%</td><td>윈도우가 부팅된 드라이브</td></tr><tr><td>%SYSTEMROOT%</td><td>부팅된 운영체제가 들어 있는 폴더</td></tr><tr><td>%USERNAME%</td><td>로그인한 계정 이름</td></tr><tr><td>%USERPROFILE%</td><td>로그인한 유저의 프로필이 저장된 폴더</td></tr></tbody></table><h3 id="unix와-linux-운영체제-환경변수"><a class="markdownIt-Anchor" href="#unix와-linux-운영체제-환경변수"></a> UNIX와 LINUX 운영체제 환경변수</h3><table><thead><tr><th>환경변수</th><th>용도</th></tr></thead><tbody><tr><td>$DISPLAY</td><td>현재 디스플레이 위치</td></tr><tr><td>$HOME</td><td>사용자의 홈 디렉토리</td></tr><tr><td>$LANG</td><td>프로그램 사용 시 기본적으로 지원되는 언어</td></tr><tr><td>$MAIL</td><td>이메일을 보관하는 경로</td></tr><tr><td>$PATH</td><td>실행파일을 찾는 경로</td></tr><tr><td>$PS1</td><td>Shell Prompt 정보</td></tr><tr><td>$PWD</td><td>현재 작업하는 디렉토리</td></tr><tr><td>$TERM</td><td>로그인 터미널 타입</td></tr><tr><td>$USER</td><td>사용자의 이름</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;환경변수의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="환경변수" scheme="https://hyeonukdev.github.io/tags/%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 프로세스 스케줄링</title>
    <link href="https://hyeonukdev.github.io/2020/05/04/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/"/>
    <id>https://hyeonukdev.github.io/2020/05/04/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/</id>
    <published>2020-05-04T14:42:03.000Z</published>
    <updated>2020-05-04T14:42:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="프로세스의-개념"><a class="markdownIt-Anchor" href="#프로세스의-개념"></a> 프로세스의 개념</h3><ul><li>처리기, CPU에 의해 처리되는 사용자 프로그램</li><li>정의<ul><li>PCB(Process Controll Block)을 가지는 프로그램</li><li>실기억장치에 저장된 프로그램</li><li>프로세서가 할당되는 실체로서, 디스패치가 가능한 단위</li><li>프로시저가 활동 중인 것</li><li>서로 규칙적이거나 연속적이지 않고 독립적으로 실행되므로 <u>비동기적</u> 행위를 일으키는 주체</li><li>지정된 결과를 얻기 위한 일련의 계통적 동작</li><li>목적 또는 결과에 따라 발생되는 사건들의 과정</li><li>운영체제가 관리하는 실행 단위</li></ul></li></ul><h3 id="pcb-process-control-block-프로세스-제어-블록"><a class="markdownIt-Anchor" href="#pcb-process-control-block-프로세스-제어-블록"></a> PCB; Process Control Block, 프로세스 제어 블록</h3><ul><li>운영체제가 <u>프로세스에 대한 중요한 정보를 저장해 놓는 곳</u></li><li>각 프로세스가 생성될 때마다 고유의 PCB가 생성되고, 프로세스가 완료되면 PCB는 제거됨</li><li>PCB에 저장되는 정보의 종류<ul><li>프로세스의 현재 상태</li><li>포인터<ul><li>부모 프로세스의 주소 기억</li><li>자식 프로세스의 주소 기억</li><li>현재 프로세스가 위치한 주소 기억</li><li>프로세스에 할당된 각 자원에 대한 주소 기억</li></ul></li><li>프로세스 고유 식별자</li><li>스케줄링 및 프로세스의 우선순위</li><li>CPU 레지스터 정보</li><li>주기억장치 관리 정보</li><li>입출력 상대 정보</li><li>계정 정보</li></ul></li></ul><h3 id="thread-스레드"><a class="markdownIt-Anchor" href="#thread-스레드"></a> Thread 스레드</h3><ul><li><u>프로세스 내에서의 작업 단위</u>로서 시스템의 여러 자원을 할당 받아 실행하는 프로그램 단위</li><li>하나의 프로세스에 하나의 스레드가 존재하는 경우는 단일 스레드, 하나 이상의 스레드가 존재하는 경우는 다중스레드</li><li>프로세스의 일부 특성을 갖고 있기 때문에 <u>경량 프로세스</u>라고 함</li><li>스레드 기반 시스템에서는 스레드는 독립적인 스케줄링의 최소 단위로서 프로세스의 역할 담당</li><li>장점<ul><li>하드웨어, 운영체제의 성능과 응용 프로그램 처리율 향상</li><li>응용 프로그램의 응답 시간 단축</li><li>실행 환경을 공유 시켜 기억장소의 낭비를 줄임</li><li>프로세스들 간의 통신 향상</li></ul></li><li><u>프로세스 내부의 작업 단위</u></li></ul><h3 id="scheduling-스케줄링의-개념"><a class="markdownIt-Anchor" href="#scheduling-스케줄링의-개념"></a> Scheduling 스케줄링의 개념</h3><ul><li>CPU나 자원을 효율적으로 사용하기 위한 정책</li><li>프로세스가 생성되어 실행될 때 필요한 시스템의 여러 자원을 해당 프로세스에게 할당하는 작업</li><li>프로세스가 생성되어 완료될 때 까지 프로세스는 여러 종류의 스케줄링 과정을 거침</li></ul><h3 id="스케줄링의-목적"><a class="markdownIt-Anchor" href="#스케줄링의-목적"></a> 스케줄링의 목적</h3><ul><li>모든 프로세스에게 공정하게 할당</li><li>단위 시간당 프로세스를 처리하는 비율 증가</li><li>CPU가 순수하게 프로세를 실행하는데 사용되는 시간 비율 증가</li><li>우선 순위가 높은 프로세를 먼저 실행</li><li>오버헤드를 최소화<ul><li>오버헤드<ul><li>시스템에서 목적으로 하는 효과를 얻기 위해 본질적인 것은 아니지만 요구되는 작동, 또는 그 때문에 필요한 자원</li></ul></li></ul></li><li>작업을 지시하고 반응하는 응답시간 최소화</li><li>프로세스를 제출한 시간부터 실행이 완료될 때까지 걸리는 반환시간을 최소화</li><li>프로세스가 준비상태 큐에서 대기하는 시간을 최소화</li><li>메모리, 입력장치 등의 자원을 균형 있게 사용</li><li>자원을 사용하기 위해 무한정 연기되는 상태를 회피</li><li><b>프로세스에게 CPU를 할당하고 문맥 교환을 하는 프로세스 관리기능</b></li></ul><h3 id="non-preemptive-비선점-스케줄링"><a class="markdownIt-Anchor" href="#non-preemptive-비선점-스케줄링"></a> Non-Preemptive 비선점 스케줄링</h3><ul><li>이미 할당된 CPU를 다른 프로세스가 <u>강제로 빼앗아 사용할 수 없는</u> 스케줄링 기법</li><li>프로세스가 CPU를 할당 받으면 <u>해당 프로세스가 완료될 때까지 CPU를 사용</u></li><li><u>모든 프로세스</u>에 대한 요구를 공정하게 처리</li><li>프로세스 <u>응답 시간의 예측이 용이</u>하며, 일괄 처리 방식에 적합</li><li>짧은 작업이 긴 작업을 기다리는 경우 발생할 수 있음</li><li>종류<ul><li>FIFO(FCFS)</li><li>SJF</li><li>HRN</li><li>Priority</li></ul></li></ul><h3 id="preemptive-선점-스케줄링"><a class="markdownIt-Anchor" href="#preemptive-선점-스케줄링"></a> Preemptive 선점 스케줄링</h3><ul><li>하나의 프로세스가 CPU를 할당 받아 실행하고 있을 때 우선순위가 높은 다른 프로세스가 CPU를 <u>강제로 빼앗아 사용할 수 있는 스케줄링 기법</u></li><li><u>우선순위가 높은 프로세를 빠르게 처리</u></li><li>빠른 응답시간을 요구하는 대화식 <u>시분할 시스템에 사용됨</u></li><li>많은 오버헤드를 초래</li><li>선점이 가능하도록 일정 시간 배당에 대한 인터럽트용 타이머 클록 필요</li><li>종류<ul><li>RR</li><li>SRT</li><li>Preemptive</li><li>Priority</li><li>MLQ</li><li>MFQ</li></ul></li></ul><h3 id="프로세스-스케줄링-종류-및-특징"><a class="markdownIt-Anchor" href="#프로세스-스케줄링-종류-및-특징"></a> 프로세스 스케줄링 종류 및 특징</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0505_01.png" alt="프로세스 스케줄링 종류 및 특징" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;프로세스의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로세스스케줄링" scheme="https://hyeonukdev.github.io/tags/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 메모리관리</title>
    <link href="https://hyeonukdev.github.io/2020/05/04/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B4%80%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/04/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B4%80%EB%A6%AC/</id>
    <published>2020-05-04T08:23:36.000Z</published>
    <updated>2020-05-04T08:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="메모리-관리-개념"><a class="markdownIt-Anchor" href="#메모리-관리-개념"></a> 메모리 관리 개념</h3><ul><li>프로그램의 실행이 종료될 때 까지 <u>메로리를 가용한 상태로 유지 및 관리</u>하는 것</li><li>다수의 프로그램 실행 중 <u>메모리가 꽉 차게 되면 시스템의 속도가 느려지고 멈추는 현상이 발생</u></li><li>CPU와 지속적으로 데이터를 송수신하는 상황에서 어떤 부분의 <u>메모리가 현재 사용되는지 어떤 순서로 메모리에 입출력되어야 하는지, 메모리 공간이 필요할 경우 어떻게 확보 및 제거 할지에</u> 대한 종합적인 관리</li></ul><h3 id="기억장치-계층-구조의-특징"><a class="markdownIt-Anchor" href="#기억장치-계층-구조의-특징"></a> 기억장치 계층 구조의 특징</h3><p><img src="https://file.namu.moe/file/8bc9e381797334eb33da66e3ba501be120dc36664d178af61d5ee399c5cb03ee7783dbde40e1d5b55783255b1f81138cfb136c6f6afc442ea1a8c0efd067f90d" alt="기억장치계층구조의 특징" /></p><ul><li>기억장치 계층 구조의 <u>상위 장치일 수 록 접근속도와 접근 시간이 빠르지만</u> <b>기억용량이 적고 고가</b></li><li>주기억장치는 각기 자신의 주소를 갖는 워드 또는 바이트들로 구성되어 있으며 <u>주소를 이용하여 액세스 가능</u></li><li>보조기억장치의 데이터는 주기억장치에 적재된 후 <u>CPU에 의해 액세스 가능</u></li></ul><h3 id="기억장치-관리-전략"><a class="markdownIt-Anchor" href="#기억장치-관리-전략"></a> 기억장치 관리 전략</h3><ul><li><u>보조기억장치의 프로그램이나 데이터를 주기억장치에 적재시키는 시기, 적재 위치 등을 지정하여 한정도니 주기억장치의 공간을 효율적으로 사용</u>하기 위한 것</li><li>종류<ul><li>반입(Fetch) 전략 : 언제 적재?</li><li>배치(Placement) 전략 : 어디에 위치?</li><li>교체(Replacement) 전략 : 어느 영역 교체?</li></ul></li></ul><h4 id="1-fetch-전략"><a class="markdownIt-Anchor" href="#1-fetch-전략"></a> 1. Fetch 전략</h4><ul><li><u>보조기억장치에 보관 중인 프로그램이나 데이터를 <b>언제</b> 주기억 장치로 적재</u>할 것인지를 결정</li><li>Demand Fetch 요구 반입<ul><li>실행 중인 프로그램이 특정 프로그램이나 데이터 등의 참조를 <u>요구</u>할 때 적재</li></ul></li><li>Anticipatory Fetch 예상 반입<ul><li>실행 중인 프로그램에 의해 참조될 프로그램이나 데이터를 <u>미리 예상하여 적재</u></li></ul></li></ul><h4 id="2-placement-전략"><a class="markdownIt-Anchor" href="#2-placement-전략"></a> 2. Placement 전략</h4><ul><li>새로 반입되는 프로그램이나 데이터를 주기억장치의 <b>어디에 위치</b>시킬 것인지를 결정</li><li>First Fit 최초 적합<ul><li>프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 <u>첫번째 분할 영역에 배치</u></li></ul></li><li>Best Fit 최적 적합<ul><li>프로그램이나 데이터가 들어갈 수 있는 크기의 빈영역 중에서 <u>빈 기억공간을 가장 작게 남기는 분할 영역에 배치</u></li></ul></li><li>Worst Fit 최악 적합<ul><li>프로그램이나 데이터가 들어갈 수 있는 크기의 빈영역 중에서 <u>빈 기억공간을 가장 많게 남기는 분할 영역에 배치</u></li></ul></li></ul><h4 id="3-replacement-전략"><a class="markdownIt-Anchor" href="#3-replacement-전략"></a> 3. Replacement 전략</h4><ul><li>Swapping 스와핑 기법<ul><li><u>주기억장치의 모든 영역이 이미 사용중인 상태에서 새로운 프로그램이나 데이터를 주기억장치에 배치하려고할 때 <b>사용중인 어느 영역을 교체하여 사용</b>할 것인지 결정</u></li><li>Swap Out<ul><li>주기억장치의 프로그램이 보조기억장치로 이동</li></ul></li><li>Swap In<ul><li>보조기억장치에서 주기억장치로 이동</li></ul></li></ul></li><li>스와핑 기법은 <u>가상 기억장치의 페이징 기법으로 발전</u><ul><li>FIFO; First In First Out, 선입선출</li><li>OPT; OPTimeal replacement, 최적교체</li><li>LRU; Least Recently Used, 최근 오래 사용 않은 페이지 교체</li><li>LFU; Least Frequently Used, 사용 빈도가 가장 작은 페이지</li><li>NUR; Not Used Recently, 최근 사용 않은 페이지 교체</li><li>SCR; Second Chance Replacement, 2차 기회 교체</li></ul></li></ul><h3 id="주기억장치-할당-기법의-개념"><a class="markdownIt-Anchor" href="#주기억장치-할당-기법의-개념"></a> 주기억장치 할당 기법의 개념</h3><ul><li>프로그램이나 데이터를 실행시키기 위해 주기억장치에 어떻게 할당할 것인지에 대한 내용</li></ul><h3 id="주기억장치-할당-기법의-종류"><a class="markdownIt-Anchor" href="#주기억장치-할당-기법의-종류"></a> 주기억장치 할당 기법의 종류</h3><ul><li>연속 할당 기법<ul><li>프로그램을 <u>주기억장치에 연속적으로 할당하는 기법</u></li><li>단일 분할 할당 기법<ul><li>운영체제영역과 단일 사용자 영역으로 분할</li><li><b>오버레이</b><ul><li>주기억장치보다 큰 프로그램 실행 기법</li></ul></li><li><b>스와핑</b><ul><li>주기억장치 프로그램을 보조기억장치 이동</li></ul></li></ul></li><li>다중 분할 할당 기법<ul><li>사용자 영역을 여러 개의 고정된 크기로 분할</li><li>고정 분할(정적) 할당<ul><li>사용자 영역을 여러 개의 고정된 크기로 분할</li></ul></li><li>가변 분할(동적) 할당<ul><li>프로그램의 필요한 크기로 영역 분할, 고정 분할 할당 기법의 영역 내의 단편화 해결</li></ul></li></ul></li></ul></li><li>분산 할당 기법<ul><li><u>가상기억장치의 내용</u>을 특정 단위의 조각으로 나누어 <u>주기억장치 내에 분산하여 할당하는 기법</u></li><li>페이징 기법</li><li>세그먼트 기법</li></ul></li></ul><h3 id="가상기억장치의-개념"><a class="markdownIt-Anchor" href="#가상기억장치의-개념"></a> 가상기억장치의 개념</h3><ul><li>VMU; Virtual Memory Unit 보조기억장치의 일부를 주기억장치처럼 사용하는 것</li><li>주기억장치의 용량 보다 큰 프로그램을 실행하기 위해 사용</li><li>주기억장칭의 이용률과 다중 프로그래밍의 효율성 제고</li><li>가상기억장치에 저장된 프로그램을 실행하려면 가상기억장치의 주소를 기억장치의 주소로 바꾸는 <u>주소 변환</u> 작업이 필요</li><li>블록 단위로 나누어 사용하므로 연속 할당 방식에서 발생할 수 있는 단편화를 해결할 수 있음</li><li>프로그램을 여러 개의 작은 블록 단위로 나누어서 가상기억장치에 보관해놓고, 프로그램 실행시 <u>요구되는 블록만 주기억장치에 불연속적으로 할당</u>하여 처리</li></ul><h4 id="1-paging-페이징-기법"><a class="markdownIt-Anchor" href="#1-paging-페이징-기법"></a> 1. Paging 페이징 기법</h4><ul><li>가상기억장치에 보관되어있는 프로그램과 주기억장치의 영역을 <u>동일한 크기로 나눈 후</u> 나눠진 가상기억장치의 프로그램을 주기억장치의 영역인 페이지 프레임에 적재시켜 실행하는 기법<ul><li>페이지 크기<ul><li>1 ~ 4KB</li></ul></li></ul></li><li>외부 단편화는 발생하지 않으나 <u>내부 단편화 발생</u><ul><li>내부 단편화<ul><li>사용할 프로그램이 16KB일 때 페이지 크기를 4KB씩 나누면 2KB 단편화 발생</li></ul></li></ul></li><li>주소 변환을 위해서는 페이지의 위치 정보를 가지고 있는 <u>페이지 맵 테이블(Page Map Table)이 필요</u></li><li>페이징에서 가상주소는 (p,d)로 표현하며, p는 참조하는 항목이 잇는 가상메모리의 페이지, d는 페이지 안에서 참조하는 항목이 위치한 변위</li><li>실제 주소 변환은 페이지 프레임 크기가 ps일 때 p`*ps+d</li></ul><h4 id="2-segmentation-세그멘테이션-기법"><a class="markdownIt-Anchor" href="#2-segmentation-세그멘테이션-기법"></a> 2. Segmentation 세그멘테이션 기법</h4><ul><li>가상기억장치에 보관되어 있는 프로그램을 <u>다양한 크기의 논리적인 단위로 나눈 후</u> 주기억장치에 적재시켜 실행시키는 방법</li><li>내부 단편화는 발생하지 않으나 <u>외부 단편화가 발생</u></li><li>세그먼트가 주기억장치에 적재될 때 다른 세그먼트에게 할당된 영역을 침범할 수 없으며, 이를 위해 기억장치보호키가 필요</li><li>주소 변환을 위해서는 세그먼트가 존재하는 위치 정보를 가지고 있는 <u>세그먼트 맵 테이블 이 필요</u></li><li>세그먼테이션 가상주소는 (s,d)로 표현하며, s는 참조하는 항목이 있는 가상메모리의 세그먼트 번호, d느 세그먼트 s에서 참조하는 항목부터 있는 곳까지의 변위</li><li>실제 주소 변환은 세그먼트 번호의 주기억장치 시작주소가 s`일 때 s` +d</li></ul><h3 id="페이지-교체-알고리즘-개념"><a class="markdownIt-Anchor" href="#페이지-교체-알고리즘-개념"></a> 페이지 교체 알고리즘 개념</h3><ul><li>CPU가 액세스한 가상 페이지가 주기억장치에 없는 <u>페이지 부재 Page Fault</u>가 발생했을 때, 가상기억장치의 필요한 페이지를 주기억장치에 적재해야 함</li><li><u>주기억장치의 모든 페이지 프레임이 사용 중 이라면 어떤 페이지 프레임을 선택하여 교체</u>할 것인지 결정</li></ul><h3 id="페이지-교체-알고리즘-종류"><a class="markdownIt-Anchor" href="#페이지-교체-알고리즘-종류"></a> 페이지 교체 알고리즘 종류</h3><h4 id="1-fifo-first-in-first-out-선입선출"><a class="markdownIt-Anchor" href="#1-fifo-first-in-first-out-선입선출"></a> 1. FIFO; First In First Out, 선입선출</h4><ul><li>각 페이지가 주기억장치에 적재될 때마다 그때의 시간을 기억시켜 <u>가장 먼저 들어와서 가장 오래 있었던 페이지</u>를 교체하는 기법</li><li>ex) 2개의 프레임을 수용할 수 있는 주기억장치에서 FIFO 알고리즘을 사용할 경우 페이지 결함의 발생횟수는?<br />페이지 참조 순서 : 1, 2, 1, 3, 2, 4<br />답 : 4<br />해설<br />- 2개의 프레임에는 1, 2 가 들어가면서 결함 발생 합 2회 (1, 2)<br />- 1은 그대로 (1, 2, 1)<br />- 가장 오래된 것은 첫 번째 프레임이므로 여기에 3이 들어가면서 결함 발생 3회 (1, 2, 1, 3)<br />- 2는 그대로 (1, 2, 1, 3, 2)<br />- 2가 3보다 오래 있었으므로 여기에 4가 들어가면서 결함 발생 4회 (1, 2, 1, 3, 2, 4)<br />- <img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0504_09.png" alt="FIFO해설" /></li></ul><h4 id="2-lruleast-recently-used"><a class="markdownIt-Anchor" href="#2-lruleast-recently-used"></a> 2. LRU(Least Recently Used)</h4><ul><li><u>최근에 가장 오랫동안 사용하지 않은 페이지를 교체</u></li><li>각 페이지마다 계수기 counter 나 스택 stack 을 두어 현 시점에서 가장 오랫동안 사용하지 않은 페이지를 교체</li><li>ex) 2개의 프레임을 수용할 수 있는 주기억장치에서 LRU 알고리즘을 사용할 경우 페이지 결함의 발생횟수는?<br />페이지 참조 순서 : 1, 2, 1, 3, 2, 4<br />답 : 5<br />해설<br />- 2개의 프레임에 1, 2 가 들어가면서 결함 발생 합 2회 (1, 2)<br />- 1 그대로 (1, 2, 1)<br />- 1은 최근에 들어왔으므로 3은 두 번째 프레임에 들어가면서 결함 발생 3회 (1, 2, 1, 3)<br />- 3은 최근에 들어왔으므로 2는 첫 번째 프레임에 들어가면서 결함 발생 4회 (1, 2, 1, 3, 2)<br />- 2는 최근에 들어왔으므로 4는 두 번 째 프레임에 들어가면서 결함 발생 5회 (1, 2, 1, 3, 2, 4)<br />- <img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0504_10.png" alt="LRU해설" /></li></ul><h4 id="3-nurnot-used-recently"><a class="markdownIt-Anchor" href="#3-nurnot-used-recently"></a> 3. NUR(Not Used Recently)</h4><ul><li><u>최근에 사용하지 않은 페이지를 교체하는 기법</u></li><li>최근에 사용 여부를 확인하기 위해서 각 페이지마다 <u>참조 비트와 변형 비트 2개의 비트를 사용</u><ul><li>Reference Bit : 페이지 호출될 때1, 호출되지 않을 때 0 지정</li><li>Modified Bit : 페이지 내용 변경될 때1, 변경되지 않을 때 0 지정</li></ul></li><li>참조비트와 변경비트의 값에 따른 교체될 페이지 순서가 결정됨</li><li>![NUR]](/images/정보처리기사/0504_11.png)</li></ul><h4 id="4-opt-optimal-replacement-최적-교체"><a class="markdownIt-Anchor" href="#4-opt-optimal-replacement-최적-교체"></a> 4. OPT; OPTimal Replacement, 최적 교체</h4><ul><li>앞으로 가장 오랫동안 사용하지 않을 페이지를 교체하는 기법</li><li>페이지 부재 횟수가 가장 적게 발생하는 가장 효율적인 알고리즘</li></ul><h4 id="5-lfu-least-frequently-used"><a class="markdownIt-Anchor" href="#5-lfu-least-frequently-used"></a> 5. LFU; Least Frequently Used</h4><ul><li>사용 빈도가 가장 적은 페이지를 교체하는 기법</li><li>활발하게 사용되는 페이지는 사용 횟수가 많아 교체하지 않고 사용</li></ul><h4 id="6-scr-second-chance-replacement"><a class="markdownIt-Anchor" href="#6-scr-second-chance-replacement"></a> 6. SCR; Second Chance Replacement</h4><ul><li>가장 오랫동안 주기억장치에 있던 페이지 중 자주 사용되는 페이지의 교체를 방지하면 FIFO 기법의 단점을 보완하는 기법</li></ul><h3 id="가상기억장치의-기타-관리"><a class="markdownIt-Anchor" href="#가상기억장치의-기타-관리"></a> 가상기억장치의 기타 관리</h3><h4 id="1-locality-지역성-구역성"><a class="markdownIt-Anchor" href="#1-locality-지역성-구역성"></a> 1. Locality 지역성, 구역성</h4><ul><li>프로세스가 실행되는 동안 주기억장치를 참조할 때 <u>일부페이지만 집중적으로 참조하는 성질</u></li><li>Temporal Locality 시간 구역성<ul><li>프로세스가 실행되면서 <u>하나의 페이지를 일정 시간 동안 집중적으로 액세스</u>하는 현상</li><li>기억장소<ul><li>Loop</li><li>Stack</li><li>Sub</li><li>Routine</li><li>Counting</li></ul></li></ul></li><li>Spatial Locality 공간 구역성<ul><li>프로세스 실행시 <u>일정 위치의 페이지를 집중적으로 액세스</u>하는 현상</li><li>차몾한 페이지의 근처에 있는 페이지를 참조할 가능성이 높음</li><li>기억장소<ul><li>Array</li><li>Traversal</li><li>순차적 코드의 실행</li></ul></li></ul></li></ul><h4 id="2-working-set-워킹-셋"><a class="markdownIt-Anchor" href="#2-working-set-워킹-셋"></a> 2. Working Set 워킹 셋</h4><ul><li>프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합</li><li>자주 참조되는 워킹 셋을 주기억장치에 상주시킴으로써 페이지 부재 및 페이지 교체 현상이 줄어듦</li><li>시간이 지남에 따라 자주 참조하는 페이지의 집합이 변화하기 때문에 워킹 셋도 시간에 따라 변경됨</li></ul><h4 id="3-thrashing-스래싱"><a class="markdownIt-Anchor" href="#3-thrashing-스래싱"></a> 3. Thrashing 스래싱</h4><ul><li><u>프로세스의 처리 시간 보다 페이지 교체에 소요되는 시간이 더 많아 지는 현상</u></li><li><b>프로세스들 간의 메모리 경쟁으로 지나치게 페이지 폴트가 발생하여 전체 시스템의 성능이 저하되는 현상</b></li><li>다중 프로그래밍 시스템이나 가상기억장치를 사용하는 시스템에서 하나의 프로세스 수행 과정 중 자주 페이지 부재가 발생함으로써 나타나는 현상으로, 전체 시스템의 성능이 저하됨</li><li>스래싱 현상 방지 방법<ul><li>다중 프로그래밍 정도를 적정 수준으로 유지</li><li>페이지 부재 빈도를 조절하여 사용</li><li>워킹 셋을 유지</li><li>부족한 자원을 증설하고, 일부 프로세스를 중단시킴</li><li>CPU 성능에 대한 자료의 지속적인 관리 및 분석으로 임계치를 예상하여 운영</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;메모리-관리-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="메모리관리" scheme="https://hyeonukdev.github.io/tags/%EB%A9%94%EB%AA%A8%EB%A6%AC%EA%B4%80%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 운영체제</title>
    <link href="https://hyeonukdev.github.io/2020/05/04/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/"/>
    <id>https://hyeonukdev.github.io/2020/05/04/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/</id>
    <published>2020-05-04T07:57:40.000Z</published>
    <updated>2020-05-04T07:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><ul><li>응용소프트웨어를 개발하기 위하여 <u>다양한 운영체제의 특징</u> 이해</li><li>CLI 및 GUI 환경에서 <u>운영체제의 기본 명령어</u>를 활용</li><li>운영체제에서 제공하는 <u>작업 우선순위 설정 방법</u>을 이용하여 애플리케이션의 작업 우선순위 조정</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>메모리 관리<ul><li>프로그램의 실행이 종료될 때까지 메모리를 가용한 상태로 유지 및 관리하는 것</li></ul></li><li>환경변수<ul><li>시스템 소프트웨어의 동작에 영향을 미치는 동적인 값들의 모임</li></ul></li></ul><h3 id="운영체제의-개념"><a class="markdownIt-Anchor" href="#운영체제의-개념"></a> 운영체제의 개념</h3><ul><li><u>컴퓨터 시스템의 자원들(CPU, 주기억장치, 보조기억장치, 파일 등)을 효율적으로 관리</u>하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 <u>인터페이스를 제공하는 시스템 소프트웨어</u></li></ul><h3 id="운영체제의-역할"><a class="markdownIt-Anchor" href="#운영체제의-역할"></a> 운영체제의 역할</h3><ul><li>사용자와 시스템 간의 편리한 <u>인터페이스 제공</u></li><li>시스템의 각종 <u>하드웨어와 네트워크를 관리하고 제어</u></li><li>자원을 효율적으로 관리하기 위해 <u>자원의 스케쥴링 기능 제공</u></li><li><u>데이터를 관리하고 데이터 및 자원의 공유</u> 기능 제공</li><li>입출력에 대한 보조 기능을 제공</li><li><u>시스템의 오류를 검사하고 복구</u></li><li><b>원시프로그램을 목적프로그램으로 변환하는 것은 번역 프로그램임</b></li></ul><h3 id="운영체제의-목적"><a class="markdownIt-Anchor" href="#운영체제의-목적"></a> 운영체제의 목적</h3><ul><li>목적<ul><li>컴퓨터 시스템의 처리 능력 향상</li><li>사용 가능도 향상</li><li>반환 시간 단축</li></ul></li><li>운영체제 성능 평가 기준<ul><li><u>처리 능력</u></li><li><u>반환 시간</u></li><li><u>사용 가능도</u></li><li><u>신뢰도</u></li></ul></li></ul><h3 id="운영체제의-종류"><a class="markdownIt-Anchor" href="#운영체제의-종류"></a> 운영체제의 종류</h3><h4 id="1-windows"><a class="markdownIt-Anchor" href="#1-windows"></a> 1. Windows</h4><ul><li>마이크로소프트사가 개발한 운영체제</li><li>특징<ul><li>GUI<ul><li>키보드로 명령어를 직접 수행하지 않고 마우스로 아이콘이나 메뉴를 선택하여 모든 작업을 수행</li></ul></li><li>선점형 멀티태스킹<ul><li>동시에 여러 개의 프로그램을 실행하는 멀티태스킹을 하면서 운영체제가 각 작업의 CPU 이용 시간을 제어하여 응용 프로그램 시행 중 문제가 발생하면 해당 프로그램을 강제 종료시키고 모든 시스템 자원을 반환하는 방식</li></ul></li><li>PnP; Plug and Play<ul><li>컴퓨터 시스템에 프린터나 사운드 카드 등의 하드웨어를 설치했을 때 해당 하드웨어를 사용하는 데 필요한 시스템 환경을 운영체제가 자동으로 구성해주는 기능</li></ul></li><li>OLE; Object Linking Embedding<ul><li>다른 응용 프로그램에서 작성된 문자나 그림 등의 개체를 현재 작성 중인 문서에 자유롭게 연결하거나 삽입하여 편집할 수 있게 하는 기능</li></ul></li></ul></li></ul><h4 id="2-unix"><a class="markdownIt-Anchor" href="#2-unix"></a> 2. UNIX</h4><ul><li><p>AT&amp;T 벨 연구소, MIT, General Electric이 공동 개발한 운영체제</p></li><li><p>특징</p><ul><li>C언어로 작성되어 <u>이식성</u> 높음</li><li>장치와 프로세스 간의 <u>호환성</u> 높음</li><li>시분할 시스템으로 설계된 <u>대화식 운영 체제</u></li><li>소스가 공개된 개방형 시스템</li><li><u>다중 사용자가 다중 작업</u>을 지원</li><li>많은 네트워킹 기능을 제공하므로 <u>통신망 관리용 운영체제</u>로 적합</li></ul></li><li><p>구성</p><ul><li><p>Kernel 커널</p><ul><li><u>프로세스 관리</u></li><li><u>기억장치 관리</u></li><li><u>입출력 관리</u></li><li><u>파일 관리</u></li><li>컴퓨터가 부팅될 때 주기억장치에 적재되어 상주하면서 실행</li></ul></li><li><p>Shell 쉘</p><ul><li><u>사용자의 명령을 인식하는 명령어 해석기</u></li><li><u>시스템과 사용자 간의 인터페이스</u></li><li>주기억장치에 상주하지 않고, 명령어가 포함된 파일 형태로 존재하며 보조 기억장치에서도 교체처리가 가능</li><li>한 프로세스의 출력이 다른 프로세스의 입력으로 사용되는 <u>단방향 통신인 파이프 라인 기능을 지원</u></li></ul></li></ul></li></ul><h4 id="3-linux"><a class="markdownIt-Anchor" href="#3-linux"></a> 3. LINUX</h4><ul><li>리누스 토발즈가 개발한 운영체제</li><li>특징<ul><li>프로그램 <u>소스 코드가 무료로 공개</u>되어 프로그래머가 원하는 기능 추가</li><li>다양한 플랫폼에 설치하여 사용 가능</li><li>재배포가 가능</li><li>UNIX와 완벽하게 호환</li></ul></li></ul><h4 id="4-macos"><a class="markdownIt-Anchor" href="#4-macos"></a> 4. MacOS</h4><ul><li>Apple에서 UNIX 기반으로 개발한 운영체제</li><li>특징<ul><li>아이맥과 맥북 등 애플 사 제품에만 사용이 가능</li><li>드라이버 설치 및 install 과정이 단순함</li></ul></li></ul><h4 id="5-ms-dos"><a class="markdownIt-Anchor" href="#5-ms-dos"></a> 5. MS-DOS</h4><ul><li>Windows 이전 운영체제, CLI</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;응용소프트웨어를 개발하기 위하여 &lt;u&gt;다양한 운영체제의 특징&lt;/u&gt; 이해&lt;/
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="운영체제" scheme="https://hyeonukdev.github.io/tags/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/"/>
    
  </entry>
  
  <entry>
    <title>name &#39;WordCloud&#39; is not defined</title>
    <link href="https://hyeonukdev.github.io/2020/05/04/Error/WordCloud/"/>
    <id>https://hyeonukdev.github.io/2020/05/04/Error/WordCloud/</id>
    <published>2020-05-04T06:35:25.000Z</published>
    <updated>2020-05-04T06:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>설치</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wordcloud</span><br></pre></td></tr></table></figure><ul><li>import 하기</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br></pre></td></tr></table></figure><p>참조 : <a href="https://lovit.github.io/nlp/2018/04/17/word_cloud/">https://lovit.github.io/nlp/2018/04/17/word_cloud/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;설치&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="Error해결" scheme="https://hyeonukdev.github.io/categories/Error%ED%95%B4%EA%B2%B0/"/>
    
    
      <category term="WordCloud" scheme="https://hyeonukdev.github.io/tags/WordCloud/"/>
    
  </entry>
  
</feed>
