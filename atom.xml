<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Engineering</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyeonukdev.github.io/"/>
  <updated>2020-05-19T15:44:55.000Z</updated>
  <id>https://hyeonukdev.github.io/</id>
  
  <author>
    <name>Hyeonukdev</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>인터페이스설계확인 - 인터페이스보안</title>
    <link href="https://hyeonukdev.github.io/2020/05/20/Engineer_Information_Processing/ch09_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B8%B0%EB%8A%A5%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B3%B4%EC%95%88/"/>
    <id>https://hyeonukdev.github.io/2020/05/20/Engineer_Information_Processing/ch09_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B8%B0%EB%8A%A5%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B3%B4%EC%95%88/</id>
    <published>2020-05-19T15:44:55.000Z</published>
    <updated>2020-05-19T15:44:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="인터페이스설계확인"><a class="markdownIt-Anchor" href="#인터페이스설계확인"></a> 인터페이스설계확인</h2><ul><li>개발하고자 하는 응요소프트웨어와 연계 대상 모듈 간의 세부 설계서를 확인하여<ul><li><u>일관되고 정형화된 인터페이스 기능 구현을 정의</u></li><li><u>공통적인 인터페이스 구현</u></li></ul></li><li>실패 시 <u>예외 처리 방안을 정의</u></li><li><u>인터페이스 보안 기능 적용</u></li></ul><h3 id="sniffing-스니핑"><a class="markdownIt-Anchor" href="#sniffing-스니핑"></a> Sniffing 스니핑</h3><ul><li>데이터 통신 내역을 중간에서 감청하여 기밀성을 훼손할 수 있는 방법</li><li>주로 <u>패킷 분석기 같은 툴</u>을 통해서 진행</li></ul><h3 id="secure-coding-시큐어-코딩"><a class="markdownIt-Anchor" href="#secure-coding-시큐어-코딩"></a> Secure Coding 시큐어 코딩</h3><ul><li>대표적인 엡 애플리케이션의 보안 취약점 발표 사례인 OWASP; Open Web Application Security Project 참고 KISA에서 SW보안 약점 가이드 발표</li><li>항목<ul><li>입력 데이터 검증 및 표현</li><li>API 이용</li><li>보안 특성</li><li>시간 및 상태</li><li>에러 처리</li><li>코드 품질</li><li>캡슐화</li></ul></li></ul><h3 id="네트워크-구간-보안-기능-적용"><a class="markdownIt-Anchor" href="#네트워크-구간-보안-기능-적용"></a> 네트워크 구간 보안 기능 적용</h3><ul><li>인터페이스 송수신 간 중간자에 의한 데이터 탈취 위/변조를 막기 위해서는 <u>네트워크 트래픽에 대한 암호화 필요</u></li><li>아키텍처에 따라 다양한 방식으로 보안 기능 적용<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0520_04.png" alt="네트워크 구간 보안 기능 적용" /></li></ul><h3 id="애플리케이션-보안-기능-적용"><a class="markdownIt-Anchor" href="#애플리케이션-보안-기능-적용"></a> 애플리케이션 보안 기능 적용</h3><ul><li>애플리케이션 구현 <u>코드상에 보안 취약점을 보안</u>하는 방향으로 애플리케이션 보안 기능을 적용</li><li>고려사항<ul><li>비인가자 접근 권한 관리</li><li>악의적 코드 삽입 금지</li><li>악의적 시도 시 에러 처리</li></ul></li></ul><h3 id="데이터베이스에-보안-기능-적용"><a class="markdownIt-Anchor" href="#데이터베이스에-보안-기능-적용"></a> 데이터베이스에 보안 기능 적용</h3><ul><li><u>접근 권한 및 동작 개체의 보안 취약점을 보안</u>하기 위해 보안 기능을 적용</li><li>민감 데이터는 데이터 자체의 보안 방안도 고려</li><li>고려사항<ul><li>데이터베이스 접근 권한</li><li>악의적 코드 삽입 금지</li><li>민감 데이터 관리</li><li>악의적 시도시 에러 처리</li></ul></li></ul><h3 id="데이터베이스-암호화-알고리즘"><a class="markdownIt-Anchor" href="#데이터베이스-암호화-알고리즘"></a> 데이터베이스 암호화 알고리즘</h3><ul><li>대칭 키</li><li>해시</li><li>비대칭 키 알고리즘</li></ul><h3 id="데이터베이스-암호화-기법"><a class="markdownIt-Anchor" href="#데이터베이스-암호화-기법"></a> 데이터베이스 암호화 기법</h3><ul><li>애플리케이션에서 암호화를 수행하는 <u>API방식</u>과 데이터베이스에서 아ㅁ호활르 수행하는 <u>Plug-in방식</u>, 이 둘을 혼합한 <u>Hybrid방식</u><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0520_05.png" alt="데이터베이스 암호화 기법" /></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;인터페이스설계확인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#인터페이스설계확인&quot;&gt;&lt;/a&gt; 인터페이스설계확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;개발하고자 하는 응요소프트웨어와 연계 대상 모듈 간의 세부 설계서를 확인하여
&lt;u
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="인터페이스설계확인" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="인터페이스보안" scheme="https://hyeonukdev.github.io/tags/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%B3%B4%EC%95%88/"/>
    
  </entry>
  
  <entry>
    <title>인터페이스설계확인 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/20/Engineer_Information_Processing/ch09_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/20/Engineer_Information_Processing/ch09_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-19T15:34:21.000Z</published>
    <updated>2020-05-19T15:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="인터페이스설계확인"><a class="markdownIt-Anchor" href="#인터페이스설계확인"></a> 인터페이스설계확인</h2><h3 id="1-인터페이스-기능-확인"><a class="markdownIt-Anchor" href="#1-인터페이스-기능-확인"></a> 1. 인터페이스 기능 확인</h3><ul><li>인터페이스 기능 확인 방법</li></ul><ol><li>인터페이스 목록과 인터페이스 명세서를 포함한 <u>인터페이스 설계서</u>를 통한 인터페이스 기능 확인</li><li>시스템의 <u>정적/동적 모형</u>을 통한 인터페이스 기능 확인</li><li>인터페이스 되는 <u>데이터명세 정의</u>를 통한 인터페이스 기능 확인</li></ol><ul><li>내부, 외부 모듈 연계 방법<ul><li>EAI</li><li>ESB</li></ul></li></ul><h3 id="2-데이터-표준-확인"><a class="markdownIt-Anchor" href="#2-데이터-표준-확인"></a> 2. 데이터 표준 확인</h3><ul><li>인터페이스를 위해 <u>인터페이스가 되어야 할 범위의 데이터들의 형식과 표준을 정의 한 것</u></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;인터페이스설계확인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#인터페이스설계확인&quot;&gt;&lt;/a&gt; 인터페이스설계확인&lt;/h2&gt;
&lt;h3 id=&quot;1-인터페이스-기능-확인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="인터페이스설계확인" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>인터페이스설계확인 - 데이터표준확인</title>
    <link href="https://hyeonukdev.github.io/2020/05/20/Engineer_Information_Processing/ch09_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%91%9C%EC%A4%80%ED%99%95%EC%9D%B8/"/>
    <id>https://hyeonukdev.github.io/2020/05/20/Engineer_Information_Processing/ch09_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%91%9C%EC%A4%80%ED%99%95%EC%9D%B8/</id>
    <published>2020-05-19T15:30:57.000Z</published>
    <updated>2020-05-19T15:30:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="인터페이스설계확인"><a class="markdownIt-Anchor" href="#인터페이스설계확인"></a> 인터페이스설계확인</h2><h3 id="인터페이스-데이터-표준-개념"><a class="markdownIt-Anchor" href="#인터페이스-데이터-표준-개념"></a> 인터페이스 데이터 표준 개념</h3><ul><li>인터페이스를 위해 <u>인터페이스가 되어야 할 범위의 데이터들의 형식과 표준을 정의 한 것</u></li><li><u>인터페이스 데이터 형태의 동일 여부에</u> 따라 기존에 있었던 데이터 중 공통의 영역을 추출하여 정의하는 경우도 있고 인터페이스를 위해 한 쪽의 데이터를 변환하는 경우도 있음</li></ul><h3 id="인터페이스-데이터-표준-확인"><a class="markdownIt-Anchor" href="#인터페이스-데이터-표준-확인"></a> 인터페이스 데이터 표준 확인</h3><ul><li>인터페이스 구현 전에 개발자는 인터페이스 데이터 표준을 확인</li><li>인터페이스 구현 시 데이터 표준을 준수하여 구현</li><li>Json, DB, XML 등 다양한 형태로 인터페이스 모듈의 표현이 가능<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0520_03.png" alt="인터페이스 데이터 표준" /></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;인터페이스설계확인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#인터페이스설계확인&quot;&gt;&lt;/a&gt; 인터페이스설계확인&lt;/h2&gt;
&lt;h3 id=&quot;인터페이스-데이터-표준-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="인터페이스설계확인" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터표준확인" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%91%9C%EC%A4%80%ED%99%95%EC%9D%B8/"/>
    
  </entry>
  
  <entry>
    <title>인터페이스설계확인 - 인터페이스기능확인</title>
    <link href="https://hyeonukdev.github.io/2020/05/19/Engineer_Information_Processing/ch09_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B8%B0%EB%8A%A5%ED%99%95%EC%9D%B8/"/>
    <id>https://hyeonukdev.github.io/2020/05/19/Engineer_Information_Processing/ch09_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B5%AC%ED%98%84/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B8%B0%EB%8A%A5%ED%99%95%EC%9D%B8/</id>
    <published>2020-05-19T14:45:24.000Z</published>
    <updated>2020-05-19T14:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="인터페이스설계확인"><a class="markdownIt-Anchor" href="#인터페이스설계확인"></a> 인터페이스설계확인</h2><ul><li><u>인터페이스 설계서를 기반으로 외부 및 내부 모듈 간 공통적</u>으로 제공되는 기능과 각 데이터의 인터페이스를 확인</li><li>개발하고자 하는 응용소프트웨어와 관련된 <u>외부 및 내부 모듈 간의 연계가 필요한 인터페이스 기능을 식별</u></li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ol><li>EAI; Enterprise Application Integrtion</li></ol><ul><li>기업에서 운영된느 서로 다른 플랫폼 및 애플리케이션들 간의 정보 전달, 연계, 통합을 가능하게 해주는 솔루션</li></ul><ol start="2"><li>ESB; Enterprise Service Bus</li></ol><ul><li>애플리케이션보다는 서비스 중심으로 통합을 지향하는 아키텍처</li></ul><h3 id="인터페이스-기능-개념"><a class="markdownIt-Anchor" href="#인터페이스-기능-개념"></a> 인터페이스 기능 개념</h3><ul><li>내부와 외부 모듈 간 연계 기능</li></ul><h3 id="인터페이스-기능-확인-방법"><a class="markdownIt-Anchor" href="#인터페이스-기능-확인-방법"></a> 인터페이스 기능 확인 방법</h3><ol><li>인터페이스 목록과 인터페이스 명세서를 포함한 <u>인터페이스 설계서</u>를 통한 인터페이스 기능 확인</li><li>시스템의 <u>정적/동적 모형</u>을 통한 인터페이스 기능 확인</li><li>인터페이스 되는 <u>데이터명세 정의</u>를 통한 인터페이스 기능 확인</li></ol><h3 id="인터페이스-설계서-개념"><a class="markdownIt-Anchor" href="#인터페이스-설계서-개념"></a> 인터페이스 설계서 개념</h3><ul><li>이기종 시스템 또는 컴포넌트 간 데이터 교환 및 처리를 위한 목적으로 인터페이스 현황을 한눈에 확인하기 위하여 시스템이 갖는 <u>인터페이스 목록과 각 인터페이스의 상세 데이터 명세와 각 기능의 세부 정보를 정의한 인터페이스 정의서로 구성</u></li></ul><h3 id="시스템-인터페이스-목록-개념"><a class="markdownIt-Anchor" href="#시스템-인터페이스-목록-개념"></a> 시스템 인터페이스 목록 개념</h3><ul><li>연계 업무와 연계에 참여하는 송수신 시스템의 정보, 연계방식과 통신 유형 등에 대한 정보를 포함</li></ul><h3 id="시스템-인터페이스-명세서-개념"><a class="markdownIt-Anchor" href="#시스템-인터페이스-명세서-개념"></a> 시스템 인터페이스 명세서 개념</h3><ul><li>데이터 송신 시스템과 수신 시스템 간의 데이터 저장소와 속성 등의 상세 내역을 포함</li></ul><h3 id="상세-기능별-인터페이스-정의서-개념"><a class="markdownIt-Anchor" href="#상세-기능별-인터페이스-정의서-개념"></a> 상세 기능별 인터페이스 정의서 개념</h3><ul><li>인터페이스를 각 세부 기능의 개요, 세부 기능이 동작하기 전에 필요한 <u>사전 조건, 사후 조건 및 인터페이스 파라미터, 호출 이후 결과를 확인하기 위한 반환 값</u>등을 정의한 문서</li></ul><h3 id="정적동적-모형을-통한-인터페이스-기능-확인"><a class="markdownIt-Anchor" href="#정적동적-모형을-통한-인터페이스-기능-확인"></a> 정적/동적 모형을 통한 인터페이스 기능 확인</h3><ul><li>시스템을 구성하는 <u>주요 구성 요소 간 트랜잭션</u>을 보여 주고, 이를 통해 시스템에서 인터페이스는 어디에 속하고 어떤 트랜잭션이 인터페이스를 통해 상호 교환되는지 확인</li></ul><h3 id="데이터-명세-정의를-통한-인터페이스-기능-확인"><a class="markdownIt-Anchor" href="#데이터-명세-정의를-통한-인터페이스-기능-확인"></a> 데이터 명세 정의를 통한 인터페이스 기능 확인</h3><ul><li>제공 시비스 목록과 이에 대한 인터페이스 방식 및 명세, 리턴 형태까지 정의를 상세화하여 <u>개발 수준에서 인터페이스 기능 확인</u></li></ul><h3 id="내부-외부-모듈-연계-방법"><a class="markdownIt-Anchor" href="#내부-외부-모듈-연계-방법"></a> 내부, 외부 모듈 연계 방법</h3><h4 id="1-eai의-개념"><a class="markdownIt-Anchor" href="#1-eai의-개념"></a> 1. EAI의 개념</h4><ul><li>기업에서 운영된느 서로 다른 플랫폼 및 애플리케이션들 간의 정보 전달, 연계, 통합을 가능하게 해주는 솔루션</li><li>EAI를 사용함으로써 각 비즈니스 간 통합 및 연계성을 증대 시켜 효율성을 높여 줄 수 있으며 각 시스템 간의 확정성을 높여줌</li></ul><h4 id="2-eai의-구축-유형"><a class="markdownIt-Anchor" href="#2-eai의-구축-유형"></a> 2. EAI의 구축 유형</h4><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0520_01.png" alt="EAI 구축 유형" /></p><h4 id="3-esb의-개념"><a class="markdownIt-Anchor" href="#3-esb의-개념"></a> 3. ESB의 개념</h4><ul><li>애플리케이션보다는 서비스 중심으로 통합을 지향하는 아키텍처</li><li>웹 서비스 중심으로 표준화된 데이터, 버스를 통해 이기종 애플리케이션을 유연하게 통합하는 핵심 플랫폼<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0520_02.png" alt="ESB 구성" /></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;인터페이스설계확인&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#인터페이스설계확인&quot;&gt;&lt;/a&gt; 인터페이스설계확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;인터페이스 설계서를 기반으로 외부 및 내부 모듈 간 공통적&lt;/u&gt;으로 제공되
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="인터페이스설계확인" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84%ED%99%95%EC%9D%B8/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="인터페이스기능확인" scheme="https://hyeonukdev.github.io/tags/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EA%B8%B0%EB%8A%A5%ED%99%95%EC%9D%B8/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-18T14:59:39.000Z</published>
    <updated>2020-05-18T14:59:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><h3 id="1-dml"><a class="markdownIt-Anchor" href="#1-dml"></a> 1. DML</h3><ul><li>데이터를 조작하는 명령어이며, 여기서 조작은 데이터 관점에서 생명 주기를 제어하는 것을 의미</li><li>종류<ul><li>INSERT</li><li>UPDATE</li><li>DELETE</li><li>SELECT</li></ul></li></ul><h3 id="2-dcl"><a class="markdownIt-Anchor" href="#2-dcl"></a> 2. DCL</h3><ul><li>무결성, 보안 및 권한 제어, 회복을 위해 데이터베이스에 접근을 제어하는 SQL 명령어</li><li>종류<ul><li>GRANT</li><li>REVOKE</li><li>COMMIT</li><li>ROLLBACK</li></ul></li></ul><h3 id="3-집계썽-sql-작성"><a class="markdownIt-Anchor" href="#3-집계썽-sql-작성"></a> 3. 집계썽 SQL 작성</h3><ul><li>단일행을 기반으로 산출하지 않고 <u>복수 행을 그룹별로 모아 놓고 그룹당 단일 계산 결과를 반환</u></li><li>GROUP BY 구문을 활용하여 복수 행을 그룹핑</li><li>SELECT, HAVING, ORDER BY 등의 구문에 활용</li><li>종류<ul><li>집계함수<ul><li>COUNT</li><li>SUM</li><li>AVG</li><li>MAX</li><li>MIN</li></ul></li><li>그룹함수<ul><li>ROLLUP</li><li>CUBE</li><li>GROUPING SETS</li></ul></li><li>윈도우 함수<ul><li>순위 함수</li><li>그룹 내 비율 함수</li><li>행 순서 함수</li></ul></li></ul></li></ul><h3 id="4-오류-처리"><a class="markdownIt-Anchor" href="#4-오류-처리"></a> 4. 오류 처리</h3><ul><li>프로그램 코드 상의 구문 오류 또는 프로그램 실행시 상황에 따라 발생하는 오류를 처리하는 과정</li><li>방법<ol><li>오류 복구</li><li>오류 회피</li><li>오류 전환</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;h3 id=&quot;1-dml&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-dml&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - 오류처리</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/%EC%98%A4%EB%A5%98%EC%B2%98%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/%EC%98%A4%EB%A5%98%EC%B2%98%EB%A6%AC/</id>
    <published>2020-05-18T14:57:35.000Z</published>
    <updated>2020-05-18T14:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><h3 id="오류처리의-개념"><a class="markdownIt-Anchor" href="#오류처리의-개념"></a> 오류처리의 개념</h3><ul><li>프로그램 코드 상의 구문 오류 또는 프로그램 실행시 상황에 따라 발생하는 오류를 처리하는 과정</li></ul><h3 id="오류-처리-방법"><a class="markdownIt-Anchor" href="#오류-처리-방법"></a> 오류 처리 방법</h3><ol><li>오류 복구<ul><li>예외상황을 파악하고 문제를 해결하여 정상상태로 돌려 놓는것</li></ul></li><li>오류 회피<ul><li>예외 처리를 자신을 호출한 쪽으로 던져 버림</li></ul></li><li>오류 전환<ul><li>예외를 메소드 밖으로 던지지만 예외 회피와 달리 적절한 예외로 전환해서 던짐</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;h3 id=&quot;오류처리의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#오류처리의-개념&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="오류처리" scheme="https://hyeonukdev.github.io/tags/%EC%98%A4%EB%A5%98%EC%B2%98%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - 집계성DCL작성</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/%EC%A7%91%EA%B3%84%EC%84%B1SQL/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/%EC%A7%91%EA%B3%84%EC%84%B1SQL/</id>
    <published>2020-05-18T14:41:34.000Z</published>
    <updated>2020-05-18T14:41:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><h3 id="데이터-분석-함수의-정의"><a class="markdownIt-Anchor" href="#데이터-분석-함수의-정의"></a> 데이터 분석 함수의 정의</h3><ul><li>관계형 데이터베이스에서는 단일행 기준의 처리가 주로 이루어지나 <u>총합, 평균 등의 데이터 분석은 복수 행 기준의 데이터를 모아서 처리</u></li><li>다중행 처리를 목적으로 하는 <u>다중 행 함수가 존재</u></li></ul><h3 id="데이터-분석-함수의-특성"><a class="markdownIt-Anchor" href="#데이터-분석-함수의-특성"></a> 데이터 분석 함수의 특성</h3><ul><li>단일행을 기반으로 산출하지 않고 <u>복수 행을 그룹별로 모아 놓고 그룹당 단일 계산 결과를 반환</u></li><li><u>GROUP BY 구문을 활용하여 복수행을 그룹핑</u></li></ul><h3 id="데이터-분석-함수의-유형"><a class="markdownIt-Anchor" href="#데이터-분석-함수의-유형"></a> 데이터 분석 함수의 유형</h3><ul><li>데이터 튜플 간의 상호 연관 및 계산 분석을 위한 세 가지<ol><li>집계 함수</li><li>그룹 함수</li><li>윈도우 함수</li></ol></li><li>집계 함수는 명령어도 상대적으로 단순하며 이를 기본으로 하여 그룹 함수나 윈도우 함수에도 적용</li><li><u>집계 함수는 그룹 함수의 한 부분</u></li></ul><h3 id="집계-함수의-구문"><a class="markdownIt-Anchor" href="#집계-함수의-구문"></a> 집계 함수의 구문</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_09.png" alt="집계함수의 구문" /></p><ul><li>GROUP BY 구문 뒤에 <u>테이블을 구분하는 컬럼을 기재하여 그룹화</u></li><li>HAVING 구문은 WHERE 조건으로 지정된 데이터 집합으로 부터 <u>그룹화 된 집합에 대한 조건 선택 시에 사용</u></li></ul><h3 id="집계함수의-분류"><a class="markdownIt-Anchor" href="#집계함수의-분류"></a> 집계함수의 분류</h3><ul><li>COUNT(입력값)<ul><li>복수 행의 줄 수</li></ul></li><li>SUM(입력값)<ul><li>복수 행의 해당 컬럼 간의 합계</li></ul></li><li>AVG(입력값)<ul><li>복수 행의 해당 컬럼 간의 평균</li></ul></li><li>MAX(입력값)<ul><li>복수 행의 해당 컬럼 간의 최댓값</li></ul></li><li>MIN(입력값)<ul><li>복수 행의 해당 컬럼 간의 최솟값</li></ul></li><li>STDDEV(입력값)<ul><li>복수 행의 해당 컬럼 간의 표준편차</li></ul></li><li>VARIAN(입력값)<ul><li>복수 행의 해당 컬럼 간의 분산</li></ul></li></ul><h3 id="그룹-함수의-개념"><a class="markdownIt-Anchor" href="#그룹-함수의-개념"></a> 그룹 함수의 개념</h3><ul><li><u>소계 및 총계</u>등을 구하기 위해서 집계 함수만 사용한다면 레벨별 집계를 위한 각 단계별 데이터 질의어를 UNION ALL 등으로 결합하고 표시하는 단계 필요</li><li><u>단일 DQL만으로도 원하는 작업 가능</u></li><li>정렬이 필요한 경우 <u>ORDER BY</u>절에 정렬 컬럼 명시</li></ul><h3 id="그룹-함수의-종류"><a class="markdownIt-Anchor" href="#그룹-함수의-종류"></a> 그룹 함수의 종류</h3><ol><li>ROLLUP<ul><li><u>소계 등 중간 집계 값을 산출 위한 칼럼을 ROLLUP 뒤 기재</u></li><li>지정 칼럼의 수 보다 하나 더 큰 레벨의 중간 집계 값이 생성</li><li>SELECT 뒤에 포함되는 칼럼이 GROUP BY 또는 ROLLUP 뒤에 기재되어야 한다는 점 숙지<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_10.png" alt="ROLLUP" /></li></ul></li><li>CUBE<ul><li><u>결합 가능한 모든 값에 대해 다차원 집계를 생성</u>하며, 가능한 한 소집계만을 생성하는 ROLLUP과 구별</li><li>내부적으로 대상 컬럼의 순서를 변경하여 또 한 번의 쿼리를 수행</li><li><u>지정 컬럼의 순서가 바뀌어도 결과는 같음</u><br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_11.png" alt="CUBE" /></li></ul></li><li>GROUPING SETS<ul><li>원하는 <u>특정 항목에 대한 다양한 소계 집합 계산</u> 가능</li><li>집계 대상 칼럼 들에 대한 개별 집계를 구할 수 있고 칼럼 간 순서가 바뀌어도 정렬 순서는 바뀔 수 있으나 결과는 같음<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_12.png" alt="GROUPING SETS" /></li></ul></li></ol><h3 id="윈도우-함수의-개념"><a class="markdownIt-Anchor" href="#윈도우-함수의-개념"></a> 윈도우 함수의 개념</h3><ul><li>데이터베이스를 사용한 온라인 분석 처리 용도로 사용하기 위해서 표준 SQL에 추가된 기능</li><li>온라인 분석 처리는 시장 분석, 통계 작성, 경영 계획 분석 및 수립 등 비즈니스 현장에서 자주 사용되는 분석이 포함</li><li>데이터 기반 의사 결정의 증가에 따라 그 중요성이 더욱 증가하는 실정</li></ul><h3 id="윈도우-함수의-구분"><a class="markdownIt-Anchor" href="#윈도우-함수의-구분"></a> 윈도우 함수의 구분</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_13.png" alt="윈도우 함수의 구분" /></p><ul><li>PARTITION BY는 선택 항목이며 <u>순위를 정할 대상 범위의 컬럼을 설정</u></li><li>OVER문구가 필수적으로 포함되며, ORDER BY 뒤에는 SORT컬럼을 입력</li></ul><h3 id="윈도우-함수의-종류"><a class="markdownIt-Anchor" href="#윈도우-함수의-종류"></a> 윈도우 함수의 종류</h3><ol><li>집계함수<ul><li>SUM</li><li>MAX</li><li>MIN</li><li>AVG</li><li>COUNT</li></ul></li><li>순위함수<ul><li>RANK : 레코드의 순위를 계산하며, 동일 순위 레코드 존재 시 후 순위는 넘어감</li><li>DENSE_RANK : “”, 동일 순위의 레코드 존재 시에도 후순위를 넘어가지 않음</li><li>ROW_NUMBER : “”, 동일 순위의 값이 존재해도 이와 무관하게 연속 번호 부여</li></ul></li><li>그룹 내 비율 함수<ul><li>RATIO_TO_REPORT</li><li>PERCENT_RANK</li><li>CUME_DIST</li><li>NTILE</li></ul></li><li>행 순서 함수<ul><li>FIRST_VALUE</li><li>LAST_VALUE</li><li>LAG</li><li>LEAD</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;h3 id=&quot;데이터-분석-함수의-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#데이터-
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="집계성DCL작성" scheme="https://hyeonukdev.github.io/tags/%EC%A7%91%EA%B3%84%EC%84%B1DCL%EC%9E%91%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - DCL</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/DCL/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/DCL/</id>
    <published>2020-05-18T14:25:21.000Z</published>
    <updated>2020-05-18T14:25:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><h3 id="dcl-data-control-language-정의"><a class="markdownIt-Anchor" href="#dcl-data-control-language-정의"></a> DCL; Data Control Language 정의</h3><ul><li>무결성, 보안 및 권한 제어, 회복을 위해 데이터베이스에 접근을 제어하는 SQL 명령어</li></ul><h3 id="dcl-조작-대상"><a class="markdownIt-Anchor" href="#dcl-조작-대상"></a> DCL 조작 대상</h3><table><thead><tr><th>오브젝트</th><th>목적</th><th>내용</th></tr></thead><tbody><tr><td>사용자 권한</td><td>접근 통제</td><td>사용자를 등록하고, 사용자에게 특정 데이터베이스를 사용할 수 있는 권리를 부여하는 작업</td></tr><tr><td>트랜잭션</td><td>안전한 거래보장</td><td>동시에 다수의 작업을 독립적으로 안전하게 처리하기 위한 상호 작용 단위</td></tr></tbody></table><h3 id="dcl-유형과-명령어"><a class="markdownIt-Anchor" href="#dcl-유형과-명령어"></a> DCL 유형과 명령어</h3><ul><li>트랜잭션 제어를 위한 명령어 TCL<ul><li>TCL; Transaction Control Language</li><li>TCL과 DCL은 대상이 달라 서로 별개의 개념으로 분류할 수 있으나, 제어 기능의 공통점으로 DCL의 일부료 분류함</li></ul></li><li>명령어<ul><li>DCL<ul><li>GRANT : 사용자 권한 부여</li><li>REVOKE : 사용자 권한 회수</li></ul></li><li>TCL<ul><li>COMMIT : 트랜잭션 확정</li><li>ROLLBACK : 트랜잭션 취소</li><li>SAVEPOTINT : 복귀지점 설정</li></ul></li></ul></li></ul><h3 id="사용자-권한-부여"><a class="markdownIt-Anchor" href="#사용자-권한-부여"></a> 사용자 권한 부여</h3><ul><li>권한은 시스템 권한과 객체 권한으로 분류</li><li>시스템 권한</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRNAT 권한1, 권한2 TO 사용자 계정</span><br></pre></td></tr></table></figure><ul><li>객체 권한</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRNAT 권한1, 권한2 ON 객체명 TO 사용자 계정</span><br></pre></td></tr></table></figure><h3 id="시스템-권한과-객체-권한의-종류"><a class="markdownIt-Anchor" href="#시스템-권한과-객체-권한의-종류"></a> 시스템 권한과 객체 권한의 종류</h3><ul><li>시스템 권한<ul><li>CREATE USER : 계정 생성 권한</li><li>DROP USER : 계정 삭제 권한</li><li>DROP ANY TABLE : 테이블 삭제 권한</li><li>CREATE SESSION : 데이터베이스 접속 권한</li><li>CREATE TABLE : 테이블 생성 권한</li><li>CREATE VIEW : 뷰 생성 권한</li><li>CREATE SEQUENCE : 시퀀스 생성 권한</li><li>CREATE PROCEDURE : 프로시저 생성 권한</li></ul></li><li>객체 권한<ul><li>ALTER : 테이블 변경 권한</li><li>INSERT : 데이터 조작 권한</li><li>DELETE : 데이터 조작 권한</li><li>SELECT : 데이터 조작 권한</li><li>UPDATE : 데이터 조작 권한</li><li>EXECUTE : PROCEDURE 실행 권한</li></ul></li></ul><h3 id="사용자-권한-회수"><a class="markdownIt-Anchor" href="#사용자-권한-회수"></a> 사용자 권한 회수</h3><ul><li>GRANT에 대응하는 권한 회수 명령은 REVOKE</li><li>시스템 권한</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 권한<span class="number">1</span>, 권한<span class="number">2</span> <span class="keyword">FROM</span> 사용자계정</span><br></pre></td></tr></table></figure><ul><li>객체 권한</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 권한<span class="number">1</span>, 권한<span class="number">2</span> <span class="keyword">ON</span> 객체명 <span class="keyword">FROM</span> 사용자계정</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;h3 id=&quot;dcl-data-control-language-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anch
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="사용자정의함수" scheme="https://hyeonukdev.github.io/tags/%EC%82%AC%EC%9A%A9%EC%9E%90%EC%A0%95%EC%9D%98%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - DML</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/DML/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%9D%91%EC%9A%A9SQL/DML/</id>
    <published>2020-05-18T14:06:35.000Z</published>
    <updated>2020-05-18T14:06:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><ul><li>한 개의 테이블에 대해 <u>데이터를 삽입, 수정, 삭제하고 행을 조회하는 DML 명령문을 작성</u></li><li><u>윈도우 함수와 그룹 함수를 사용하여 순위와 소계, 중계, 총합계를 산출하는 DML 명령문을 작성</u></li><li>사용자의 그룹을 정의하여 사용자를 생성 또는 변경할 수 있고 <u>사용자의 권한 부여와 회수를 위한 DCL 명령문을 작성</u></li></ul><h3 id="dml-data-manipulation-language-정의"><a class="markdownIt-Anchor" href="#dml-data-manipulation-language-정의"></a> DML; Data Manipulation Language 정의</h3><ul><li>데이터를 조작하는 명령어이며, 여기서 조작은 데이터 관점에서 생명 주기를 제어하는 것을 의미</li></ul><h3 id="dml-유형"><a class="markdownIt-Anchor" href="#dml-유형"></a> DML 유형</h3><table><thead><tr><th>구분</th><th>명령어</th><th>내용</th></tr></thead><tbody><tr><td>데이터 생성</td><td>INSERT</td><td>삽입 형태로 신규 데이터를 테이블에 저장</td></tr><tr><td>데이터 조회</td><td>SELECT</td><td>테이블의 내용을 레코드 단위로 조회</td></tr><tr><td>데이터 변경</td><td>UPDATE</td><td>테이블의 내용을 레코드 단위로 변경</td></tr><tr><td>데이터 삭제</td><td>DELETE</td><td>테이블의 내용을 레코드 단위로 삭제</td></tr></tbody></table><h3 id="데이터-삽입-insert"><a class="markdownIt-Anchor" href="#데이터-삽입-insert"></a> 데이터 삽입 INSERT</h3><ul><li>데이터를 삽입하기 위한 명령어로 다음과 같이 두 가지 형태의 명령문 형식 제공</li><li>데이터 삽입 결과로 하나의 레코드가 추가되므로 삽입에 사용되는 정보는 하나의 레코드를 충분히 묘사해야 함</li><li>기본형식</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span>(value1, value2,...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1, column2, ...) <span class="keyword">VALUES</span>(value1, value2, ...);</span><br></pre></td></tr></table></figure><h3 id="데이터-조회-select"><a class="markdownIt-Anchor" href="#데이터-조회-select"></a> 데이터 조회 SELECT</h3><ul><li>레코드 단위로 데이터의 내용을 조회할 때 사용하는 명령어</li><li>가장 많이 사용되는 SQL명령어로서, 다른 DML 명령어와 같이 사용되어 SQL 활용을 풍부하게 함</li><li>기본 형식</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">OPTION</span>] <span class="keyword">columns</span> <span class="keyword">FROM</span> <span class="keyword">table</span> [<span class="keyword">WHERE</span> 절];</span><br></pre></td></tr></table></figure><pre><code>- OPTION    - ALL    - DISTINCT- columns    - 칼럼명 목록    - 와일드 카드</code></pre><h3 id="데이터-수정-update"><a class="markdownIt-Anchor" href="#데이터-수정-update"></a> 데이터 수정 UPDATE</h3><ul><li>레코드 단위로 데이터의 내용을 수정할 때 사용하는 명령어</li><li>WHERE 절을 통해 어떤 조건이 만족할 경우에만 특정 칼럼의 값을 수정하는 용도로 많이 사용</li><li>기본 형식</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tabel <span class="keyword">SET</span> column1=value1, column2=value2 ... [<span class="keyword">WHERE</span>절];</span><br></pre></td></tr></table></figure><h3 id="데이터-삭제-delete"><a class="markdownIt-Anchor" href="#데이터-삭제-delete"></a> 데이터 삭제 DELETE</h3><ul><li>레코드 단위로 데이터틔 내용을 삭제할 때 사용하는 명령어</li><li>WHERE 절을 통해 어떤 조건이 만족하는 레코드만 삭제 가능</li><li>조건절 없이 DELETE하는 경우 테이블 전체가 한 번에 삭제</li><li>기본 형식</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">table</span>[<span class="keyword">WHERE</span> 절];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;한 개의 테이블에 대해 &lt;u&gt;데이터를 삽입, 수정, 삭제하고 행을 조회하는 DML 명령문을 작성&lt;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="사용자정의함수" scheme="https://hyeonukdev.github.io/tags/%EC%82%AC%EC%9A%A9%EC%9E%90%EC%A0%95%EC%9D%98%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%A0%88%EC%B0%A8%ED%98%95SQL/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%A0%88%EC%B0%A8%ED%98%95SQL/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-18T13:50:19.000Z</published>
    <updated>2020-05-18T13:50:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><h3 id="1-사용자-정의함수"><a class="markdownIt-Anchor" href="#1-사용자-정의함수"></a> 1. 사용자 정의함수</h3><ul><li>절차형 SQL을 활용하여 일련의 <u>연산 처리 결과를 단일값으로 변환</u></li><li>DBMS에서 제공되는 공통적 함수 이외에 <u>사용자가 직접 정의하고 작성</u></li><li><u>호출을 통해 실행되며, 단일값을 조회 또는 삽입, 수정 작업에 이용</u></li></ul><h3 id="2-트리거"><a class="markdownIt-Anchor" href="#2-트리거"></a> 2. 트리거</h3><ul><li>특정 테이블에 <u>삽입, 수정, 삭제 등의 데이터 변경 이벤트가 발생하면 DBMS에서 자동적으로 실행</u>되도록 구현된 프로그램</li><li>이벤트는 <u>전체 트랜잭션 대상과 각 행에 의해 발생되는 경우 모두를 포함할 수 있으며 테이블과 뷰, DB작업을 대상으로 정의</u></li><li>데이터 제어어 사용 불가</li></ul><h3 id="3-이벤트"><a class="markdownIt-Anchor" href="#3-이벤트"></a> 3. 이벤트</h3><ul><li>특정 시간에 특정한 쿼리, 프로시저, 함수 등을 실행시키는 기능</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;h3 id=&quot;1-사용자-정의함수&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-사용자-정
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - 이벤트</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%A0%88%EC%B0%A8%ED%98%95SQL/%EC%9D%B4%EB%B2%A4%ED%8A%B8/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%A0%88%EC%B0%A8%ED%98%95SQL/%EC%9D%B4%EB%B2%A4%ED%8A%B8/</id>
    <published>2020-05-18T13:48:16.000Z</published>
    <updated>2020-05-18T13:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><h3 id="이벤트의-개념"><a class="markdownIt-Anchor" href="#이벤트의-개념"></a> 이벤트의 개념</h3><ul><li>특정 시간에 특정한 쿼리, 프로시저, 함수 등을 실행시키는 기능</li></ul><h3 id="이벤트-생성-사례"><a class="markdownIt-Anchor" href="#이벤트-생성-사례"></a> 이벤트 생성 사례</h3><ul><li>MySql의 경우 이벤트를 생성시, mysql.evnet, information_schema, events 테이블에 자동으로 등록</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;h3 id=&quot;이벤트의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#이벤트의-개념&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="이벤트" scheme="https://hyeonukdev.github.io/tags/%EC%9D%B4%EB%B2%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - 트리거</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%A0%88%EC%B0%A8%ED%98%95SQL/%ED%8A%B8%EB%A6%AC%EA%B1%B0/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%A0%88%EC%B0%A8%ED%98%95SQL/%ED%8A%B8%EB%A6%AC%EA%B1%B0/</id>
    <published>2020-05-18T13:43:41.000Z</published>
    <updated>2020-05-18T13:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><h3 id="트리거의-개념"><a class="markdownIt-Anchor" href="#트리거의-개념"></a> 트리거의 개념</h3><ul><li>특정 테이블에 <u>삽입, 수정, 삭제 등의 데이터 변경 이벤트가 발생하면 DBMS에서 자동적으로 실행</u>되도록 구현된 프로그램</li><li>이벤트는 <u>전체 트랜잭션 대상과 각 행에 의해 발생되는 경우 모두를 포함할 수 있으며 테이블과 뷰, DB작업을 대상으로 정의</u></li></ul><h3 id="트리거의-목적"><a class="markdownIt-Anchor" href="#트리거의-목적"></a> 트리거의 목적</h3><ul><li>특정 테이블에 대한 <u>데이터 변경을 시작점으로 설정하고, 그와 관련된 작업을 자동적으로 수행</u></li><li>일반적으로 이벤트와 관련된 테이블의 데이터 삽입, 추가, 삭제 작업을 <u>DBMS가 자동적으로 실행시키는데 활용</u></li><li><u>데이터 무결성 유지 및 로그 메시지 출력</u>등의 별도 처릴르 위해 트리거 사용</li></ul><h3 id="트리거의-세-가지-구성-요소"><a class="markdownIt-Anchor" href="#트리거의-세-가지-구성-요소"></a> 트리거의 세 가지 구성 요소</h3><ol><li>트리거가 실행될 조건이 되는 문장이나 이벤트</li><li>실행 조건의 제약</li><li>실행될 내용</li></ol><h3 id="트리거-작성시-주의사항"><a class="markdownIt-Anchor" href="#트리거-작성시-주의사항"></a> 트리거 작성시 주의사항</h3><ol><li>데이터 제어어 사용불가<ul><li>트리거 내에 commit, rollback 등 사용 불가</li></ul></li><li>오류에 주의<ul><li>트리거 실행 중 오류가 발생시 트리거 실행의 원인을 제공한 데이터 작업에도 영향</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;h3 id=&quot;트리거의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#트리거의-개념&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="트리거" scheme="https://hyeonukdev.github.io/tags/%ED%8A%B8%EB%A6%AC%EA%B1%B0/"/>
    
  </entry>
  
  <entry>
    <title>절차형SQL - 사용자 정의함수</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%A0%88%EC%B0%A8%ED%98%95SQL/%EC%82%AC%EC%9A%A9%EC%9E%90%EC%A0%95%EC%9D%98%ED%95%A8%EC%88%98/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch10_SQL%EC%9D%91%EC%9A%A9/%EC%A0%88%EC%B0%A8%ED%98%95SQL/%EC%82%AC%EC%9A%A9%EC%9E%90%EC%A0%95%EC%9D%98%ED%95%A8%EC%88%98/</id>
    <published>2020-05-18T13:30:40.000Z</published>
    <updated>2020-05-18T13:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="절차형sql"><a class="markdownIt-Anchor" href="#절차형sql"></a> 절차형SQL</h2><ul><li>반복적으로 사용하는 특정 기능을 수행하기 위해 <u>여러개의 SQL 명령문을 포함하는 프로시저를 작성하고 프로시저 호출문을 작성</u></li><li>일련의 연산 처리 결과가 단일값으로 반환되는 <u>사용자 정의함수를 작성하고 호출하는 쿼리를 작성</u></li><li>하나의 이벤트가 발생하면 관련성이 있는 몇 개의 테이블 간에 연속적으로 <u>데이터 삽입, 삭제, 수정을 할 수 있는 트리거를 작성</u></li></ul><h3 id="사용자-정의함수-개념"><a class="markdownIt-Anchor" href="#사용자-정의함수-개념"></a> 사용자 정의함수 개념</h3><ul><li>절차형 SQL을 활용하여 일련의 <u>연산 처리 결과를 단일값으로 변환</u></li><li>DBMS에서 제공되는 공통적 함수 이외에 <u>사용자가 직접 정의하고 작성</u></li><li><u>호출을 통해 실행되며, 단일값을 조회 또는 삽입, 수정 작업에 이용</u></li></ul><h3 id="사용자-정의함수의-구성"><a class="markdownIt-Anchor" href="#사용자-정의함수의-구성"></a> 사용자 정의함수의 구성</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_06.png" alt="사용자 정의함수의 구성" /></p><h3 id="사용자-정의함수-작성-예"><a class="markdownIt-Anchor" href="#사용자-정의함수-작성-예"></a> 사용자 정의함수 작성 예</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_07.png" alt="사용자 정의함수의 작성 예시" /></p><h3 id="사용자-정의함수-호출-쿼리-작성"><a class="markdownIt-Anchor" href="#사용자-정의함수-호출-쿼리-작성"></a> 사용자 정의함수 호출 쿼리 작성</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_08.png" alt="사용자 정의함수의 호출 쿼리 작성" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;절차형sql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#절차형sql&quot;&gt;&lt;/a&gt; 절차형SQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;반복적으로 사용하는 특정 기능을 수행하기 위해 &lt;u&gt;여러개의 SQL 명령문을 포함하는 프로시저를 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차형SQL" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%A0%88%EC%B0%A8%ED%98%95SQL/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="사용자정의함수" scheme="https://hyeonukdev.github.io/tags/%EC%82%AC%EC%9A%A9%EC%9E%90%EC%A0%95%EC%9D%98%ED%95%A8%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-18T10:38:39.000Z</published>
    <updated>2020-05-18T10:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="1-물리-데이터-모델-품질-기준"><a class="markdownIt-Anchor" href="#1-물리-데이터-모델-품질-기준"></a> 1. 물리 데이터 모델 품질 기준</h3><ul><li><u>데이터베이스 성능 향상과 오류 예방</u></li><li>품질 기준<ul><li>정확성</li><li>완전성</li><li>준거성</li><li>최신성</li><li>일관성</li><li>활용성</li></ul></li></ul><h3 id="2-물리-e-r-다이어그램"><a class="markdownIt-Anchor" href="#2-물리-e-r-다이어그램"></a> 2. 물리 E-R 다이어그램</h3><ul><li>논리데이터 모델 물리 데이터 모델 변환<ol><li>단위 엔티티 -&gt; 테이블</li><li>속성 -&gt; 칼럼</li><li>UID -&gt; 기본키</li><li>관계 -&gt; 외래키</li><li>관리 목적의 테이블/칼럼 추가</li><li>칼럼 유형과 길이 정의</li><li>데이터 표준 적용</li></ol></li></ul><h3 id="3-crud-분석"><a class="markdownIt-Anchor" href="#3-crud-분석"></a> 3. CRUD 분석</h3><ul><li>CRUD 매트릭스 분석 개념<ul><li>데이터 프로세스를 행으로 하고 엔티티 목록을 열로 하여 CRUD Matrix를 작성한 후 CRUD Matrix에서 사용되지 않는 프로세스와 엔티티 여부 확인하는 분석 기법</li></ul></li><li>점검사항<ul><li>모든 엔티티 타입에 CRUD가 한 번 이상 표기되었는가?</li><li>모든 엔티티 타입에 C가 한 번 이상 존재하는가?</li><li>모든 엔티티 타입에 R이 한 번 이상 존재하는가?</li><li>모든 단위 프로세스가 하나 이상의 엔티티 타입에 표기가 되는가?</li></ul></li></ul><h3 id="4-sql-성능-튜닝"><a class="markdownIt-Anchor" href="#4-sql-성능-튜닝"></a> 4. SQL 성능 튜닝</h3><ul><li>SQL 성능 튜닝의 정의<ul><li>튜닝 대상이 되는 <u>SQL을 이해하고 정보를 분석하여 성능을 개선</u>하는<br />활동</li></ul></li><li>SQL 성능 튜닝의 순서<ol><li>문제 있는 SQL 식별</li><li>옵티마이저 통계 확인</li><li>실행 계획 검토</li><li>SQL문 재구성</li><li>인덱스 재구성</li><li>실행 계획 유지 관리</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-물리-데이터-모델-품질-기준&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 물리데이터 모델 품질 기준</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/SQL%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/SQL%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D/</id>
    <published>2020-05-18T10:01:16.000Z</published>
    <updated>2020-05-18T10:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="sql-성능-튜닝의-정의"><a class="markdownIt-Anchor" href="#sql-성능-튜닝의-정의"></a> SQL 성능 튜닝의 정의</h3><ul><li>튜닝 대상이 되는 <u>SQL을 이해하고 정보를 분석하여 성능을 개선</u>하는 활동</li><li>최소한의 CPU, I/O, 메모리를 사용하여 최대한 빠른 시간 내에 원하는 작업을 수행하도록 만드는 것</li></ul><h3 id="sql-성능-튜닝의-순서"><a class="markdownIt-Anchor" href="#sql-성능-튜닝의-순서"></a> SQL 성능 튜닝의 순서</h3><ol><li>문제 있는 SQL 식별</li><li>옵티마이저 통계 확인</li><li>실행 계획 검토</li><li>SQL문 재구성</li><li>인덱스 재구성</li><li>실행 계획 유지 관리</li></ol><h3 id="sql-성능-튜닝-순서"><a class="markdownIt-Anchor" href="#sql-성능-튜닝-순서"></a> SQL 성능 튜닝 순서</h3><h4 id="1-문제-있는-sql-식별"><a class="markdownIt-Anchor" href="#1-문제-있는-sql-식별"></a> 1. 문제 있는 SQL 식별</h4><ul><li>애플리케이션의 성능을 관리하거나 모니터링하기 위한 툴인 APM을 활용<ul><li>APM; Application Performance Management</li></ul></li></ul><h3 id="2-옵티마이저-통계확인"><a class="markdownIt-Anchor" href="#2-옵티마이저-통계확인"></a> 2. 옵티마이저 통계확인</h3><ul><li>개발자가 작성한 SQL을 가장 빠르고 효율적으로 수행할 <u>최적의 처리경로를 생성해 주는 데이터베이스 핵심 모듈</u></li><li>Oracle은 CBO와 RBO 모드 지원<ul><li>CBO; Cost Based Optimizer</li><li>RBO; Rule Based Optimizer</li></ul></li></ul><h3 id="3-실행-계획-검토"><a class="markdownIt-Anchor" href="#3-실행-계획-검토"></a> 3. 실행 계획 검토</h3><ul><li>DBMS의 옵티마이저가 수립한 SQL 코드의 실행 절차와 방법을 의미</li><li>요구사항들을 처리하기 위한 연산 순서가 적혀 있으며, 연산에는 조인, 테이블, 검색, 필터, 정렬 등이 있음</li><li>Driving 테이블이 최상의 필터를 가지고 있는지를 중심으로 검토<ul><li>Driving 테이블<ul><li>조인이 발생할 때 첫 번째로 액세스 되는 테이블</li><li>드라이빙 테이블 순서에 따라 데이터를 액세스하는 양이 대폭 늘어나거나 줄어들 수 있기 때문에 어떤 테이블을 먼저 드라이빙 하는지가 매우 중요</li><li>가장 적은 데이터를 추출할 것으로 예상되는 테이블을 먼저 드라이빙</li></ul></li></ul></li><li>처리량이 작은 Table을 Driving 테이블로 지정되었는지 확인</li></ul><h3 id="4-sql문-재구성"><a class="markdownIt-Anchor" href="#4-sql문-재구성"></a> 4. SQL문 재구성</h3><ul><li>WHERE절 사용</li><li>칼럼 변경 연산자 확인</li><li>범위 한정 사용<ul><li><b>서브쿼리에 특정 데이터가 존재하는지 확인할 때는 EXISTS 보다 IN 사용</b></li></ul></li></ul><h3 id="5-인덱스-재구성"><a class="markdownIt-Anchor" href="#5-인덱스-재구성"></a> 5. 인덱스 재구성</h3><ul><li>인덱스 구성</li><li>실행 계획 검토</li><li>관련 SQL 검토</li><li>코드 테이블 확인<ul><li><b>단일 인덱스로 조회만 이루어진 테이블은 IOT로 구성</b></li></ul></li><li>불필요한 인덱스 제거</li></ul><h3 id="6-실행-계획-유지관리"><a class="markdownIt-Anchor" href="#6-실행-계획-유지관리"></a> 6. 실행 계획 유지관리</h3><ul><li><u>실행 계획이 유지되고 있는지 모니터링하고 관리</u></li><li>데이터베이스 버전 업그레이드시</li><li>데이터의 시스템 이동 등 시스템 환경의 변경 사항 발생시</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;sql-성능-튜닝의-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터모델품질기준" scheme="https://hyeonukdev.github.io/tags/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B8%B0%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - CRUD분석</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/CRUD%EB%B6%84%EC%84%9D/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/CRUD%EB%B6%84%EC%84%9D/</id>
    <published>2020-05-18T09:40:14.000Z</published>
    <updated>2020-05-18T09:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="crud의-개념"><a class="markdownIt-Anchor" href="#crud의-개념"></a> CRUD의 개념</h3><table><thead><tr><th>구분</th><th>조작</th><th>SQL</th></tr></thead><tbody><tr><td>Create</td><td>생성</td><td>INSERT</td></tr><tr><td>Read</td><td>읽기/인출</td><td>SELECT</td></tr><tr><td>Update</td><td>갱신</td><td>UPDATE</td></tr><tr><td>Delete</td><td>삭제/제거</td><td>DELETE</td></tr></tbody></table><h3 id="crud-분석의-개념"><a class="markdownIt-Anchor" href="#crud-분석의-개념"></a> CRUD 분석의 개념</h3><ul><li>데이터베이스 테이블에 변화를 주는 트랜잭션의 CRUD 연산에 대해 CRUD 매트릭스를 작성하여 분석하는 것</li><li>테이블에 발생하는 <u>트랜잭션의 주기별 발생횟수를 파악하고 연관된 테이블을 분석하면 테이블에 저장되는 데이터의 양을 유추</u>할 수 있고 트랜잭션이 몰리는 테이블 분석 가능</li><li>CRUD 연산의 우선순위<ul><li>C &gt; D &gt; U &gt; R</li><li>활용목적에 따라 모두 적을 수 도 있음</li></ul></li></ul><h3 id="crud-매트릭스-분석-개념"><a class="markdownIt-Anchor" href="#crud-매트릭스-분석-개념"></a> CRUD 매트릭스 분석 개념</h3><ul><li>데이터 프로세스와 엔티티 목록으로 CRUD Matrix 작성<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_05.png" alt="CRUD 매트릭스 분석" /></li></ul><h3 id="crud-매트릭스-점검사항"><a class="markdownIt-Anchor" href="#crud-매트릭스-점검사항"></a> CRUD 매트릭스 점검사항</h3><ul><li>모든 엔티티 타입에 CRUD가 한 번 이상 표기되었는가?</li><li>모든 엔티티 타입에 C가 한 번 이상 존재하는가?</li><li>모든 엔티티 타입에 R이 한 번 이상 존재하는가?</li><li>모든 단위 프로세스가 하나 이상의 엔티티 타입에 표기가 되는가?</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;crud의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cru
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="CRUD분석" scheme="https://hyeonukdev.github.io/tags/CRUD%EB%B6%84%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - E-R 다이어그램</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/ER%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/ER%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8/</id>
    <published>2020-05-18T02:45:23.000Z</published>
    <updated>2020-05-18T02:45:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="논리-데이터-모델의-물리-데이터-모델-변환"><a class="markdownIt-Anchor" href="#논리-데이터-모델의-물리-데이터-모델-변환"></a> 논리 데이터 모델의 물리 데이터 모델 변환</h3><ul><li>엔티티는 테이블, 속성은 칼럼 등으로 변환</li><li>규칙<table><thead><tr><th>논리적 설계</th><th>물리적 설계</th><th>데이터베이스</th></tr></thead><tbody><tr><td>엔티티 Entity</td><td>테이블 Table</td><td>테이블</td></tr><tr><td>속성 Attribute</td><td>칼럼 Column</td><td>칼럼</td></tr><tr><td>주 식별자 Primary Identifier</td><td>기본 키 Primary Key</td><td>기본 키</td></tr><tr><td>외래 식별자 Foreign Identifier</td><td>외래 키 Foreign Key</td><td>외래 키</td></tr><tr><td>관계 Relationship</td><td>관계 Relationship</td><td>-</td></tr></tbody></table></li></ul><h3 id="논리-데이터-모델-물리-데이터-모델-변환-순서"><a class="markdownIt-Anchor" href="#논리-데이터-모델-물리-데이터-모델-변환-순서"></a> 논리 데이터 모델 물리 데이터 모델 변환 순서</h3><h4 id="1-단위-엔티티를-테이블로-변환"><a class="markdownIt-Anchor" href="#1-단위-엔티티를-테이블로-변환"></a> 1. 단위 엔티티를 테이블로 변환</h4><ul><li>논리 모델에서 정의된 엔티티는 물리 모델에서 테이블로 변환</li><li>엔티티는 한글명, 테이블은 영문명으로 명칭을 동일하게 사용</li><li>메타데이터시스템과 같은 사전에 표준화된 용어가 있을 경우 메타에 등록되어 있는 단어 사용하여 명명<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_01.png" alt="테이블 구성 요소" /></li></ul><h5 id="11-슈퍼-타입-기준-테이블-변환"><a class="markdownIt-Anchor" href="#11-슈퍼-타입-기준-테이블-변환"></a> 1.1 슈퍼 타입 기준 테이블 변환</h5><ul><li>서브타입을 슈퍼 타입에 통합하여 하나의 테이블로 만드는 것</li><li>서브타입에 속성이나 관계가 적을 경우에 적용하는 방법</li><li>하나로 통합된 테이블에는 서브 타입의 모든 속성 포함<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_02.png" alt="슈퍼타입 기준테이블 변환" /></li></ul><h5 id="12-슈퍼-타입-변환-장단점"><a class="markdownIt-Anchor" href="#12-슈퍼-타입-변환-장단점"></a> 1.2 슈퍼 타입 변환 장/단점</h5><ul><li>장점<ul><li>데이터의 액세스가 상대적으로 용이</li><li>뷰를 이용하여 각각의 서브 타입 만을 액세스하거나 수정 가능</li><li>수행 속도 향상</li><li>서브 타입 구분이 없는 임의 집합에 대한 가공 용이</li><li>다수의 서브 타입을 통합하는 경우 조인 감소</li><li>복잡한 처리를 하나의 SQL로 통합 용이</li></ul></li><li>단점<ul><li>특정 서브 타입에 대한 NOT Null 제한이 어려움</li><li>테이블의 칼럼 증가로 디스크 저장 공간 증가</li><li>처리마다 서브 타입에 대한 구분이 필요할 경우가 많이 발생</li><li>인덱스의 크기 증가로 인덱스 효율이 낮아짐</li></ul></li></ul><h5 id="13-서브-타입-기준-테이블-변환"><a class="markdownIt-Anchor" href="#13-서브-타입-기준-테이블-변환"></a> 1.3 서브 타입 기준 테이블 변환</h5><ul><li>슈퍼타입 속성들을 각각의 서브 타입에 추가하여 서브타입들을 개별적인 테이블로 만드는 것</li><li>서브 타입에 속성이나 관계가 많을 경우에 적용<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_03.png" alt="서브타입 기준테이블 변환" /></li></ul><h5 id="14-서브-타입-변환-장단점"><a class="markdownIt-Anchor" href="#14-서브-타입-변환-장단점"></a> 1.4 서브 타입 변환 장/단점</h5><ul><li>장점<ul><li>각 서브 타입 속성들의 선택 사양이 명확한 경우에 유리</li><li>서브 타입 유형에 대한 구분을 처리 마다할 필요가 없음</li><li>여러 개의 테이블로 통합하므로 테이블 당 크기가 감소하여 전체 테이블을 스캔하는 경우 유리</li><li>단위 테이블의 크기 감소</li></ul></li><li>단점<ul><li>서브 타입 구분 없이 데이터를 처리하는 경우 UNION이 발생</li><li>처리 속도 감소가 발생할 가능성이 높아짐</li><li>트랜잭션을 처리하는 경우 다수 테이블을 처리하는 경우가 자주 발생</li><li>복잡한 처리를 하는 SQL의 통합이 어려움</li><li>부분 범위에 대한 처리가 곤란해짐</li><li>여러 테이블을 통합한 경우 뷰로 조회만 가능</li><li>UID의 유지관리가 어려움<ul><li>Unique Identifier, 식별자</li></ul></li></ul></li></ul><h5 id="15-개별-타입-기준-테이블-변환"><a class="markdownIt-Anchor" href="#15-개별-타입-기준-테이블-변환"></a> 1.5 개별 타입 기준 테이블 변환</h5><ul><li>슈퍼 타입과 서브 타입들을 각각의 개별적인 테이블로 변환</li><li>슈퍼 타입과 서브 타입 각각의 테이블 사이에는 1:1 관계 형성<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0518_04.png" alt="개별타입 기준테이블 변환" /></li></ul><h5 id="16-개별-타입-기준-테이블-변환을-사용하는-경우"><a class="markdownIt-Anchor" href="#16-개별-타입-기준-테이블-변환을-사용하는-경우"></a> 1.6 개별 타입 기준 테이블 변환을 사용하는 경우</h5><ul><li>전체 데이터에 대한 처리가 자주 발생하는 경우</li><li>서브 타입 처리가 대부분 독립적으로 발생하는 경우</li><li>통합하는 테이블의 칼럼 수가 지나치게 많은 경우</li><li>서브 타입 칼럼 수가 다수인 경우</li><li>트랜잭션이 주로 슈퍼 타입에서 발생하는 경우</li><li>슈퍼 타입에서 범위가 넓은 처리가 빈번하게 발생하여 단일 테이블 클러스터링이 필요한 경우</li></ul><h4 id="2-속성을-column-칼럼으로-변환"><a class="markdownIt-Anchor" href="#2-속성을-column-칼럼으로-변환"></a> 2. 속성을 Column 칼럼으로 변환</h4><ul><li>칼럼의 명칭은 속성의 명칭과 반드시 일치할 필요는 없으나, 개발자와 사용자간 의사소통을 위해 가능한 표준화된 약어를 사용</li><li>SQL 예약어 사용은 피해야 함</li><li>SQL 문장의 가독성을 위해 칼럼 명칭은 가능한 짧게</li><li>칼럼명에 복합 단어 사용할 경우 미리 정의된 표준에 의해 명명</li></ul><h4 id="3-uid를-기본키로-변환"><a class="markdownIt-Anchor" href="#3-uid를-기본키로-변환"></a> 3. UID를 기본키로 변환</h4><ul><li>엔티티의 UID는 기본키로 선언</li><li>Not NULL, Unique 등의 제약 조건을 추가적으로 정의</li></ul><h4 id="4-관계를-외래키로-변환"><a class="markdownIt-Anchor" href="#4-관계를-외래키로-변환"></a> 4. 관계를 외래키로 변환</h4><ul><li>1:n 관계에서 1영역에 있는 기본키를 n영역의 외래키로 선언</li><li>외래키명은 1영역의 기본키 이름을 사용하거나 다른 의미를 가질 경우 변경하여 명명</li><li>순환 관계에서 자신의 기본키는 외래키로 정의</li></ul><h4 id="5-관리-목적의-테이블칼럼-추가"><a class="markdownIt-Anchor" href="#5-관리-목적의-테이블칼럼-추가"></a> 5. 관리 목적의 테이블/칼럼 추가</h4><ul><li>논리 모델링에서는 필요가 없으나 관리 또는 데이터베이스를 이용하는 프로그래밍의 수행 속도를 향상을 위해 추가 되는 테이블이나 칼럼</li><li>관리상 필요한 데이터를 등록한 일자, 시스템 번호 등을 의미</li></ul><h4 id="6-칼럼-유형과-길이-정의"><a class="markdownIt-Anchor" href="#6-칼럼-유형과-길이-정의"></a> 6. 칼럼 유형과 길이 정의</h4><ul><li>정의된 각 컬럼에 대해, 적용 DBMS에서 제공하는 데이터 유형 중 적절한 유형 정의</li><li>해당 데이터의 최대 길이를 파악하여 길이 설정</li><li>자주 사용되는 데이터 유형</li></ul><h4 id="7-데이터-표준-적용"><a class="markdownIt-Anchor" href="#7-데이터-표준-적용"></a> 7. 데이터 표준 적용</h4><ul><li>명명 규칙 및 표준 용어 사전을 활용하여 각 객체의 데이터 표준 수행</li><li>표준화 적용대상<ul><li>데이터베이스</li><li>스토리지 그룹</li><li>테이블 스페이스</li><li>테이블</li><li>칼럼</li><li>인덱스</li><li>뷰</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;논리-데이터-모델의-물리-데이터-모델-변환&quot;&gt;&lt;a class=&quot;markdownIt-Anc
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="ER다이어그램" scheme="https://hyeonukdev.github.io/tags/ER%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 물리데이터 모델 품질 기준</title>
    <link href="https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B8%B0%EC%A4%80/"/>
    <id>https://hyeonukdev.github.io/2020/05/18/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B2%80%ED%86%A0/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B8%B0%EC%A4%80/</id>
    <published>2020-05-18T01:05:02.000Z</published>
    <updated>2020-05-18T01:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><ul><li>물리데이터 모델에 대하여 <u>정확성, 완전성, 준거성, 최신성, 일관성, 활용성</u>의 품질기준을 적용</li><li>논리 데이터 모델과 물리 데이터 모델을 비교하여 테이블, 칼럼, 키, 오브젝트 구성 요소의 누락 여부와 일치성을 확인</li><li>논리 데이터베이스 설계에서 <u>엔티티, 속성, 주식별자, 외래식별자를 각각 테이블, 칼럼, 기본 키, 외래 키로 변환하여 표현</u></li><li><u>CRUD 분석과 SQL 성능 튜닝의 개념과 절차</u>를 이해</li></ul><h3 id="물리-데이터-모델-품질-기준"><a class="markdownIt-Anchor" href="#물리-데이터-모델-품질-기준"></a> 물리 데이터 모델 품질 기준</h3><ul><li>물리 데이터 모델을 설계하고 데이터베이스 객체를 생성한 후 개발 단계로 넘어가기 전에 모델러와 이해관계자들이 모여 수행</li><li>시스템 성능에 직접적인 영향을 미치므로 향후 발생할 문제에 대해 면밀히 검토해야 함</li><li><u>데이터베이스 성능 향상과 오류 예방</u></li><li>검토시 모든 이해관계자가 동의하는 검토 기준이 필요</li></ul><h3 id="품질기준"><a class="markdownIt-Anchor" href="#품질기준"></a> 품질기준</h3><ul><li><p>정확성</p><ul><li>데이터 모델이 표기법에 따라 정확하게 표현되었고, 업무영역 또는 요구사항이 정확하게 반영되었음을 의미</li><li>예시<ul><li>사용된 표기법에 따라 데이터 모델이 정확하게 표현되었는가?</li><li>대상 업무 영역의 업무 개념과 내용이 정확하게 표현되었는가?</li><li>요구사항의 내용이 정확하게 반영되었는가?</li><li>업무 규칙이 정확하게 표현되었는가?</li></ul></li></ul></li><li><p>완정성</p><ul><li>데이터 모델의 구성 요소를 정의하는데 있어서 누락을 최소화하고, 요구 사항 및 업무 영역 반영에 있어서 누락이 없음을 의미</li><li>예시<ul><li>물리 데이터 모델 작성 항목의 충실도</li><li>필요한 설명 항목(테이블/칼럼 설명)들의 작성 상태</li><li>물리 모델링 단계에서 결정해야 할 항목들의 작성 성태(칼럼 데이터 타입 및 길이, Null 허용 여부, 서브타입 변환 등 필요에 따라서는 저장공간 지정, 테이블/인덱스 생성 관련 파라미터 결정 사항등까지도 포함)</li><li>요구 사항 반영 및 업무 영역 방녕의 완전성 : 목적하는 업무 영역을 기술한 논리 데이터 모델의 구성 요소(엔티티, 속성, 관계, 식별자)들이 누락없이 물리 데이터 모델로 변환되어 정의된 정도</li></ul></li></ul></li><li><p>준거성</p><ul><li>제반 준수 요건들이 누락 없이 정화하게 준수되었음을 의미</li><li>예시<ul><li>데이터 표준, 규칙 등을 준수하였는가?</li><li>법적 요건을 준수하였는가?</li><li>법적 요건을 준수하기에 충분하도록 도메인이 정의 되었는가?</li></ul></li></ul></li><li><p>최신성</p><ul><li>데이터 모델이 현행시스템의 최신 상태를 반영하고 있고, 이슈 사항들이 지체 없이 반영되고 있음을 의미</li><li>예시<ul><li>엄무상의 변경이나 결정 사항 등이 시의 적절하게 반영되고 있는가?</li><li>최근의 이슈 사항이 반영되었는가?</li><li>현행 데이터 모델의 현행 시스템과 일치하는가?</li></ul></li></ul></li><li><p>일관성</p><ul><li>여러 영역에서 공통 사용되는 데이터 요소가 전사 수준에서 한 번만 정의되고 이를 여러 다른 영역에서 참조/활용되면서, 모델 표현상의 일관성을 유지하고 있음을 의미</li><li>예씨<ul><li>여러 주제 영역에서 공통적으로 사용되는 개체는 일관성 있게 사용되는가?(전사 수준에서 한 번만 정의되고 이를 여러 다른 영역에서 참조/활용한다는 의미에서 통합성이라고하기도 함)</li><li>모델 표현상의 일관성을 유지하고 있는가?</li><li>동일/유사 목적/용도의 칼럼들은 일관성 있게 정의되었는가?</li><li>조인 대상 칼럼들은 일관성있게 정의되었는가?</li></ul></li></ul></li><li><p>활용성</p><ul><li>작성된 모델과 그 설명 내용이 이해관계자에게 의미를 충분하게 전달할 수 있으면서, 업무 변화 시에 설계 변경없이 최소화되도록 유연하게 설계되어 있음을 의미</li><li>예시<ul><li>작성된 설명 내용이나 모델 표기 등이 사용자나 모델을 보는 사람에게 충분히 이해가 될 수 있고, 모델의 작성 의도를 명확하게 이해할 수 있는가(의사소통의 충분성)</li><li>PK, UK 등의 칼럼 구성은 데이터 무결성을 보장하면서 데이터 액세스를 효율화 하기에 충분한가?</li><li>논리 데이터 모델의 유연성이 물리 데이터 모델에도 반영되었는가(오류가 적고 업무 변화에 유연하게 대응하여 데이터 구조의 변경이 최소화 될 수 있는 설계 결과)</li><li>코드화 대상 칼럼에 대한 코드 정의는 업무 지원 및 적용에 충분한가?</li></ul></li></ul></li></ul><h3 id="물리-데이터-모델의-품질-검토-순서"><a class="markdownIt-Anchor" href="#물리-데이터-모델의-품질-검토-순서"></a> 물리 데이터 모델의 품질 검토 순서</h3><ol><li>데이터 품질 <u>정책 및 기준 확인</u></li><li>물리 데이터 품질의 특성에 따라 <u>품질 기준 작성</u></li><li>데이터 품질 기준에 따라 <u>체크리스트 작성</u></li><li><u>논리 데이터 모델과 물리 데이터 모델 비교</u></li><li>각 모델링 단계의 모델러와 이해관계자가 <u>품질 검토 수행</u></li><li>모델러와 이해관계자가 작성한 체크리스트 내용을 종합하여 <u>물리 데이터베이스 모델의 품질 검토 보고서 작성</u></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;물리데이터 모델에 대하여 &lt;u&gt;정확성, 완전성, 준거성, 최신성, 일관성, 활용성&lt;/u
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터모델품질기준" scheme="https://hyeonukdev.github.io/tags/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%AA%A8%EB%8D%B8%ED%92%88%EC%A7%88%EA%B8%B0%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/17/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/17/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-16T17:18:05.000Z</published>
    <updated>2020-05-16T17:18:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="1-데이터베이스-무결성"><a class="markdownIt-Anchor" href="#1-데이터베이스-무결성"></a> 1. 데이터베이스 무결성</h3><ul><li>데이터의 정확성을 보장하기 위해 <u>부정확한 자료가 데이터베이스 내에 저장</u>되는 것을 방지 하기 위한 제약 조건임</li><li>무결정의 종류<ul><li>개체 무결성</li><li>도메인 무결성</li><li>참조 무결성</li><li>사용자 정의 무결성</li></ul></li></ul><h3 id="2-칼럼-속성"><a class="markdownIt-Anchor" href="#2-칼럼-속성"></a> 2. 칼럼 속성</h3><ul><li>속성은 데이터베이스를 구성하는 가장 작은 논리적 단위</li><li>파일 구조상의 데이터 항목 또는 데이터 필드에 해당됨</li><li>특성에 따른 분류<ul><li>기본 속성</li><li>설계 속성</li><li>파생 속성</li></ul></li><li>개체 구성 방식에 따른 분류<ul><li>기본키 속성</li><li>외래키 속성</li><li>일반 속성</li></ul></li></ul><h3 id="3-키-종류"><a class="markdownIt-Anchor" href="#3-키-종류"></a> 3. 키 종류</h3><ul><li>데이터베이스에서 조건에 만족하는 튜플을 찾거나 순서대로 정렬할 때 <u>튜플들을 서로 구분할 수 있는 기준</u>이 되는 <u>애트리뷰트</u></li><li>종류<ul><li>슈퍼키</li><li>후보키</li><li>기본키</li><li>대체키</li></ul></li></ul><h3 id="4-반정규화"><a class="markdownIt-Anchor" href="#4-반정규화"></a> 4. 반정규화</h3><ul><li><u>시스템의 성능 향상, 개발 및 운영의 편의성 등을 위해</u> 정규화된 <u>데이터 모델을 통합, 중복, 분리</u>하는 과정으로 의도적으로 <u>정규화 원칙을 위배하는 행위</u></li><li>방법<ul><li>테이블 통합</li><li>테이블 분할</li><li>중복 테이블 추가</li><li>중복 속성 추가</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;1-데이터베이스-무결성&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>물리데이터베이스 - 반정규화</title>
    <link href="https://hyeonukdev.github.io/2020/05/17/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%EB%B0%98%EC%A0%95%EA%B7%9C%ED%99%94/"/>
    <id>https://hyeonukdev.github.io/2020/05/17/Engineer_Information_Processing/ch13_%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%84%A4%EA%B3%84/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EB%AA%A8%EB%8D%B8%EB%A7%81/%EB%B0%98%EC%A0%95%EA%B7%9C%ED%99%94/</id>
    <published>2020-05-16T17:02:53.000Z</published>
    <updated>2020-05-16T17:02:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="물리데이터베이스"><a class="markdownIt-Anchor" href="#물리데이터베이스"></a> 물리데이터베이스</h2><h3 id="반정규화-denormalization-개념"><a class="markdownIt-Anchor" href="#반정규화-denormalization-개념"></a> 반정규화 Denormalization 개념</h3><ul><li><u>시스템의 성능 향상, 개발 및 운영의 편의성 등을 위해</u> 정규화된 <u>데이터 모델을 통합, 중복, 분리</u>하는 과정으로 의도적으로 <u>정규화 원칙을 위배하는 행위</u></li><li>반정규화를 수행하면 시스템의 성능이 향상되고 관리 효율성은 증가하지만 <u>데이터의 일관성 및 무결성이 저하</u>될 수 있므</li><li><u>과도한 반정규화는 오히려 성능을 저하</u>시킬 수 있음</li><li>데이터의 일관성과 무결성을 우선으로 할 지, 데이터베이스의 성능과 단순화를 우선으로 할 지를 사전에 결정해야 함</li><li>방법<ul><li>테이블 통합</li><li>테이블 분할</li><li>중복 테이블 추가</li><li>중복 속성 추가</li></ul></li></ul><h3 id="반정규화-방법"><a class="markdownIt-Anchor" href="#반정규화-방법"></a> 반정규화 방법</h3><h4 id="1-테이블-통합"><a class="markdownIt-Anchor" href="#1-테이블-통합"></a> 1. 테이블 통합</h4><ul><li>테이블 조인이 많은 경우 <u>하나의 테이블로 합치는 것이</u> 성능 향상에 유리</li><li>종류<ul><li>1:1 관계 테이블 통합</li><li>1:N 관계 테이블 통합</li><li>수퍼타입/서브타입 테이블 통합</li></ul></li><li>고려사항<ul><li>데이터 검색은 간편하지만, 레코드 증가로 <u>처리량 증가</u></li><li>입력, 수정, 삭제 규칙의 <u>복잡도 증가</u></li></ul></li></ul><h4 id="2-테이블-분할"><a class="markdownIt-Anchor" href="#2-테이블-분할"></a> 2. 테이블 분할</h4><ul><li>테이블에서 특정 레코드나 특정 속성에 집중적으로 접근할 경우 테이블 분할</li><li>종류<ul><li>수평 분할</li><li>수직 분할</li></ul></li></ul><h5 id="21-수평-분할"><a class="markdownIt-Anchor" href="#21-수평-분할"></a> 2.1 수평 분할</h5><ul><li>Record 레코드를 기준으로 테이블을 분할</li><li>레코드별로 사용 빈도의 차이가 큰 경우 사용 빈도에 따라 분할</li></ul><h5 id="22-수직-분할"><a class="markdownIt-Anchor" href="#22-수직-분할"></a> 2.2 수직 분할</h5><ul><li>테이블의 많은 속성 중 특정 속성들만 접근이 잦을 경우 속성을 기준으로 테이블을 분할</li><li><u>갱신 위주의 속성 분할</u><ul><li>데이터 갱신 시 레코드 잠금으로 인해 다른 작업을 수행할 수 없으므로 갱신이 자주 일어나는 속성 분할</li></ul></li><li><u>자주 조회되는 속성 분할</u><ul><li>자주 조회되는 속성이 극히 일부일 경우 자주 사용되는 속성을 수직 분할하여 사용</li></ul></li><li><u>크기가 큰 속성 분할</u><ul><li>이미지나 2GB이상 저장 될 수 있는 텍스트 형식 등으로 된 속성을 수직 분할하여 사용</li></ul></li><li><u>보안을 적용해야 하는 속성 분할</u><ul><li>테이블 내 특정 속성에 대한 보안ㅇ르 적용할 수 없으므로 보안을 적용해야 하는 속성들을 수직분할하여 사용</li></ul></li></ul><h5 id="23-테이블-분할-시-고려사항"><a class="markdownIt-Anchor" href="#23-테이블-분할-시-고려사항"></a> 2.3 테이블 분할 시 고려사항</h5><ul><li><u>기본키의 유일성 관리가 어려움</u></li><li>데이터 양이 적거나 사용 빈도가 낮은 경우 테이블 분할이 필요한지를 고려</li><li>분할된 테이블의 전체 조회 시는 Union을 사용해야하므로 수행 속도가 느려짐</li><li>데이터 검색에 중점을 두어 테이블 부할 여부를 결정해야 함</li></ul><h4 id="3-중복-테이블-추가"><a class="markdownIt-Anchor" href="#3-중복-테이블-추가"></a> 3. 중복 테이블 추가</h4><ul><li>여러 테이블에서 데이터를 추가해서 사용해야 하는 경우</li><li>다른 서버에 저장된 테이블을 이용해야하는 경우</li></ul><h5 id="31-중복-테이블을-추가하는-경우"><a class="markdownIt-Anchor" href="#31-중복-테이블을-추가하는-경우"></a> 3.1 중복 테이블을 추가하는 경우</h5><ul><li>정규화로 인해 수행 <u>속도가 느려지는 경우</u></li><li><u>많은 범위</u>의 데이터를 <u>자추 처리해야</u>하는 경우</li><li><u>특정 범위</u>의 데이터를 <u>자추 처리해야</u>하는 경우</li><li><u>처리 범위를 줄이지 않고는</u> 수행 속도를 개선할 수 없는 경우</li></ul><h6 id="32-중복-테이블-추가하는-방법"><a class="markdownIt-Anchor" href="#32-중복-테이블-추가하는-방법"></a> 3.2 중복 테이블 추가하는 방법</h6><ul><li>집계 테이블 추가<ul><li>SUM, AVG 등 집계 데이터를 위한 테이블을 생성하고, 각 원본 테이블에 트리거를 설정하여 사용하는 것</li></ul></li><li>이력 테이블 추가<ul><li>이력 관리 드으이 목적으로 추가하는 테이블로, 적절한 데이터 양의 유지와 활용도를 제고하기 위해 기본키를 적절히 설정</li></ul></li><li>부분 테이블 추가<ul><li>하나의 테이블의 전체 칼럼 중 자주 이용하는 집중화 된 칼럼들이 있을 때 해당 칼럼들을 모아 놓은 별도의 반정규화된 테이블 생성</li></ul></li></ul><h4 id="4-중복-속성-추가"><a class="markdownIt-Anchor" href="#4-중복-속성-추가"></a> 4. 중복 속성 추가</h4><ul><li>테이블을 조인해서 데이터를 처리할 때 데이터를 조회하는 경로를 단축하기 위해 자주 사용하는 속성을 추가하는 것</li></ul><h5 id="41-중복-속성을-추가하는-경우"><a class="markdownIt-Anchor" href="#41-중복-속성을-추가하는-경우"></a> 4.1 중복 속성을 추가하는 경우</h5><ul><li><u>조인이 자주 발생하는</u> 속성인 경우</li><li><u>접근 경로가 복잡</u>한 속성인 경우</li><li>기본키의 형태가 적절하지 않거나 <u>여러 개의 속성으로 구성</u>된 경우</li></ul><h5 id="42-중복-속성-추가-시-고려사항"><a class="markdownIt-Anchor" href="#42-중복-속성-추가-시-고려사항"></a> 4.2 중복 속성 추가 시 고려사항</h5><ul><li>테이블 중복과 속성의 중복을 고려</li><li>테이블 일관성 및 무결성에 유의</li><li>SQL 그룹 함수를 이용하여 처리할 수 있어야 함</li><li>저장 공간의 지나친 낭비를 고려</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;물리데이터베이스&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#물리데이터베이스&quot;&gt;&lt;/a&gt; 물리데이터베이스&lt;/h2&gt;
&lt;h3 id=&quot;반정규화-denormalization-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anc
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="물리데이터베이스" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%AC%BC%EB%A6%AC%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="반정규화" scheme="https://hyeonukdev.github.io/tags/%EB%B0%98%EC%A0%95%EA%B7%9C%ED%99%94/"/>
    
  </entry>
  
</feed>
