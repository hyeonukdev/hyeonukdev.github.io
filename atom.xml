<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Engineering</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hyeonukdev.github.io/"/>
  <updated>2020-05-07T14:59:50.000Z</updated>
  <id>https://hyeonukdev.github.io/</id>
  
  <author>
    <name>Hyeonukdev</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>프로그래밍언어활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-07T14:59:50.000Z</published>
    <updated>2020-05-07T14:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="1-절차적-프로그래밍-언어"><a class="markdownIt-Anchor" href="#1-절차적-프로그래밍-언어"></a> 1. 절차적 프로그래밍 언어</h3><ul><li>일련의 <u>처리 절차를 정해진 문법에 따라 순서대로 기술</u>하는 언어</li><li>장점<ul><li>컴퓨터의 처리 구조와 유사하며 <u>실행속도가 빠름</u></li><li>같은 코드를 복사하지 않고 <u>다른 위치에서 호출하여 사용가능</u></li><li><u>모듈 구성이 용이하며</u> 구조적인 프로그래밍 가능</li></ul></li><li>단점<ul><li>프로그램을 분석하기 어려움</li><li><u>유지보수나  코드의 수정이 어려움</u></li></ul></li><li>종류<ul><li>C</li><li>COBOL</li><li>ALGOL</li><li>FORTRAN</li></ul></li></ul><h3 id="2-객체지향-프로그래밍-언어"><a class="markdownIt-Anchor" href="#2-객체지향-프로그래밍-언어"></a> 2. 객체지향 프로그래밍 언어</h3><ul><li><u>프로시저보다는 명령과 데이터로 구성된 객체를 중심</u>으로 하는 프로그래밍 기법</li><li>장점<ul><li><u>상속을 통함 <b>재사용과 시스템 확장</b>이 용이</u></li><li><u>코드의 재활용성</u>이 높음</li><li>현실 세계를 모형화하여 <u>사용자와 개발자가 쉽게 이해</u></li><li>대형 프로그램의 작성이 용이</li><li>소프트웨어 <u>개발 및 유지보수가 용이</u></li></ul></li><li>단점<ul><li>프로그래밍 구현을 지원해 주는 정형화된 분석 및 설계방법이 없음</li><li>구현 시 <u>처리 시간이 지연</u></li></ul></li><li>특징<ul><li>캡슐화</li><li>정보은닉</li><li>추상화</li><li>상속성</li><li>다형성</li></ul></li><li>종류<ul><li>C#</li><li>JAVA</li><li>C++</li></ul></li></ul><h3 id="3-스크립트-언어"><a class="markdownIt-Anchor" href="#3-스크립트-언어"></a> 3. 스크립트 언어</h3><ul><li>HTML 문서 안에 직접 프로그래밍 언어를 삽입하여 사용되며, 기계어로 컴파일 되지 않고 별도의 번역기가 소스를 분석하여 동작하는 언어</li><li>장점<ul><li><u>컴파일 없이 바로 실행</u>하므로 결과를 바로 확인가능</li><li>배우고 코딩하기 쉬움</li><li>개발시간이 짧음</li><li>소스코드를 쉽고 빠르게 수정할 수 있음</li></ul></li><li>단점<ul><li>코드를 읽고 해석해야 하므로 실행 속도가 느림</li><li><u>런타임 오류가 많이 발생</u></li></ul></li><li>클라이언트용 스크립트 언어<ul><li>JavaScript</li></ul></li><li>서버용 스크립트 언어<ul><li>ASP</li><li>JSP</li><li>PHP</li><li>Python</li></ul></li></ul><h3 id="4-선언형-언어"><a class="markdownIt-Anchor" href="#4-선언형-언어"></a> 4. 선언형 언어</h3><ul><li>명령형 언어가 문제를 해결하기 위한 방법을 기술한다면 선언형 언어는 프로그램이 수행해야 할 문제를 기술하는 언어</li><li>종류<ul><li>LISP</li><li>PROLOG</li><li>Haskell</li><li>SQL</li><li>HTML</li><li>XML</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;1-절차적-프로그래밍-언어&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 선언형 언어</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%84%A0%EC%96%B8%ED%98%95%EC%96%B8%EC%96%B4/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%84%A0%EC%96%B8%ED%98%95%EC%96%B8%EC%96%B4/</id>
    <published>2020-05-07T14:59:40.000Z</published>
    <updated>2020-05-07T14:59:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="선언형-언어의-개념"><a class="markdownIt-Anchor" href="#선언형-언어의-개념"></a> 선언형 언어의 개념</h3><ul><li>명령어 언어와 반대</li><li>프로그램이 수행해야 할 문제를 기술하는 언어</li><li>목표를 명시하고 알고리즘을 명시하지 않음</li><li>함수형 언어<ul><li>수학적 함수를 조합하여 문제를 해결하는 언어</li><li>적용형 언어라고 불림</li><li>재귀호출이 자주 이용되고 병렬처리에 유리</li></ul></li><li>논리형 언어<ul><li>기호 논리학에 기반을 둔 언어</li><li>선언적 언어라고 불림</li><li>반복문이나 선택문을 사용하지 않으며 비절차적 언어</li></ul></li></ul><h3 id="선언형-언어의-특징"><a class="markdownIt-Anchor" href="#선언형-언어의-특징"></a> 선언형 언어의 특징</h3><ul><li>알고리즘에 집중하여 이미 만들어진 것을 <u>선언을 통해 사용</u></li><li>구체적인 작동순서를 나열하지 않기 때문에 <u>오류가 적음</u></li><li><u>가독성이나 재사용이 좋음</u></li></ul><h3 id="선언형-언어의-종류"><a class="markdownIt-Anchor" href="#선언형-언어의-종류"></a> 선언형 언어의 종류</h3><ul><li>LISP<ul><li>인공지능 분야에 사용되는 언어</li><li>기본 구조가 연결 리스트 구조</li></ul></li><li>PROLOG<ul><li>논리학을 기초로 한 고급 언어</li><li>추론이나 리스트 처리등에 사용</li></ul></li><li>Haskell<ul><li>함수형 언어들을 통합 정리하며 만든 일반적인 순수 함수형 프로그램</li><li>코드가 간결하고 에러 발생 가능성이 낮음</li></ul></li><li>SQL<ul><li>관계형 데이터베이스 관리 시스템의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍언어</li></ul></li><li>HTML<ul><li>웹페이지 문서를 만들기 위해 사용되는 언어</li></ul></li><li>XML<ul><li>새로운 태그를 정의할 수 있으며, 문서의 내용과 이를 표현하는 방식이 독립적임</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;선언형-언어의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="선언형언어" scheme="https://hyeonukdev.github.io/tags/%EC%84%A0%EC%96%B8%ED%98%95%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 스크립트 언어</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%96%B8%EC%96%B4/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%96%B8%EC%96%B4/</id>
    <published>2020-05-07T14:51:40.000Z</published>
    <updated>2020-05-07T14:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="script-language-스크립트-언어의-개념"><a class="markdownIt-Anchor" href="#script-language-스크립트-언어의-개념"></a> Script Language 스크립트 언어의 개념</h3><ul><li>HTML 문서 안에 직접 프로그래밍 언어를 삽입하여 사용되며, 기계어로 컴파일 되지 않고 별도의 번역기가 소스를 분석하여 동작하는 언어</li><li>게시판, 상품 검색, 회원 가입 등과 같은 데이터베이스 처리 작업을 수행하기 위해 주로 사용</li><li>스크립트 언어는 <u>웹브라우저에서 해석되어 실행하는 클라이언트용 스크립트 언어와 서버에서 해석되어 실행된 후 결과만 클라이언트로 보내는 서버용 스크립트 언어로 구분</u></li><li>클라이언트용 스크립트 언어<ul><li>JavaScript</li></ul></li><li>서버용 스크립트 언어<ul><li>ASP</li><li>JSP</li><li>PHP</li><li>Python</li></ul></li></ul><h3 id="스크립트-언어의-장단점"><a class="markdownIt-Anchor" href="#스크립트-언어의-장단점"></a> 스크립트 언어의 장/단점</h3><ul><li>장점<ul><li><u>컴파일 없이 바로 실행</u>하므로 결과를 바로 확인가능</li><li>배우고 코딩하기 쉬움</li><li>개발시간이 짧음</li><li>소스코드를 쉽고 빠르게 수정할 수 있음</li></ul></li><li>단점<ul><li>코드를 읽고 해석해야 하므로 실행 속도가 느림</li><li><u>런타임 오류가 많이 발생</u></li></ul></li></ul><h3 id="스크립트-언어의-종류"><a class="markdownIt-Anchor" href="#스크립트-언어의-종류"></a> 스크립트 언어의 종류</h3><ul><li>JavaScript<ul><li>웹 브라우저에서 주로 사용되는 클라이언트용 스크립트 언어</li><li>폼 양식에서 필수 입력사항을 체크하는 용도로 많이 사용</li></ul></li><li>ASP; Active Server Page<ul><li>IIS 서버 측에서 동적으로 수행하는 페이지를 만들기 위해 마이크로 소프트에서 개발</li><li>Window 운영체제에서만 실행 가능한 프로그래밍 언어</li></ul></li><li>JSP; Java Server Page<ul><li>Java로 만들어진 서버용 스크립트 언어</li><li>Window, Linux등 다양한 운영체제에서 사용 가능</li></ul></li><li>PHP; Professional Hypertext Preprocessor<ul><li>서버용 스크립트 언어</li><li>배우기 쉬움</li></ul></li><li>Python<ul><li>객체지향 기능을 지원하는 대화형 인터프리터 언어로 플랫폼 독립적이고 문법이 간단하여 배우기 쉬움</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;script-language-스크립트-언어의-개념&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="스크립트언어" scheme="https://hyeonukdev.github.io/tags/%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 객체지향 프로그래밍 언어</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/</id>
    <published>2020-05-07T13:51:40.000Z</published>
    <updated>2020-05-07T13:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="object-oriented-객체지향-프로그래밍-언어의-개념"><a class="markdownIt-Anchor" href="#object-oriented-객체지향-프로그래밍-언어의-개념"></a> Object Oriented 객체지향 프로그래밍 언어의 개념</h3><ul><li>구조적 방식의 문제점을 극복하고 인간이 사고하는 방식대로 프로그램을 개발하려는 노력으로 탄생</li><li>현실 세계의 개체 Entity 를 기계의 부품처럼 하나의 객체 Object 로 만들어 <u>객체들을 조립해서 프로그램을 작성</u>할 수 있도록 한 프로그래밍 기법</li><li><u>프로시저보다는 명령과 데이터로 구성된 객체를 중심</u>으로 하는 프로그래밍 기법</li></ul><h3 id="객체지향-프로그래밍-언어의-장단점"><a class="markdownIt-Anchor" href="#객체지향-프로그래밍-언어의-장단점"></a> 객체지향 프로그래밍 언어의 장/단점</h3><ul><li>장점<ul><li><u>상속을 통함 <b>재사용과 시스템 확장</b>이 용이</u></li><li><u>코드의 재활용성</u>이 높음</li><li>현실 세계를 모형화하여 <u>사용자와 개발자가 쉽게 이해</u></li><li>대형 프로그램의 작성이 용이</li><li>소프트웨어 <u>개발 및 유지보수가 용이</u></li></ul></li><li>단점<ul><li>프로그래밍 구현을 지원해 주는 정형화된 분석 및 설계방법이 없음</li><li>구현 시 <u>처리 시간이 지연</u></li></ul></li></ul><h3 id="객체지향-프로그래밍의-특징"><a class="markdownIt-Anchor" href="#객체지향-프로그래밍의-특징"></a> 객체지향 프로그래밍의 특징</h3><ul><li>Encapsulation 캡슐화<ul><li><u>데이터(속성)와 데이터를 처리하는 함수를 하나로 묶는 것</u></li><li>캡슐화된 객체의 세부 내용이 외부에 은폐되어 변경이 발생할 때 오류의 파급 효과가 적음</li><li>캡슐화된 객체들은 <u>재사용이 용이</u></li></ul></li><li>Information Hiding 정보은닉<ul><li>다른 객체에게 자신의 <u>정보를 숨기고 자신의 연산만을 통하여 접근</u>을 허용하는 것</li></ul></li><li>Abstraction 추상화<ul><li>불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 모델화하는 것</li><li><u>공통 성질을 추출하여 슈퍼클래스를 설정하는 것</u></li></ul></li><li>Inheritance 상속성<ul><li><u>상위 클래스의 모든 속성과 메소드를 하위 클래스가 물려 받는 것</u></li></ul></li><li>Polymorphism 다형성<ul><li>동일한 이름의 메소드가 각 클래스마다 다른 사양으로 정의될 수 있음</li><li>다형성의 종류는 메소드 오버라이딩과 오버로딩이 있음</li></ul></li></ul><h3 id="객체지향-프로그래밍의-구성요소"><a class="markdownIt-Anchor" href="#객체지향-프로그래밍의-구성요소"></a> 객체지향 프로그래밍의 구성요소</h3><ul><li>Class 클래스<ul><li>객체의 타입을 정의하고 객체를 생성하는 틀</li></ul></li><li>Object 객체<ul><li>개체, 속성, 메소드로 구성된 클래스이 인스턴스</li></ul></li><li>Message 메시지<ul><li>객체간의 통신</li></ul></li></ul><h3 id="객체의-구성요소"><a class="markdownIt-Anchor" href="#객체의-구성요소"></a> 객체의 구성요소</h3><ul><li>Entity 개체<ul><li>현실 세계에 보이는 본질을 의미</li></ul></li><li>Attribute 속성<ul><li>자료 저장소 역할을 하며, 절차 지향 프로그래밍의 변수와 대응</li></ul></li><li>Method 메소드<ul><li>호출 단위를 의미하며, 절차지향 프로그래밍의 함수와 대응</li></ul></li></ul><h3 id="객체지향-프로그래밍-언어의-종류"><a class="markdownIt-Anchor" href="#객체지향-프로그래밍-언어의-종류"></a> 객체지향 프로그래밍 언어의 종류</h3><ul><li>C#<ul><li>마이크로소프트에서 개발한 객체지향 프로그래밍 언어로, 닷넷 프레임워크의 한 부분으로 만들어짐</li></ul></li><li>JAVA<ul><li>분산 네트워크 환경에서 적용이 가능하며, 멀티스레드 기능을 제공하여 여러 작업 동시 처리 가능</li><li>운영체제 및 하드웨어 독립적이며 이식성이 강함</li><li>캡슐화가 가능하고 재사용성이 높음</li></ul></li><li>C++<ul><li>C언어에 객체지향 개념을 적용한 언어</li><li>모든 문제를 객체로 모델링하여 표현</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;object-oriented-객체지향-프로그래밍-언어의-개념&quot;&gt;&lt;a class=&quot;m
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="객체지향프로그래밍언어" scheme="https://hyeonukdev.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 절차적 프로그래밍 언어</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%A0%88%EC%B0%A8%EC%A0%81%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EC%96%B8%EC%96%B4%ED%8A%B9%EC%84%B1%ED%99%9C%EC%9A%A9/%EC%A0%88%EC%B0%A8%EC%A0%81%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/</id>
    <published>2020-05-07T13:48:20.000Z</published>
    <updated>2020-05-07T13:48:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><ul><li><u>프로그래밍 언어별 특성 파악</u></li><li>파악된 프로그래밍 언어의 특성을 적용하여 <u>애플리케이션을 구현</u></li><li>애플리케이션을 최적화하기 위해 프로그래밍 언어의 특성을 활용</li></ul><h3 id="프로그래밍-언어의-언어별-특성"><a class="markdownIt-Anchor" href="#프로그래밍-언어의-언어별-특성"></a> 프로그래밍 언어의 언어별 특성</h3><ul><li>프로그래밍 언어는 컴퓨터 시스템의 역사와 함께하고 있으며 프로그래밍 언어가 개바로딘 시대적인 패러다임에 따른 특성을 가짐</li></ul><h3 id="프로그래밍-언어의-발전-과정"><a class="markdownIt-Anchor" href="#프로그래밍-언어의-발전-과정"></a> 프로그래밍 언어의 발전 과정</h3><ul><li>1960년대 이전<ul><li>ASSEMBLY</li><li>FORTRAN</li><li>LISP</li></ul></li><li>1960년대<ul><li>COBOL</li><li>PL/I</li><li>BASIC</li></ul></li><li>1970년대<ul><li>PASCAL</li><li>C</li><li>SMALLTALK</li><li>PROLOG</li></ul></li><li>1980년대<ul><li>ADA</li><li>C++</li><li>PYTHON</li><li>PROLOG</li></ul></li><li>1990년대 이후<ul><li>RUBY</li><li>JAVA</li><li>JAVASCRIPT</li><li>C#</li></ul></li></ul><h3 id="procedural-절차적-프로그래밍-언어의-개념"><a class="markdownIt-Anchor" href="#procedural-절차적-프로그래밍-언어의-개념"></a> Procedural 절차적 프로그래밍 언어의 개념</h3><ul><li>일련의 <u>처리 절차를 정해진 문법에 따라 순서대로 기술</u>하는 언어</li><li>프로그램이 <u>실행되는 절차를 중요시 함</u></li><li>데이터를 중심으로 <u>프로시저를 구현하며</u> 프로그램 전체가 유기적으로 연결됨<ul><li>프로시저<ul><li>루틴, 하위프로그램, 서브루틴, 메서드, 함수라고도 함</li><li>수행되어야할 연속적인 계산과정을 포함</li></ul></li></ul></li><li>자연어에 가까운 단어와 문장으로 구성</li></ul><h3 id="절차적-프로그램-언어의-장단점"><a class="markdownIt-Anchor" href="#절차적-프로그램-언어의-장단점"></a> 절차적 프로그램 언어의 장/단점</h3><ul><li>장점<ul><li>컴퓨터의 처리 구조와 유사하며 <u>실행속도가 빠름</u></li><li>같은 코드를 복사하지 않고 <u>다른 위치에서 호출하여 사용가능</u></li><li><u>모듈 구성이 용이하며</u> 구조적인 프로그래밍 가능</li></ul></li><li>단점<ul><li>프로그램을 분석하기 어려움</li><li><u>유지보수나  코드의 수정이 어려움</u></li></ul></li></ul><h3 id="절차적-프로그래밍-언어의-종류"><a class="markdownIt-Anchor" href="#절차적-프로그래밍-언어의-종류"></a> 절차적 프로그래밍 언어의 종류</h3><ul><li>C<ul><li>UNIX 운영체제의 구현</li><li>이식성이 좋아 컴퓨터 기종에 관계없이 프로그램 작성 가능</li></ul></li><li>ALGOL<ul><li><u>알고리즘을 기술</u>하기 위한 일반적인 표현 언어</li></ul></li><li>COBOL<ul><li>은행이나 대규모 회사들의 <u>사무처리 목적으로 만든 언어</u></li></ul></li><li>FORTRAN<ul><li>과학 기술 계산용 언어</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;프로그래밍 언어별 특성 파악&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;파악된 프로그래밍 언어의
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="절차적프로그래밍언어" scheme="https://hyeonukdev.github.io/tags/%EC%A0%88%EC%B0%A8%EC%A0%81%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-06T18:11:34.000Z</published>
    <updated>2020-05-06T18:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="1-데이터-타입"><a class="markdownIt-Anchor" href="#1-데이터-타입"></a> 1. 데이터 타입</h3><ul><li>변수에 저장될 데이터 형식을 나타내는 것</li><li><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_02.png" alt="C/C++의 데이터 타입 크기 및 기억 범위" /></li></ul><h3 id="2-변수"><a class="markdownIt-Anchor" href="#2-변수"></a> 2. 변수</h3><ul><li>변수는 저장하고자 하는 어떠한 값이 있을 때, 그 값을 <u>주기억장치에 기억하기 위한 공간</u>을 의미</li><li>저장하는 값에 따라 <u>정수형, 실수형, 문자형</u> 등으로 구분</li><li>C언어 변수명 설정 규칙<ul><li>영문자, 숫자, 밑줄의 사용 가능</li><li>첫 글자는 영문자나 '_'로 시작해야하며 숫자 사용 불가</li><li>변수명에는 공백사용 불가</li><li>글자 수에 제한이 없음</li><li>영문자는 대소문자를 구분</li><li>변수명은 제어문, 자료형 등 예약어 사용 불가능</li></ul></li></ul><h3 id="3-연산자"><a class="markdownIt-Anchor" href="#3-연산자"></a> 3. 연산자</h3><ul><li>연산자는 프로그램 실행을 위해 연산을 표현하는 기호</li><li>연산자의 종류는 산술 연산자, 시프트 연산자, 관계 연산자, 논리 연산자</li><li>연산 표기법의 종류<ul><li>Prefix 전위 표기법 +a*bc</li><li>Infix 중위 표기법 a+(b*c)</li><li>Postfix 후위 표기법 abc*+</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;1-데이터-타입&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 연산자</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EC%97%B0%EC%82%B0%EC%9E%90/</id>
    <published>2020-05-06T17:40:53.000Z</published>
    <updated>2020-05-06T17:40:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="operator-연산자의-개념"><a class="markdownIt-Anchor" href="#operator-연산자의-개념"></a> Operator 연산자의 개념</h3><ul><li>연산자는 프로그램 실행을 위해 연산을 표현하는 기호</li><li>프로그램 내에서는 +,-와 같은 연산자 사용</li><li>연산자의 종류는 산술 연산자, 시프트 연산자, 관계 연산자, 논리 연산자</li></ul><h3 id="연산자-종류"><a class="markdownIt-Anchor" href="#연산자-종류"></a> 연산자 종류</h3><h4 id="1-산술-연산자"><a class="markdownIt-Anchor" href="#1-산술-연산자"></a> 1. 산술 연산자</h4><ul><li>일반적으로 사용되는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_03.png" alt="산술연산자" /></li></ul><h4 id="2-관계-연산자"><a class="markdownIt-Anchor" href="#2-관계-연산자"></a> 2. 관계 연산자</h4><ul><li>두 피연산자 사이의 크기를 비교하는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_04.png" alt="관계연산자" /></li></ul><h4 id="3-시프트-연산자"><a class="markdownIt-Anchor" href="#3-시프트-연산자"></a> 3. 시프트 연산자</h4><ul><li>비트를 이동시키는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_05.png" alt="시프트연산자" /></li></ul><h4 id="4-논리-연산자"><a class="markdownIt-Anchor" href="#4-논리-연산자"></a> 4. 논리 연산자</h4><ul><li>두 피연산자 사이의 논리적인 관계를 정의하는 연산자<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_06.png" alt="논리연산자" /></li></ul><h4 id="5-비트-연산자"><a class="markdownIt-Anchor" href="#5-비트-연산자"></a> 5. 비트 연산자</h4><ul><li>0과 1의 각 자리에 대한 연산을 수행하며, 0또는 1의 결과값을 가짐<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_07.png" alt="비트연산자" /></li></ul><h3 id="연산자-우선순위"><a class="markdownIt-Anchor" href="#연산자-우선순위"></a> 연산자 우선순위</h3><h4 id="1-java의-연산자-우선순위"><a class="markdownIt-Anchor" href="#1-java의-연산자-우선순위"></a> 1. Java의 연산자 우선순위</h4><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_08.png" alt="Java의 연산자 우선순위" /></p><h4 id="2-c언어의-연산자-우선순위"><a class="markdownIt-Anchor" href="#2-c언어의-연산자-우선순위"></a> 2. C언어의 연산자 우선순위</h4><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_09.png" alt="C언어의 연산자 우선순위" /></p><h3 id="연산-표기법의-종류"><a class="markdownIt-Anchor" href="#연산-표기법의-종류"></a> 연산 표기법의 종류</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_10.png" alt="연산 표기법의 종류" /></p><h3 id="연산-표기법간-전환prefix-postfix"><a class="markdownIt-Anchor" href="#연산-표기법간-전환prefix-postfix"></a> 연산 표기법간 전환(Prefix -&gt; Postfix)</h3><ul><li>Prefix -&gt; Infix 변환(+a*bc)<ol><li>(연산자, 변수, 변수)를 찾은 후 (변수, 연산자, 변수) 순으로 변경<ul><li>+a(b*c)</li></ul></li><li>같은 방법으로 나머지도 변수, 연산자, 변수 순으로 변경 후 괄호제거<ul><li>a+b*c</li></ul></li></ol></li><li>Infix -&gt; Postfix 변환(a+b*v)<ol><li>(변수, 연산자, 변수) 중 우선순위가 높은 연산자를 (변수, 변수, 연산자) 순으로 변경<ul><li>a+(bc*)</li></ul></li><li>나머지도 변수, 변수, 연산자 순으로 변경 후 괄호 제거<ul><li>a(bc*)+</li><li>abc*+</li></ul></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;operator-연산자의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="연산자" scheme="https://hyeonukdev.github.io/tags/%EC%97%B0%EC%82%B0%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 변수</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EB%B3%80%EC%88%98/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EB%B3%80%EC%88%98/</id>
    <published>2020-05-06T17:30:53.000Z</published>
    <updated>2020-05-06T17:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><h3 id="variable-변수의-개념"><a class="markdownIt-Anchor" href="#variable-변수의-개념"></a> Variable 변수의 개념</h3><ul><li>변수는 저장하고자 하는 어떠한 값이 있을 때, 그 값을 <u>주기억장치에 기억하기 위한 공간</u>을 의미</li><li>저장하는 값에 따라 <u>정수형, 실수형, 문자형</u> 등으로 구분</li></ul><h3 id="c언어-변수명-설정-규칙"><a class="markdownIt-Anchor" href="#c언어-변수명-설정-규칙"></a> C언어 변수명 설정 규칙</h3><ul><li>영문자, 숫자, 밑줄의 사용 가능</li><li>첫 글자는 영문자나 '_'로 시작해야하며 숫자를 사용할 수 없음</li><li>변수명에는 공백이나 밑줄이외의 특수문자(*,?,+,- 등) 사용 불가</li><li>글자 수에 제한이 없음</li><li>영문자는 대소문자를 구분</li><li>변수명은 제어문, 자료형 등 예약어 사용 불가능<ul><li>예약어<ul><li>제어문이나 데이터 타입 등 이미 용도가 정해져 있는 단어</li><li>do, for, while, char, double</li></ul></li></ul></li><li>변수 선언시 문장 끝에 세미콜론(’;’)을 붙여야 함</li></ul><h3 id="변수의-선언"><a class="markdownIt-Anchor" href="#변수의-선언"></a> 변수의 선언</h3><ul><li>변수는 일반적으로 다음과 같은 형식으로 선언</li><li><code>자료형 변수명 = 값;</code><ul><li>자료형 : 변수에 저장될 자료의 형식을 지정</li><li>변수명 : 변수명 작성 규칙에 맞게 변수명 지정</li><li>값 : 변수를 선언하면서 초기값 지정</li></ul><blockquote><p>int a = 10;<br />int : 자료의 형식을 정수형으로 지정<br />a : 변수명을 a로 지정<br />10 : 초기값을 10으로 지정</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;h3 id=&quot;variable-변수의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="변수" scheme="https://hyeonukdev.github.io/tags/%EB%B3%80%EC%88%98/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍언어활용 - 데이터타입</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch16_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95%ED%99%9C%EC%9A%A9/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85/</id>
    <published>2020-05-06T17:29:53.000Z</published>
    <updated>2020-05-06T17:29:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로그래밍언어활용"><a class="markdownIt-Anchor" href="#프로그래밍언어활용"></a> 프로그래밍언어활용</h2><ul><li>응용소프트웨어 개발에 필요한 <u>프로그래밍 언어의 데이터 타입을 적용하여 변수를 사용</u></li><li><u>프로그래밍 언어의 연산자와 명령문을 사용</u>하여 애플리케이션에 필요한 기능을 정의하고 사용</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>변수<ul><li>어떤 값을 주기억 장치에 기억하기 위해서 사용하는 공간</li></ul></li><li>데이터 타입<ul><li>변수가 가질 수 있는 속성값의 길이 및 성절</li></ul></li><li>연산자<ul><li>데이터 처리를 위해 연산을 표현하는 기호로 +, - 등과 같은 연산자를 포함</li></ul></li></ul><h3 id="데이터-타입data-type의-개념"><a class="markdownIt-Anchor" href="#데이터-타입data-type의-개념"></a> 데이터 타입(Data Type)의 개념</h3><ul><li><u>데이터 타입은 변수에 저장될 데이터의 형식을 나타내는 것</u></li><li>변수에 값을 저장하기 전에 문자형, 정수형, 실수형 등 어떤 형식의 값을 저장할지 데이터 타입을 지정하여 변수를 선언</li></ul><h3 id="데이터-타입-유형"><a class="markdownIt-Anchor" href="#데이터-타입-유형"></a> 데이터 타입 유형</h3><ul><li>불린 타입<ul><li>조건이 <u>참인지 거짓인지 판단</u>할 때 사용</li></ul></li><li>문자 타입<ul><li><u>문자 하나를 저장</u>하여 작은 따옴표 사용</li></ul></li><li>문자열 타입<ul><li><u>나열된 여러 개의 문자를 저장</u>하여 큰 따옴표 사용</li></ul></li><li>정수 타입<ul><li><u>정수 값을 저장</u>하고자 할 때 사용</li></ul></li><li>부동 소숮점 타입<ul><li><u>소수점을 포함하는 실수 값을 저장</u>할 때 사용</li></ul></li><li>배열 타입<ul><li><u>여러 데이터를 하나로 묶어서 저장</u>할 때 사용</li></ul></li></ul><h3 id="java의-데이터-타입-크기-및-기억-범위"><a class="markdownIt-Anchor" href="#java의-데이터-타입-크기-및-기억-범위"></a> Java의 데이터 타입 크기 및 기억 범위</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_01.png" alt="Java의 데이터 타입 크기 및 기억 범위" /></p><h3 id="cc의-데이터-타입-크기-및-기억-범위"><a class="markdownIt-Anchor" href="#cc의-데이터-타입-크기-및-기억-범위"></a> C/C++의 데이터 타입 크기 및 기억 범위</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0507_02.png" alt="C/C++의 데이터 타입 크기 및 기억 범위" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로그래밍언어활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#프로그래밍언어활용&quot;&gt;&lt;/a&gt; 프로그래밍언어활용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;응용소프트웨어 개발에 필요한 &lt;u&gt;프로그래밍 언어의 데이터 타입을 적용하여 변수를
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="프로그래밍언어활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%96%B8%EC%96%B4%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="데이터타입" scheme="https://hyeonukdev.github.io/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%83%80%EC%9E%85/"/>
    
  </entry>
  
  <entry>
    <title>기본개발환경구축 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-06T17:24:06.000Z</published>
    <updated>2020-05-06T17:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본개발환경구축"><a class="markdownIt-Anchor" href="#기본개발환경구축"></a> 기본개발환경구축</h2><h3 id="1-웹서버"><a class="markdownIt-Anchor" href="#1-웹서버"></a> 1. 웹서버</h3><ul><li>웹 브라우저 클라이언트로부터 HTTP request를 받아 HTML과 같은 정적인 contents를 제공하는 프로그램과 해당 애플리케이션 서버가 설치된 컴퓨터</li><li>종류<ul><li>Apache</li><li>Nginx</li><li>IIS</li><li>GWS</li></ul></li><li>WAS 서버는 DB조회나 다양한 로직 처리를 요구하는 동적인 contents를 제공하기 위한 Application Server</li><li>종류<ul><li>Tomcat</li><li>Undertow</li><li>JEUS</li><li>Weblogic</li><li>Websphere</li></ul></li></ul><h3 id="2-db서버"><a class="markdownIt-Anchor" href="#2-db서버"></a> 2. DB서버</h3><ul><li>사용자, 다른 어플리케이션, 데이터베이스와 <u>상호작용</u>하여 데이터를 <u>저장하고 분석</u>하기 위한 컴퓨터 소프트웨어</li><li>종류<ul><li>Oracle</li><li>DB2</li><li>Microsoft SQL Server</li><li>MySQL</li><li>MongoDB</li></ul></li><li>DB서버 고려사항<ul><li>가용성</li><li>성능</li><li>기술지원</li><li>상호호환성</li><li>구축비용</li></ul></li></ul><h3 id="3-패키지"><a class="markdownIt-Anchor" href="#3-패키지"></a> 3. 패키지</h3><ul><li>패키지 방식 개발은 여러 성공사례 노하우를 기반으로 만들어진 <u>개발된 제품을 이용</u>하여 시스템을 구축하는 방식</li><li>장점<ul><li>국제 및 산업계 표준으로 장착된 비즈니스 프로세스 적용</li><li>품질이 검증된 안정적인 시스템 구축 가능</li><li>개발 기간의 단축으로 비용절감 효과</li></ul></li><li>단점<ul><li>사용자 요구사항에 대한 대처가 쉽지 않음</li><li>사용자의 프로세스 개선의 저항 발생</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본개발환경구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본개발환경구축&quot;&gt;&lt;/a&gt; 기본개발환경구축&lt;/h2&gt;
&lt;h3 id=&quot;1-웹서버&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-웹서버&quot;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="기본개발환경구축" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>기본개발환경구축 - 패키지</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%8C%A8%ED%82%A4%EC%A7%80/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%ED%8C%A8%ED%82%A4%EC%A7%80/</id>
    <published>2020-05-06T16:34:25.000Z</published>
    <updated>2020-05-06T16:34:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본개발환경구축"><a class="markdownIt-Anchor" href="#기본개발환경구축"></a> 기본개발환경구축</h2><h3 id="package-패키지의-개녕"><a class="markdownIt-Anchor" href="#package-패키지의-개녕"></a> Package 패키지의 개녕</h3><ul><li>패키지 방식 개발은 여러 성공사례 노하우를 기반으로 만들어진 <u>개발된 제품을 이용</u>하여 시스템을 구축하는 방식</li><li><u>사용자의 기능 요구사항을 70%이상 충족</u>시키는 패키지SW가 있을 경우 패키지 SW방식이 적합</li><li><u>현존 시스템과 상호 연동 및 연계를 고려</u>해야 함</li><li>패키지를 통한 응용시스템 개발은 패키지 <u>커스터마이징 방법론</u>에 따라 진행</li></ul><h3 id="패키지-개발의-장점"><a class="markdownIt-Anchor" href="#패키지-개발의-장점"></a> 패키지 개발의 장점</h3><ul><li>기본적으로 필요한 기능이 사전에 모두 제공되며 <u>국제 및 산업계 표준</u>으로 장착된 <u>비즈니스 프로세스 적용</u>이 가능</li><li>품질이 검증된 우수한 패키지 SW의 사용으로 <u>안정적인 시스템 구축</u></li><li>전문업체의 지속적인 업그레이드로 <u>최신의 제품과 기능을 사용</u></li><li>개발 기간의 단축으로 <u>비용절감 효과</u></li><li>패키지SW 개발업체 관리가 용이</li></ul><h3 id="패키지-개발의-단점"><a class="markdownIt-Anchor" href="#패키지-개발의-단점"></a> 패키지 개발의 단점</h3><ul><li>요구사항을 패키지SW가 모두 수용하지 않기 때문에 <u>사용자 요구사항에 대한 대처가 쉽지 않음</u></li><li>사용자의 업무 프로세스를 패키지SW의 업무프로세스에 맞춰야 할 경우 <u>프로세스 개선의 저항발생으로 이어질 가능성 존재</u></li><li>고객 요구사항이 까다롭거나 특수조건일 경우 <u>&quot;Buy &amp; Build&quot;</u>형식으로 구축할 수 있음</li></ul><h3 id="구축-및-운영-절차"><a class="markdownIt-Anchor" href="#구축-및-운영-절차"></a> 구축 및 운영 절차</h3><h4 id="1-패키지-방식의-구축-절차"><a class="markdownIt-Anchor" href="#1-패키지-방식의-구축-절차"></a> 1. 패키지 방식의 구축 절차</h4><ol><li>요구사항에 맞춰 <u>커스터마이징</u> 수행</li><li>개별단위별 <u>단계쩍 개발 방법 적용</u></li><li>고객의 검수와 공식적 <u>통합테스트 수행</u></li><li><u>매뉴얼 작성</u> 및 패키지 전개계획 수립</li></ol><h4 id="2-패키지-방식의-운영-절차"><a class="markdownIt-Anchor" href="#2-패키지-방식의-운영-절차"></a> 2. 패키지 방식의 운영 절차</h4><ol><li>패키지를 <u>운영 환경에 전개</u></li><li><u>사용자 테스트</u>를 준비/시정요구사항 조치</li><li>유지보수 <u>운영 매뉴얼 작성</u></li><li>프로젝트 종료 위한 <u>개발완료보고서 작성</u></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본개발환경구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본개발환경구축&quot;&gt;&lt;/a&gt; 기본개발환경구축&lt;/h2&gt;
&lt;h3 id=&quot;package-패키지의-개녕&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="기본개발환경구축" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="패키지" scheme="https://hyeonukdev.github.io/tags/%ED%8C%A8%ED%82%A4%EC%A7%80/"/>
    
      <category term="Package" scheme="https://hyeonukdev.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>기본개발환경구축 - DB서버</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/DB%EC%84%9C%EB%B2%84/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/DB%EC%84%9C%EB%B2%84/</id>
    <published>2020-05-06T16:03:43.000Z</published>
    <updated>2020-05-06T16:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본개발환경구축"><a class="markdownIt-Anchor" href="#기본개발환경구축"></a> 기본개발환경구축</h2><h3 id="db서버-정의"><a class="markdownIt-Anchor" href="#db서버-정의"></a> DB서버 정의</h3><ul><li>사용자, 다른 어플리케이션, 데이터베이스와 <u>상호작용</u>하여 데이터를 <u>저장하고 분석</u>하기 위한 컴퓨터 소프트웨어</li><li>주요기능<ul><li>데이터베이스 생성</li><li>조회</li><li>변경</li></ul></li></ul><h3 id="db서버-종류-및-특징"><a class="markdownIt-Anchor" href="#db서버-종류-및-특징"></a> DB서버 종류 및 특징</h3><ul><li>대규모 데이터의 안정적 처리<ul><li>Oracle<ul><li>저작자 : Oracle</li><li>상용</li></ul></li><li>DB2<ul><li>저작자 : IBM</li><li>상용</li></ul></li></ul></li><li>중소 규모 데이터의 안정적 처리<ul><li>Microsoft SQL Server<ul><li>저작자 : Microsoft</li><li>상용</li></ul></li></ul></li><li>오픈소스<ul><li>MySQL<ul><li>저작자 : MySQLAB</li><li>상용 또는 GPL</li><li>오픈소스 RDBMS</li></ul></li><li>Mongo DB<ul><li>저작자 : MongoDB Inc</li><li>GNU AGPL v3.0</li><li>NoSQL 데이터베이스</li></ul></li><li>Redis<ul><li>저작자 : Salvatore Sanfilippo</li><li>BSD</li><li>메모리</li><li>키-값 데이터베이스</li></ul></li></ul></li><li>임베디드 데이터베이스<ul><li>SQLite<ul><li>저작자 : D.Richard Hipp</li><li>Public Domain</li></ul></li></ul></li><li>Query Caching 기능</li></ul><h3 id="db서버-고려사항"><a class="markdownIt-Anchor" href="#db서버-고려사항"></a> DB서버 고려사항</h3><ul><li>가용성<ul><li>장기간 시스템을 운영할 때 장애 발생 가능성</li><li>DBMS의 버그 등으로 인한 패치 설치를 위한 재가동</li><li>백업 및 복구 편의성</li><li>DBMS 이중화 및 복제 지원</li></ul></li><li>성능<ul><li>대규모 데이터 처리 기능</li><li>대량 거래 처리 기능</li><li>다양한 튜닝 옵션 지원</li><li>비용 기반 최적화 지원 및 설정의 최소화</li></ul></li><li>기술 지원<ul><li>공급 벤더들의 안정적인 기술 지원</li><li>다수의 사용자들 간의 정보 공유</li><li>오픈 소스 여부</li></ul></li><li>상호 호환성<ul><li>설치 가능한 운영체제 종류</li><li>다양한 운영체제에 지원되는 JDBC, ODBC</li></ul></li><li>구축 비용<ul><li>라이선스 정책 및 비용</li><li>유지 및 관리 비용</li><li>총 소유 비용 : TCO</li></ul></li></ul><h4 id="db구성의-장점"><a class="markdownIt-Anchor" href="#db구성의-장점"></a> DB구성의 장점</h4><ol><li>데이터 중복의 최소화</li><li>여러 사용자에 의한 데이터 공유</li><li>데이터 내용의 일관성 유지</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본개발환경구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본개발환경구축&quot;&gt;&lt;/a&gt; 기본개발환경구축&lt;/h2&gt;
&lt;h3 id=&quot;db서버-정의&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#db서버
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="기본개발환경구축" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="DB서버" scheme="https://hyeonukdev.github.io/tags/DB%EC%84%9C%EB%B2%84/"/>
    
  </entry>
  
  <entry>
    <title>기본개발환경구축 - 웹서버</title>
    <link href="https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%EC%9B%B9%EC%84%9C%EB%B2%84/"/>
    <id>https://hyeonukdev.github.io/2020/05/07/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/%EC%9B%B9%EC%84%9C%EB%B2%84/</id>
    <published>2020-05-06T15:45:50.000Z</published>
    <updated>2020-05-06T15:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본개발환경구축"><a class="markdownIt-Anchor" href="#기본개발환경구축"></a> 기본개발환경구축</h2><ul><li><u>웹 서버, DB 서버</u>등 응용개발에 필요한 기반 서버를 설치하고 운용</li><li><u>패키지</u> 개발 방식의 개념과 장단점을 이해하고 구축 및 운영 절차를 이해</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li>Package 패키지 개발<ul><li>여러 성공사례의 노하우를 기반으로 개발된 제품을 이용하여 시스템을 구축하는 방식</li></ul></li></ul><h2 id="웹서버"><a class="markdownIt-Anchor" href="#웹서버"></a> 웹서버</h2><h3 id="정적static과-동적dynamic-웹-페이지"><a class="markdownIt-Anchor" href="#정적static과-동적dynamic-웹-페이지"></a> 정적(Static)과 동적(Dynamic) 웹 페이지</h3><ul><li>Static Pages<ul><li>Web Server는 파일 경로 이름을 받아 경로와 일치하는 File Contents를 반환하며 항상 동일한 페이지를 반환</li><li>image, html, css, javascript 파일 등 웹서버 저장 파일</li></ul></li><li>Dynamic Pages<ul><li>인자의 내용에 맞게 동적인 Contents를 반환</li><li>Client의 request를 해석, 데이터를 가공한 페이지 response</li></ul></li><li><img src="https://gmlwjd9405.github.io/images/web/static-vs-dynamic.png" alt="정적과 동적 웹 방식" /></li></ul><h3 id="web-server-웹-서버"><a class="markdownIt-Anchor" href="#web-server-웹-서버"></a> Web Server 웹 서버</h3><ul><li>개념<ul><li>하드웨어 : Web Server가 설치되어 있는 컴퓨터</li><li>소프트웨어 : 웹 브라우저 클라이언트로부터 HTTP request를 받아 정적인 contents를 제공하는 프로그램</li></ul></li><li>기능<ul><li>HTTP 프로토콜을 기반으로 하여 클라이언트의 요청을 서비스</li><li><u>WAS를 거치지 않음 -&gt; 저장되어 있는 정적 contents를 제공</u></li><li><u>WAS를 거침 -&gt; 동적인 contents를 제공</u>을 위해 <u>ASP, JSP, PHP등 서버 사이트 스크립트 언어</u>가 request를 WAS에 전달하고, 처리한 결과를 Client에게 Response</li></ul></li><li>주요 제품<ul><li>Apache</li><li>Nginx</li><li>MS-IIS</li><li>Google-GWS</li></ul></li></ul><h3 id="was-web-application-server-서버"><a class="markdownIt-Anchor" href="#was-web-application-server-서버"></a> WAS; Web Application Server 서버</h3><ul><li>개념<ul><li><u>DB 조회나 다양한 로직 처리를 요구하는 동적인 contents를 제공</u>하기 위한 Application Server</li><li>HTTP를 통해 어플리케이션을 수행해주는 <u>미들웨어</u></li><li>WAS = Web Server + Web Container</li></ul></li><li>기능<ul><li>ASP, JSP, PHP, Python 등 서버 사이드 스크립트 언어 활용</li><li>프로그램 실행 환경과 <u>DB 접속 기능</u></li><li>다수의 트랜잭션 관리 기능</li><li>다양한 로직 수행</li></ul></li><li>주요 제품<ul><li>Tomcat</li><li>Undertow</li><li>JEUS</li><li>Weblogic</li><li>Websphere</li></ul></li></ul><h3 id="스크립트-언어-종류"><a class="markdownIt-Anchor" href="#스크립트-언어-종류"></a> 스크립트 언어 종류</h3><ul><li>ASP; Active Server Page<ul><li>IIS 서버 측에서 동적으로 수행하는 페이지를 만들기 위해 마이크로소프트에서 개발</li><li>Window 운영체제에서만 실행 가능한 프로래밍 언어</li></ul></li><li>JSP; Java Server Page<ul><li>JAVA로 만들어진 서버용 스크립트 언어</li><li>Window, Linux 등 다양한 운영체제에서 사용 가능</li></ul></li><li>PHP; Professinal Hypertext Preprocessor<ul><li>서버용 스크립트 언어</li><li>Window, Linux, Unix 운영체제에서 사용 가능</li><li>배우기 쉬움</li></ul></li><li>Python<ul><li>객체지향 기능을 지원하는 대화형 인터프리터 언어로 플랫폼이 독립적이고 문법이 간단</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본개발환경구축&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#기본개발환경구축&quot;&gt;&lt;/a&gt; 기본개발환경구축&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;웹 서버, DB 서버&lt;/u&gt;등 응용개발에 필요한 기반 서버를 설치하고 운용&lt;/li
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="기본개발환경구축" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="웹서버" scheme="https://hyeonukdev.github.io/tags/%EC%9B%B9%EC%84%9C%EB%B2%84/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-05T07:51:21.000Z</published>
    <updated>2020-05-05T07:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="1-인터넷-구성의-개념"><a class="markdownIt-Anchor" href="#1-인터넷-구성의-개념"></a> 1. 인터넷 구성의 개념</h3><ul><li><u>TCP/IP 프로토콜을 기반으로 전세계</u> 수 많은 네트워크들이 연결된 광범위한 컴퓨터 통신망</li><li>장비 종류<ul><li>게이트웨이</li><li>라우터</li><li>리피터</li><li>허브</li><li>랜 카드</li><li>브리지</li><li>스위치</li></ul></li></ul><h3 id="2-네트워크-7계층"><a class="markdownIt-Anchor" href="#2-네트워크-7계층"></a> 2. 네트워크 7계층</h3><ul><li>국제 표준화 기구인 ISO에서 다른 시스템간 통신을 위해 <u>네트워크 구조를 제시한 기본 모델</u></li><li><img src="https://baekjungho.github.io/images/posts/201904/osi.jpg" alt="OSI 7 Layer" /></li></ul><h3 id="3-네트워크-프로토콜"><a class="markdownIt-Anchor" href="#3-네트워크-프로토콜"></a> 3. 네트워크 프로토콜</h3><ul><li>프로토콜은 서로 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화 시켜 놓은 통신 규약</li><li>TCP/IP 4계층<ul><li>네트워크 액세스</li><li>인터넷</li><li>전송</li><li>응용</li></ul></li><li>프로토콜의 기본 요소<ul><li>구문</li><li>의미</li><li>시간</li></ul></li><li>라우팅 프로토콜<ul><li>RIP</li><li>IGRP</li><li>OSPF</li><li>BGP</li></ul></li><li><img src="https://lh3.googleusercontent.com/proxy/qnU4O0x68NqJJyY112t2ihbFPIivUIA2UwRHRQ1xIFbfXsWmTtK3UnIlsnaze9a_msgiKEHJS8-wQOlF1_u57v_NXuNRTfvDD55_UjDCtucm5OKLLrsWnGM4mVlpDE6sY9UjWAQGQOFcr4wUa94lDgtNnJrUVCw" alt="OSI 7 Layer" /></li></ul><h3 id="4-ip"><a class="markdownIt-Anchor" href="#4-ip"></a> 4. IP</h3><ul><li>OSI 7 계층의 네트워크 계층에서 <u>호소트의 주소지정과 패킷분할 및 조립기능 담당</u></li><li><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0505_02.png" alt="IPv4 와 IPv6 주소 비교" /></li></ul><h3 id="5-tcpudp"><a class="markdownIt-Anchor" href="#5-tcpudp"></a> 5. TCP/UDP</h3><ul><li>OSI 7계층의 <u>전송계층</u>에서 CRC체크와 재전송 기능을 통해 <u><b>신뢰성</b>있는 연결형 서비스 제공</u></li><li>TCP 대표 서비스<ul><li>FTP</li><li>Telnet</li><li>Http</li><li>SMTP</li><li>POP</li><li>IMAP</li></ul></li><li>UDP는 비연결성이고 신뢰성 없는 데이터 전송</li><li>UDP는 대표 서비스<ul><li>SNMP</li><li>DNS</li><li>TFTP</li><li>NFS</li><li>NETBIOS</li><li>인터넷 게임</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;1-인터넷-구성의-개념&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - TCP/UDP</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/TCP_UDP/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/TCP_UDP/</id>
    <published>2020-05-05T07:33:39.000Z</published>
    <updated>2020-05-05T07:33:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="tcp-transmission-control-protocol-의-개념"><a class="markdownIt-Anchor" href="#tcp-transmission-control-protocol-의-개념"></a> TCP; Transmission Control Protocol 의 개념</h3><ul><li>OSI 7계층의 <u>전송계층</u>에서 CRC체크와 재전송 기능을 통해 <u><b>신뢰성</b>있는 연결형 서비스 제공</u><ul><li>연결형 서비스<ul><li>송수신 측간을 논리적으로 연결한 후 데이터를 전송하는 방식</li></ul></li></ul></li><li>Flow Control 기능을 수행하여 단계별 데이터 전송 상황을 체크</li><li><u>논리적인 1:1 가상 회선을 지원</u>하여 해당 경로로만 데이터 전달</li><li>기능<ul><li>패킷의 다중화</li><li>순서 제어</li><li>오류 제어</li><li>흐름 제어</li></ul></li><li>대표서비스<ul><li>FTP</li><li>Telnet</li><li>Http</li><li>SMTP</li><li>POP</li><li>IMAP</li></ul></li><li>TCP 헤더 정보<ul><li>Souce/Destination Port</li><li>Sequence Number</li><li>Acknowledge Number</li><li>Cheksum</li></ul></li><li><img src="https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&amp;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F223C0D4957286ABC24" alt="TCP 구조" /></li></ul><h3 id="udp-user-datagram-protocol의-개념"><a class="markdownIt-Anchor" href="#udp-user-datagram-protocol의-개념"></a> UDP; User Datagram Protocol의 개념</h3><ul><li>OSI 7계층의 <u>전송계층</u>에서 데이터 전송 전에 연결을 설정하지 않는 <u>비연결형 서비스</u>를 제공</li><li><u><b>비신뢰성</b> 데이터 전송</u></li><li>하나의 송신 정보를 <u>다수의 인원이 수신</u>해야할 경우 UDP 사용</li><li>대표 서비스<ul><li>SNMP</li><li>DNS</li><li>TFTP</li><li>NFS</li><li>NETBIOS</li><li>인터넷 게임</li></ul></li><li>UDP 헤더 포함 정보<ul><li>Source</li><li>Destination Port</li><li>Length</li><li>Cheksum</li></ul></li><li><img src="https://4.bp.blogspot.com/-rUej079_r6U/WeOMoP6xilI/AAAAAAAABCM/MUbB6qZGoZwIbuPVJPw-C1SuneOigpLCgCLcBGAs/s1600/UDP-Header.png" alt="UDP 구조" /></li></ul><h3 id="tcp와-udp-차이점"><a class="markdownIt-Anchor" href="#tcp와-udp-차이점"></a> TCP와 UDP 차이점</h3><ul><li>TCP<ul><li>데이터 전송 전 <b>연결설정</b></li><li><b>1:1</b> 전송</li><li><b>단계별</b> 데이터 전송</li><li><b>신뢰성</b>있는 데이터 전송</li><li>등기 우편물</li></ul></li><li>UDP<ul><li>데이터 전송 전 연결 <b>미설정</b></li><li><b>1:다</b> 전송</li><li>데이터 전송</li><li><b>비 신뢰성</b> 데이터 전송</li><li>소포 우편물<br /><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0505_03.png" alt="TCP와 UDP 차이점" /></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;tcp-transmission-control-protocol-의-개념&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="TCP_UDP" scheme="https://hyeonukdev.github.io/tags/TCP-UDP/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - IP</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/IP/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/IP/</id>
    <published>2020-05-05T07:07:52.000Z</published>
    <updated>2020-05-05T07:07:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="ip-internet-protocol-의-개념"><a class="markdownIt-Anchor" href="#ip-internet-protocol-의-개념"></a> IP; Internet Protocol 의 개념</h3><ul><li>OSI 7 계층의 네트워크 계층에서 <u>호소트의 주소지정과 패킷분할 및 조립기능 담당</u></li><li>데이터그램을 기반으로 <u>비연결형 서비스 제공</u><ul><li>비연결형통신<ul><li>송수신 측간에 논리적 연결 없이 데이터를 독립적으로 전송하는 방식</li></ul></li></ul></li><li>IP 헤더의 길이는 최소 20Byte ~ 60Byte</li><li>IP 헤더 포함 정보<ul><li>Version</li><li>Header Length</li><li>Total Packet Length</li><li>Header</li><li>Checksum</li><li>Source IP Address</li><li>Destination IP 주소</li></ul></li><li><img src="https://www.gatevidyalay.com/wp-content/uploads/2018/09/IPv4-Header-1.png" alt="IPv4 Header" /></li></ul><h3 id="ipv4-와-ipv6-주소-비교"><a class="markdownIt-Anchor" href="#ipv4-와-ipv6-주소-비교"></a> IPv4 와 IPv6 주소 비교</h3><p><img src="/images/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/0505_02.png" alt="IPv4 와 IPv6 주소 비교" /></p><h3 id="subnetting-서브네팅"><a class="markdownIt-Anchor" href="#subnetting-서브네팅"></a> Subnetting 서브네팅</h3><ul><li>할당된 네트워크 주소를 다시 여러 개의 작은 네트워크로 나누어 사용</li><li>IPv4기준으로 4Byte 주소 중 네트워크 주소와 호스트 주소를 구분하기 위한 비트를 <u>Subment Maks 서브넷 마스크</u>라고 함</li></ul><h3 id="domain-name-도메인-네임"><a class="markdownIt-Anchor" href="#domain-name-도메인-네임"></a> Domain Name 도메인 네임</h3><ul><li>숫자로 된 IP주소를 사람이 이해하기 쉬운 문자 형태로 표현 한 것</li><li><code>호스트 컴퓨터이름.소속기관이름.소속기관종류.소속국가명</code> 순으로 구성되며 왼쪽에서 오른쪽으로 갈수록 상위 도메인</li><li>문자로 된 도메인 네임을 IP주소로 변환하는 역할을 담당하는 시스템은 DNS; Domain Name System 서버</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;ip-internet-protocol-의-개념&quot;&gt;&lt;a class=&quot;markdo
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="IP" scheme="https://hyeonukdev.github.io/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 네트워크 7계층</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC7%EA%B3%84%EC%B8%B5/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC7%EA%B3%84%EC%B8%B5/</id>
    <published>2020-05-05T05:33:01.000Z</published>
    <updated>2020-05-05T05:33:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="osi-open-system-interconnection-참조-모델-개요"><a class="markdownIt-Anchor" href="#osi-open-system-interconnection-참조-모델-개요"></a> OSI; Open System Interconnection 참조 모델 개요</h3><ul><li>국제 표준화 기구인 ISO에서 다른 시스템간 통신을 위해 <u>네트워크 구조를 제시한 기본 모델</u></li><li><u>데이터 통신 시 필요한 장비 및 처리 방법 등을 7단계로 표준화</u></li><li><img src="https://baekjungho.github.io/images/posts/201904/osi.jpg" alt="OSI 7 Layer" /></li><li><img src="https://lh3.googleusercontent.com/proxy/icCZleoAKcuSSkDhGQA1C-6Odmghiv2dVpVNg0WZZzdOgfSFuppsNMG0vtyNDHeGhqFPEw4TyHS74sx7-rIO3sSz2Gox6_t1Np7DRXY1rwoJPy6zpFTiNSCdymZkSbhRw9zzsX4CKgW6aOB5mpl7aPGEK-HWctvJGd08MJ911j4WbeKPVktE0s3drWn1h_9YOmjH-vYHDP5CY7orVuu1gmkUM58nU4XJXgLNa77_o2FFg_uTHdDRhEknJ-uZDw" alt="OSI 7 Layer" /></li></ul><h3 id="osi-참조-모델의-목적"><a class="markdownIt-Anchor" href="#osi-참조-모델의-목적"></a> OSI 참조 모델의 목적</h3><ul><li>서로 다른 시스템 간을 상호 접속하기 위한 개념 규정</li><li>OSI 규격을 개발하기 위한 범위 정립</li><li>관련 규정의 적합성을 조절하기 위한 공통적인 기반 제공</li></ul><h3 id="osi-참조-모델의-계층별-데이터-단위"><a class="markdownIt-Anchor" href="#osi-참조-모델의-계층별-데이터-단위"></a> OSI 참조 모델의 계층별 데이터 단위</h3><ul><li>프로토콜 데이터 단위 PDU; Protocol Data Unit<ul><li>7계층 응용 계층 : 메시지(Message)</li><li>6계층 표현 계층 : 메시지(Message)</li><li>5계층 세션 계층 : 메시지(Message)</li><li>4계층 전송 계층 : 세그먼트(Segment)</li><li>3계층 네트워크 계층 : 패킷(Packet)</li><li><u>2계층 데이터링크 계층 : 프레임(Frame)</u></li><li>1계층 물리 계층 : 비트(bit)</li></ul></li></ul><h3 id="osi-7-layer-계층별-기능"><a class="markdownIt-Anchor" href="#osi-7-layer-계층별-기능"></a> OSI 7 Layer 계층별 기능</h3><h4 id="1-physical-layer-물리-계층"><a class="markdownIt-Anchor" href="#1-physical-layer-물리-계층"></a> 1. Physical Layer 물리 계층</h4><ul><li>전송에 필요한 두 장치 간의 실제 접속과 절단 등 <u>기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의</u></li><li><u>물리적 전송매체와 전송 신호방식</u>을 정의</li><li>관련 장비<ul><li><u>허브</u></li><li><u>리피터</u></li></ul></li></ul><h4 id="2-data-link-layer-데이터링크-계층"><a class="markdownIt-Anchor" href="#2-data-link-layer-데이터링크-계층"></a> 2. Data Link Layer 데이터링크 계층</h4><ul><li>두 개의 개발 시스템들 간 <u>속도 차이</u>를 해결하기 위한 <u>흐름 제어</u></li><li>프레임의 시작과 끝을 구분하기 위한 <u>프레임의 동기화</u></li><li>오류의 검출과 회복을 위한 <u>오류 제어</u></li><li>프레임의 순서적 전송을 위한 <u>순서 제어</u></li><li>관련 장비<ul><li><u>랜카드</u></li><li><u>브리지</u></li><li><u>스위치</u></li></ul></li></ul><h4 id="3-network-layer-네트워크-계층"><a class="markdownIt-Anchor" href="#3-network-layer-네트워크-계층"></a> 3. Network Layer 네트워크 계층</h4><ul><li>개방 시스템들 간의 <u>네트워크 연결을 설정, 유지, 해제</u>하는 기능과 <u>경로 설정, 데이터 교화 및 중계, 트래픽 제어, 패킷 정보 전송</u></li><li>관련 장비<ul><li><u>라우터</u></li></ul></li></ul><h4 id="4-transport-layer-전송-계층"><a class="markdownIt-Anchor" href="#4-transport-layer-전송-계층"></a> 4. Transport Layer 전송 계층</h4><ul><li>논리적 안정과 균일한 데이터 전송 서비스를 제공함으로써 <u>종단시스템간에 투명한 데이터 전송을 가능하게 함</u></li><li>종단 시스템간 전송 연결설정, 데이터 전송, 연결해제 기능과 오류 제어, 흐름제어 수행</li><li>TCP, UDP의 표준</li><li>관련 장비<ul><li><u>게이트웨이</u></li></ul></li></ul><h4 id="5-session-layer-세션-계층"><a class="markdownIt-Anchor" href="#5-session-layer-세션-계층"></a> 5. Session Layer 세션 계층</h4><ul><li>송/수신 측 간의 관련성을 유지하고 대화 제어 담당</li></ul><h4 id="6-presentation-layer-표현-계층"><a class="markdownIt-Anchor" href="#6-presentation-layer-표현-계층"></a> 6. Presentation Layer 표현 계층</h4><ul><li>응용계층으로부터 받은 데이터를 세션 계층에 보내기 전에 통신에 적당한 형태로 변환하고, 세션 계층에서 받은 데이터는 응용 계층에 맞게 변환하는 기능</li><li>코드변환, 데이터 암호화, 데이터 압축, 구문 검색, <u>정보형식 변환</u></li></ul><h4 id="7-application-layer-응용-계층"><a class="markdownIt-Anchor" href="#7-application-layer-응용-계층"></a> 7. Application Layer 응용 계층</h4><ul><li>응용 프로세스와 직접 관계하여 <u>일반적인 응용 서비스를 수행</u></li><li>정보 교환, 파일 전송, 가상 터미널</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;osi-open-system-interconnection-참조-모델-개요&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="네트워크7계층" scheme="https://hyeonukdev.github.io/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC7%EA%B3%84%EC%B8%B5/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 인터넷 구성의 개념</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EC%9D%B8%ED%84%B0%EB%84%B7%EA%B5%AC%EC%84%B1%EC%9D%98%EA%B0%9C%EB%85%90/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%EC%9D%B8%ED%84%B0%EB%84%B7%EA%B5%AC%EC%84%B1%EC%9D%98%EA%B0%9C%EB%85%90/</id>
    <published>2020-05-05T04:52:54.000Z</published>
    <updated>2020-05-05T04:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><ul><li><u>네트웤크 계층 구조</u>에서 각 층의 역할을 이해</li><li>응용의 특성에 따라 <u>TCP와 UDP를 구별</u>하여 적용</li><li>패킷 스위칭 시스템 이해하고, 다양한 라우팅 알고리즘과 <u>IP 프로토콜</u>을 설명</li></ul><h3 id="용어사전"><a class="markdownIt-Anchor" href="#용어사전"></a> 용어사전</h3><ul><li><p>OSI 7 Layer</p><ul><li>국제표준화 기구인 ISO(International Standard Organization)에서 다른 시스템간 통신을 위해 네트워크 구조를 제시한 기본 모델로 7계층 구조</li></ul></li><li><p>Protocol 프로토콜</p><ul><li>서로 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화시켜 놓은 통신 규약</li></ul></li></ul><h3 id="인터넷의-개념"><a class="markdownIt-Anchor" href="#인터넷의-개념"></a> 인터넷의 개념</h3><ul><li><u>TCP/IP 프로토콜을 기반으로 전세계</u> 수 많은 네트워크들이 연결된 광범위한 컴퓨터 통신망</li><li>1969년 미 국방성의 ARPANET에서 시작</li><li>유닉스 운영체제를 기반으로 함</li><li>인터넷에 연결된 모든 컴퓨터는 <u>고유한 IP주소를 가짐</u></li><li>동시에 여러 사람이 인터넷을 이용하여 데이터 송수신 할 수 있도록 패킷 단위로 데이터를 분할하여 전송하는 <u>패킷교환 방식을 사용</u></li><li>컴퓨터 또는 네트워크로 서로 연결하기 위해 <u>게이트 웨이, 라우터, 브리지, 허브 등 네트워크 장비가 필요</u></li><li><b>증폭기는 아날로그 신호 증폭을 위한 장비로 인터-네트워킹과는 무관</b></li></ul><h3 id="네트워크-관련-장비"><a class="markdownIt-Anchor" href="#네트워크-관련-장비"></a> 네트워크 관련 장비</h3><h4 id="1-gateway-게이트웨이"><a class="markdownIt-Anchor" href="#1-gateway-게이트웨이"></a> 1. Gateway 게이트웨이</h4><ul><li>LAN에서 <u>서로 다른 프로토콜의 네트워크</u>에 데이터를 보내거나 다른 네트워크로 부터 데이터를 받아들이는 <u>출입구 역할</u></li><li>수행 역할<ul><li>데이터 형식 변환</li><li>주소 변환</li><li>프로토콜 변환</li></ul></li></ul><h4 id="2-router-라우터"><a class="markdownIt-Anchor" href="#2-router-라우터"></a> 2. Router 라우터</h4><ul><li>서로 다른 프로토콜의 LAN이나 LAN과 WAN의 연결 기능에 <u>데이터 전송의 최적의 경로를 선택할</u> 수 있는 기능 추가</li></ul><h4 id="3-repeater-리피터"><a class="markdownIt-Anchor" href="#3-repeater-리피터"></a> 3. Repeater 리피터</h4><ul><li><u>전송되는 신호가</u> 전송 선로의 특성 및 외부 충격 등 요인으로 원래의 형태와 다르게 <u>왜곡되거나 약해질 경우 원래의 신호 형태로 재생하여 다시 전송</u>하는 역할 수행</li></ul><h4 id="4-hub-허브"><a class="markdownIt-Anchor" href="#4-hub-허브"></a> 4. Hub 허브</h4><ul><li>사무실이나 가까운 거리의 <u>컴퓨터들을 연결하는 장치</u>로 각 회선을 통합적으로 관리하며 신호 증폭 기능의 리피터 역할도 포함</li><li>종류<ul><li><u>더미 허브</u><ul><li>LAN이 보유한 대역폭을 연결된 컴퓨터 수 만큼 나누어 제공</li><li>100MB 대역폭 5대 연결시 20MB 대역폭으로 속도 낮아짐</li></ul></li><li><u>스위칭 허브</u><ul><li>네트워크 상에 흐르는 데이터의 유무 및 흐름을 제어하며, 연결된 컴퓨터 수에 상관없이 <u>LAN의 최대 대역폭을 사용할 수 있도록 신호 증폭 기능을 제공하는 허브</u></li></ul></li></ul></li></ul><h4 id="5-nic-network-interface-card-랜-카드"><a class="markdownIt-Anchor" href="#5-nic-network-interface-card-랜-카드"></a> 5. NIC; Network Interface Card 랜 카드</h4><ul><li>컴퓨터가 네트워크에 연결되도록 하는 접촉 점 역할 장치로, 이더넷 카드 혹은 네트워크 어댑터라고 함</li></ul><h4 id="6-bridge-브리지"><a class="markdownIt-Anchor" href="#6-bridge-브리지"></a> 6. Bridge 브리지</h4><ul><li><u>동일한 프로토콜을 사용하는 LAN과 LAN을 연결</u>하거나 LAN 안에서 컴퓨터 그룹을 연결하는 기능을 수행</li><li>네트워크를 분산적으로 구성하여 보안성을 높일 수 있음</li></ul><h4 id="7-switch-스위치"><a class="markdownIt-Anchor" href="#7-switch-스위치"></a> 7. Switch 스위치</h4><ul><li>브리지와 같이 LAN과 LAN을 연결하여 훨씬 더 큰 LAN을 만드는 장치</li><li>하드웨어를 기반으로 처리하므로 전송 속도가 빠름</li><li>포트마다 각기 다른 전송 속도를 지원하도록 제어할 수 있고 수십에서 수백 개의 포트 제공</li></ul><h3 id="네트워크-규모에-따른-분류"><a class="markdownIt-Anchor" href="#네트워크-규모에-따른-분류"></a> 네트워크 규모에 따른 분류</h3><ul><li>LAN; Local Area Network<ul><li>근거리 통신망</li></ul></li><li>MAN; Metropolitan Area Network<ul><li>대도시 통신망</li></ul></li><li>WAN; Wide Area Network<ul><li>광대역 통신망</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;네트웤크 계층 구조&lt;/u&gt;에서 각 층의 역할을 이해&lt;/li&gt;
&lt;li&gt;응
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="인터넷구성의개념" scheme="https://hyeonukdev.github.io/tags/%EC%9D%B8%ED%84%B0%EB%84%B7%EA%B5%AC%EC%84%B1%EC%9D%98%EA%B0%9C%EB%85%90/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - 핵심정리</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/</id>
    <published>2020-05-04T16:10:53.574Z</published>
    <updated>2020-05-04T16:10:53.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="1-운영체제-종류"><a class="markdownIt-Anchor" href="#1-운영체제-종류"></a> 1. 운영체제 종류</h3><ul><li><u>컴퓨터 시스템의 자원들(CPU, 주기억장치, 보조기억장치, 파일 등)을 효율적으로 관리</u>하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 <u>인터페이스를 제공하는 시스템 소프트웨어</u></li><li>종류<ul><li>Windows</li><li>UNIX</li><li>LINUX</li><li>MacOS</li><li>MS-DOS</li></ul></li></ul><h3 id="2-메모리-관리"><a class="markdownIt-Anchor" href="#2-메모리-관리"></a> 2. 메모리 관리</h3><ul><li>기억장치의 계층 구조(산 형태 순서 정렬)<ul><li>레지스터</li><li>캐시 기억장치</li><li>주기억장치</li><li>보조기억장치</li></ul></li><li>기억장치 관리 전략<ul><li>Fetch</li><li>Placement</li><li>Replacement</li></ul></li><li>주기억장치 할당 기법<ul><li>연속 할당</li><li>분산 할당</li></ul></li><li>가상기억장치의 구현 기법<ul><li>페이징</li><li>세그먼테이션</li></ul></li><li>페이지 교체 알고리즘 종류<ul><li>FIFO</li><li>LRU</li><li>NUR</li><li>OPT</li><li>LFU</li><li>SCR</li></ul></li><li>가상기억장치의 기타 관리<ul><li>Locality</li><li>Working Set</li><li>Thrashing</li></ul></li></ul><h3 id="3-프로세스-스케줄링"><a class="markdownIt-Anchor" href="#3-프로세스-스케줄링"></a> 3. 프로세스 스케줄링</h3><ul><li>프로세스<ul><li>프로세서에 의해 처리되는 사용자 프로그램</li><li>프로세서<ul><li>CPU</li><li>처리기</li></ul></li></ul></li><li>스레드<ul><li>프로세스 내에서 작업 단위로서 시스템의 여러 자원을 할당 받아 실행하는 프로그램의 단위</li></ul></li><li>스케줄링<ul><li>프로세스가 생성되어 실행될 때 필요한 시스템의 여러 자원ㅇ르 해당 프로세스에 할당하는 작업</li></ul></li><li>비선점 스케줄링의 종류<ul><li>FIFO(FCFS)</li><li>SJF</li><li>HRN</li></ul></li><li>선점 스케줄링의 종류<ul><li>RR</li><li>SRT</li><li>MLQ</li><li>MFQ</li></ul></li></ul><h3 id="4-환경변수"><a class="markdownIt-Anchor" href="#4-환경변수"></a> 4. 환경변수</h3><ul><li>시스템 소프트웨어 동작에 영향을 미치는 동적인 값들의 모임</li><li>윈도우 환경변수<ul><li>%APPDATA%, %COMSPEC%, %HOMEPATH%, %PATH%, %PATHEXT%, %PROGRAMFILES%, %SYSTEMDRIVE%, %SYSTEMROOT% , %USERNAME%, %USERPROFILE%</li></ul></li><li>유닉스 환경변수<ul><li>$DISPLAY, $HOME, $LANG, $MAIL, $PATH, $PS1, $PWD, $TERM, $USER</li></ul></li></ul><h3 id="5-shell-script"><a class="markdownIt-Anchor" href="#5-shell-script"></a> 5. Shell Script</h3><ul><li>GUI<ul><li>Graphic User Interface</li><li>마우스로 아이콘이나 메뉴를 선택하여 작업</li></ul></li><li>CLI<ul><li>Command Line Interface</li><li>키보드로 명령어를 직접 입력하여 작업</li></ul></li></ul><h3 id="unix와-linux-기본-명령어"><a class="markdownIt-Anchor" href="#unix와-linux-기본-명령어"></a> UNIX와 LINUX 기본 명령어</h3><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>cat</td><td>파일 내용을 화면에 표시</td></tr><tr><td>chdir</td><td>디렉토리 위치 변경</td></tr><tr><td>chmod</td><td>파일의 사용 허가 지정</td></tr><tr><td>chown</td><td>소유자 변경</td></tr><tr><td>cp</td><td>파일 복사</td></tr><tr><td>getpid</td><td>자신의 프로세스 아이디를 얻음</td></tr><tr><td>ls</td><td>현재 디렉토리 내의 파일 목록을 표시</td></tr><tr><td>rm</td><td>파일 삭제</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;1-운영체제-종류&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="핵심정리" scheme="https://hyeonukdev.github.io/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>응용SW기초기술활용 - Shell Script</title>
    <link href="https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/ShellScript/"/>
    <id>https://hyeonukdev.github.io/2020/05/05/Engineer_Information_Processing/ch17_%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EA%B8%B0%EC%B4%88%ED%99%9C%EC%9A%A9/ShellScript/</id>
    <published>2020-05-04T16:02:28.000Z</published>
    <updated>2020-05-04T16:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="응용sw기초기술활용"><a class="markdownIt-Anchor" href="#응용sw기초기술활용"></a> 응용SW기초기술활용</h2><h3 id="운영체제-기본-명령어-개요"><a class="markdownIt-Anchor" href="#운영체제-기본-명령어-개요"></a> 운영체제 기본 명령어 개요</h3><ul><li><p>Shell은 사용자의 명령어를 수행하는 명령어 해석기</p></li><li><p>운영체제를 제어하는 방법</p><ul><li>GUI<ul><li>Graphic User Interface</li><li>마우스로 아이콘이나 메뉴를 선택하여 작업</li></ul></li><li>CLI<ul><li>Command Line Interface</li><li>키보드로 명령어를 직접 입력하여 작업</li></ul></li></ul></li></ul><h3 id="윈도우-cli-기본-명령어"><a class="markdownIt-Anchor" href="#윈도우-cli-기본-명령어"></a> 윈도우 CLI 기본 명령어</h3><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>ATTRIP</td><td>파일의 속성을 변경</td></tr><tr><td>CD</td><td>디렉토리의 위치 변경</td></tr><tr><td>CHKDSK</td><td>디스크 상태 점검</td></tr><tr><td>CLS</td><td>화면의 내용을 지움</td></tr><tr><td>COPY</td><td>파일 복사</td></tr><tr><td>DEL</td><td>파일 삭제</td></tr><tr><td>DIR</td><td>파일의 목록 표시</td></tr><tr><td>FIND</td><td>파일 검색</td></tr><tr><td>FORMAT</td><td>디스크 표면을 트랙과 섹터로 초기화</td></tr><tr><td>MD</td><td>디렉토리 생성</td></tr><tr><td>MOVE</td><td>파일 이동</td></tr><tr><td>REN</td><td>파일 이름 변경</td></tr><tr><td>TYPE</td><td>파일의 내용 표시</td></tr></tbody></table><h3 id="unix와-linux-기본-명령어"><a class="markdownIt-Anchor" href="#unix와-linux-기본-명령어"></a> UNIX와 LINUX 기본 명령어</h3><table><thead><tr><th>명령어</th><th>기능</th></tr></thead><tbody><tr><td>cat</td><td>파일 내용을 화면에 표시</td></tr><tr><td>chdir</td><td>디렉토리 위치 변경</td></tr><tr><td>chmod</td><td>파일의 사용 허가 지정</td></tr><tr><td>chown</td><td>소유자 변경</td></tr><tr><td>cp</td><td>파일 복사</td></tr><tr><td>exec</td><td>새로운 프로세스 수행</td></tr><tr><td>find</td><td>파일 검색</td></tr><tr><td>fork</td><td>새로운 프로세스를 생성</td></tr><tr><td>fsck</td><td>파일시스템을 검사하고 보수</td></tr><tr><td>getpid</td><td>자신의 프로세스 아이디를 얻음</td></tr><tr><td>ls</td><td>현재 디렉토리 내의 파일 목록을 표시</td></tr><tr><td>rm</td><td>파일 삭제</td></tr><tr><td>wait</td><td>fork 후 exec에 의해 실행되는 프로세스의 상위 프로세스가 하위 프로세스 종료 등의 event를 기다림</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;응용sw기초기술활용&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#응용sw기초기술활용&quot;&gt;&lt;/a&gt; 응용SW기초기술활용&lt;/h2&gt;
&lt;h3 id=&quot;운영체제-기본-명령어-개요&quot;&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="응용SW기초기술활용" scheme="https://hyeonukdev.github.io/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%9D%91%EC%9A%A9SW%EA%B8%B0%EC%B4%88%EA%B8%B0%EC%88%A0%ED%99%9C%EC%9A%A9/"/>
    
    
      <category term="정보처리기사" scheme="https://hyeonukdev.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
      <category term="ShellScript" scheme="https://hyeonukdev.github.io/tags/ShellScript/"/>
    
  </entry>
  
</feed>
