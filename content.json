{"pages":[],"posts":[{"title":"데이터 자료형","text":"python 자료형 자료형 저장 모델 변경 가능성 접근방법 수치형 int, float, complex Literal Immutable Direct 문자열 str Container Immutable Sequence 튜플 tuple Container Immutable Sequence 리스트 list Container Mutable Sequence 사전 dict Container Mutable Mapping 집합 set Container Mutable set 저장 모델 Literal : 단일 종류 Container : 종류에 무관 변경 가능성 Immutable : 변경 불가 Mutable : 변경 가능 접근 방법 Direct : 직접 할당 Sequence : 순서 중시 Mapping : 순서 무관 Set : 중복 불가 튜플은 최초에 입력한 데이터 변경이 불가 리스트는 최초에 입력한 데이터 변경 가능 사전은 순서에는 상관 없지만 중복 가능 집합은 중복 불가능 C자료형 자료형 메모리크기 데이터 범위 정수형 char 1바이트 -128 ~ +127 정수형 short 2바이트 -32768 ~ +32767 정수형 int 4바이트 -2147483648 ~ +2147483647 정수형 long 4바이트 -2147483648 ~ + 2147483647 실수형 float 4바이트 3.4x10^-37 ~ +3.4x10^+38 실수형 double 8바이트 1.7x10^-307 ~ 1.7x10^+308 실수형 long double 8바이트 이상 -","link":"/2020/04/21/DataScience/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9E%90%EB%A3%8C%ED%98%95/"},{"title":"빅데이터(Big Data) 분석의 중요성","text":"데이터로부터 얼마나 많은 부가가치를 얻을 수 있나? 과학 기술 경쟁이 치열 침단 과학기술이 사용자의 요구를 충족시켰을때 부가가치 창출(아마존 마케팅, 애플 등) 미래 사용자의 필요 예측이 매우 중요 기술분야에서 앞으로 중시될 세가지 영역 데이터 마이닝, 기계학습, 인공지능, 자연어처리 Business Intelligence, 경쟁정보전략 분석, 통계 빅데이터의 시대적 변화o 1990년대 중반 ~ 2000년대 중반 고객정보 유통사 상품 구매정보 상품/서비스 구매정보 교통정보 리서치 정보 o 2000년대 중반 ~ 2010년대 중반 Data의 통합 관리를 통한 소비자의 입체적 이해 o 2010년대 중반 이후 고객정보 모바일 SNS 이종 데이터 간의 결합 Cloud Computing 데이터 마켓의 출현 빅데이터 활용 개념도 빅데이터 산업 분류 빅데이터 활용사례 공공빅데이터 구글트렌드 빅데이터 활용 프로세스 데이터수집 및 관리 정형데이터 - 고객수 - 판매량 - 키워드빈도 비정형데이터 - 로그 - SNS 텍스트 - 사진 데이터분석 기초통계분석 - 집계 - 통계치 - 회귀분석 데이터마이닝/기계학습/AI/딥러닝 - 군집,연관 - 시계열, 추천 - 텍스트마이닝 - 커뮤니티분석 데이터활용 시각화 신제품전략 마케팅전략 니즈발견 리스크경감 데이터분석에 필요한 기술들 Mathematics Expertise 통계 선형대수 미분/적분 Business/Strategy Acumen 도메인 지식/경험 문제 영역 Technology, Hacking Skills 컴퓨터 프로그래밍 데이터베이스 인프라 시스템 빅데이터 인프라 : 하둡 하둡은 오픈소스 분산처리 기술 하둡 분산 파일 시스템 HDFS(Hadoop Distributed File System) 간단한 서버들을 이용하여 가상화된 HDFS을 구성하고 여기에 존재하는 거대한 데이터를 간편하게 다루는 MapReduce 프레임워크를 구현하여 제공 빅데이터 관련 이슈 개인정보 이슈 인력양성 빅데이터의 지도화 자료의 품질관리 중요성 수학 및 통계, IT, 언어학, 비즈니스 등의 다양한 영역의 융합교육 필요 인프라 또는 IT기술 뿐만 아니라, 분석과 시각화 및 해석의 중요성 부각 장기적인 관점에서의 데이터 분석 및 관리 필요","link":"/2020/04/15/DataScience/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0(Big%20Data)%EB%B6%84%EC%84%9D%EC%9D%98%EC%A4%91%EC%9A%94%EC%84%B1/"},{"title":"엑셀 수식 사용 - 2강. 함수 사용법","text":"2.함수 사용법 함수 함수의 형태 함수명() 괄호 내부에는 변수(or 인자) 사용 변수 변수에는 상수, 주소, 범위, 이름, 함수 등 사용 변수 없는 함수 존재 ex) TODAY(), PI() 함수는 수식의 일부분 엑셀에는 400개 이상의 함수 존재 직접만들기도 가능 함수 입력방법 수동 입력 방식 ‘=’ 과 함수명 입력 후 괄호열기 입력 함수명 입력 중 아래 리스트에서 선택 후 탭 키 입력 빠른 함수 입력 [수식] 리본메뉴 - ‘함수라이브러리’ [홈] 리본메뉴 - [자동합계] FX 메뉴 OR Shift-F3 입력 함수마법사 함수 구문 이해 변수 구분 굵은 글씨 : 현재 입력 중인 변수 위치 대괄호[] : 필수가 아닌 옵션 “…” : 변수를 더 사용 가능 자주 쓰는 변수 표기 number : 숫자 range : 범위 crieria : 조건문 lookup_value : 찾을값 lookup_array : 찾을 범위 logical_test : 논리비교 text : 문자열 num_chars : 글자수 셀 참조(references) 상대참조 기본 참조방식 수식을 복사하면, 수식 내 셀 주소가 행과 열 방향으로 이동한 만큼 셀 주소가 변함 절대참조 행과 열 주소 앞에 “$” 문자 표시 절대 참조는 수식에 복사되어도 참조 위치는 변화 없음 혼합참조 행과 열 주소 둘 중 한 군데 앞에 “$” 표시 상대참조와 절대참조가 혼합 “F4” 상대참조 -&gt; 절대참조 -&gt; 혼합참조(행) -&gt; 혼합참조(열) -&gt; 상대참조 함수 에러 메시지 DIV/0! 수식에 0으로 나누는 내용이 있음, 대게 분모 값에 빈셀이 지정됨 NAME? : 수식 엑셀에 인식할 수 없는 이름이 사용됨, 대게 이름이 지워지거나 텍스트 입력시 큰따옴표 오류 N/A : 수식에 사용할 수 없는 데이터가 지정된 경우, 일부함수에서 오류 NULL! : 수식이 교집합이 없는 두 범위의 교집합을 설정함 NUM! : 값 에러, 양이 되어야하는 값에 음의 값이 입력될 때 REF! : 수식이 참조할수 없는 셀을 지정할 때, 워크시트 내에 삭제된 셀이 사용될 때 VALUE! : 수식에 잘못된 형태의 변수나 숫자가 포함되어 있을 때","link":"/2020/04/16/DataScience/%EC%97%91%EC%85%80%EC%88%98%EC%8B%9D%EC%82%AC%EC%9A%A9-2%EA%B0%95%ED%95%A8%EC%88%98/"},{"title":"순열과 조합","text":"순열(Permutation)-&gt; PERMUT(number, number_chosen) 서로 다른 n개의 원소에서 r개를 중복없이 골라 순서에 상관 있게 나열하는 것으로 n개에서 r개를 택하는 순열이라고 함 $$ nPr = n * (n-1) * (n-2) * … * (n - r + 1) = n! / (n-r)! $$ 순열의 종류 순열 중복순열 : n개에서 r개를 순서에 상관 있게 뽑는데 중복가능 등차순열 : n에서 r개를 뽑는데, n개 중에서 똑같은 것이 섞인 경우 원순열 : n개를 원형으로 나열하는 경우 조합(Combination)-&gt; COMBIN(number, number_chosen) 서로 다른 n개의 원소에서 순서에 상관없이 r개를 뽑을 때, 이때 n개에서 r개를 택하는 조합 $$ nCr = nPr / r! = n!/ (n-r)!r! $$ 조합의 종류 조합 중복조합 : n개에서 r개를 순서에 상관없이 뽑는데 중복을 허락하는 경우","link":"/2020/04/18/DataScience/%EC%88%9C%EC%97%B4%EC%A1%B0%ED%95%A9/"},{"title":"빅데이터(Big Data)의 이해","text":"빅데이터 등장 배경 디지털 기술 발전에 따른 대규모 데이터 생성 데이터 생성 규모(Volume)확대 생성주기(Velocity)가 짧아짐 기존 수치 위주에서 문자, 이미지, 영상 등 다양한 형태(Variety)로 발생 빅데이터의 정의 명확히 합의된 정의가 없음 - 데이터 수집, 저장, 관리, 분석을 처리하는 통상의 용량을 넘어서는 Dataset 규모로, 그 정의는 주관적이며 앞으로도 기술발전에 따라 정의는 변화될 것이다. - 가장 많이 쓰이는 정의 3V + Value - 엑셀로 처리하기에 적합하지 않는 데이터 - SPSS, SAS와 같은 통계 패키지 등에 적합한 자료의 의미 3V + Value 빅데이터의 분류 및 처리과정 데이터 마이닝(Data Mining) 데이터베이스 내에서 어떠한 방법에 의해 관심 있는 지식을 찾아내는 과정 - 대용량의 데이터 속에서 유용한 정보를 발견하는 과정이며 이러한 기술을 의미 - 데이터 베이스 마케팅 분야 - 순차패턴, 유사성을 활용 정의 - 복잡한 통계적인 분석이나 모형구축 기법을 통해 대용량의 데이터 내에 이전에는 알려지지 않았던 패턴이나 규칙 등을 탐색하고 모형화 하여 유용한 지식을 추출하는 일련의 과정 - 통계적 관점 : 대용량의 데이터에 대한 탐색적 데이터 분석(Exploratory Data Analysis) 빅데이터 환경의 특징 구분 기존 빅데이터 환경 데이터 정형화된 수치자료 중심 -비정형의 다양한 데이터 - 문자 데이터 - 영상 데이터 - 위치 데이터 하드웨어 고가의 저장장치 데이터베이스 데이터웨어하우스 - 클라우드 컴퓨팅 등 비용 효율적인 장비 활용 가능 소프트웨어/분석 방법 관계형 데이터베이스 통계패키지 데이터마이닝 머신러닝 - 오픈소스 형태의 무료 소프트웨어 - Hadoop, NoSQL - 오픈소스 통계솔루션(R) - 텍스트 마이닝 - 온라인 버즈 분석 -감성 분석 일반데이터와 빅데이터의 차이 빅데이터 IT 핵심 기술","link":"/2020/04/15/DataScience/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0(Big%20Data)%EC%9D%98%EC%9D%B4%ED%95%B4/"},{"title":"통계의 목적과 엑셀 데이터 기초","text":"통계학의 정의통계학(statistics)은 수량적인 비교를 기초로 사실을 관찰하고 분석하는 방법을 연구하는 학문일반적으로 수집되는 데이터가 조사자, 시기, 방법, 목적 등에 따라 다르게 나타나는 불균형적인 데이터이지만, 통계학은 이 안에서 의미를 찾아내고 실생활에서 적용가능한 유용성을 찾아내 이를 수치로 표현할 수 있다. 기술통계(descriptive statistics):표본에 대한 분석 결과의 각종 수치들을 활용하여 집단의 특성을 설명 추론통계(inference statistics):표본을 활용하여 모집단의 특성을 나타내는 것 통계학의 목적 의사결정많은 정보를 지각하고 평가하여 하나를 선택 정보와 반응 사잉의 다대일 대응으로 나타남 여러가지 대안 가운데 하나를 선택할 때 사용 불확실성의해소의사결정을 하게 되면 그 결과가 정확한 것이라 할 수 있는가의 문제 빅데이터의 개념을 들여와 불확실성을 해소 정보수집이 어려움 시장의 변화와 대응의 어려움에대한 극복 필요 요약다양한 데이터를 신속히 이해할 수 있도록 다양한 형태로 표현 불확실성의 감소를 위해 사용 반복되어 생산되는 데이터를 정리된 보고서로 표현하여 불확실성이 낮은 상황의 의사결정이 가능하도록 함 연관성 파악요약된 보고서에서 주요한 항목들 간의 연관성을 파악한 경쟁우위의 확보 의사결정권자에게 항목 간 연관성을 제시해 미래의 계획을 지원 다양한 자료는 의사결정에 있어 세부적 판도에 기여 예측인과관계 파악을 통해 패턴을 찾아내고 이러한 패턴을 통해 추세를 판단 다양한 변수의 대입과 삭제를 통해 예측 가능 통계분석의 과정통계분석은 표본을 통해 의미 있는 자료를 추출하고, 이를 기반으로 의사결정, 불확실성의 해소요약, 연관성 파악, 예측 등의 결과로 이어지도록하는 일련의 과정이다==수집 -&gt; 정제 -&gt; 추정 -&gt; 검정== 수집 조사과정에서 자연스럽게 수집 조사자가 특정 목적에 맞는 자료를 얻기 위해 설계한 수집 도구를 이용보통 자료가 많을 수록 통계분석에서 더 좋은 결과를 얻을 것이라고 생각하지만 조사의 목적에 맞는 적절한 자료를 수집해서 최적의 통계방법으로 분석한 결과가 가장 정확도가 높음 정제 분석에 적합한 자료를 선별 적합하지 않은 자료는 삭제 추정 통계 분석을 진행하는 것 -&gt; 모수를 추정하는 것 표본의 특성을 설명하는 통계량을 통해 모집단의 모수를 추정하게 됨 검정 통계조사의 목적 -&gt; 주장이 믿어지는 사실이 실제로 옳은지 아닌지를 확인 수립된 가설이 유의미하고 타당성을 가지는지 통계적으로 확인하는 과정 확인을 통해 가설의 기각와 채택여부를 판단 통계분석의 한계 확률이 없으면 무의미 - 통계분석의 결과는 항상 확률과 연관되어 표현 항상 틀릴 가능성 내포 - 신뢰수준 100% -&gt; 신뢰구간에 해당하는 값 (-무한 ~ + 무한) - 결과의 범위가 줄수록 신뢰구간은 100%에서 멀어짐","link":"/2020/04/15/DataScience/%ED%86%B5%EA%B3%84%EC%9D%98%EB%AA%A9%EC%A0%81%EA%B3%BC%EC%97%91%EC%85%80%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B8%B0%EC%B4%88/"},{"title":"아나콘다설치","text":"아나콘다 가상 환경 구성아나콘다가 설치 되었다는 가정하에 진행하겠다파이썬 프로젝트는 파이썬 실행 환경을 독립적으로 가능하게 해주므로 가상 환경을 만들어 보자.conda 명령어를 통해 가상 환경을 생성하자. 12lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG$ conda create --name pr_tensorflow python=3 conda crate는 가상환경을 생성하는 것을 의미–naeme 옵션에 pr_tensorflow입력하고 3버전을 입력 123lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG$ conda activate pr_tensorflow(pr_tensorflow 윈도우 환경에서는 activate로 가상환경을 실행해주면 (pr_tensorflow)가 만들어진다 가상환경이름을 잊어버렸다면 123456lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG$ conda env list# conda environments:#base C:\\Users\\lego7\\Anaconda3pr_tensorflow * C:\\Users\\lego7\\Anaconda3\\envs\\pr_tensorflow 실습 환경 구성github링크 123456789101112131415lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG$ git clone https://github.com/NLP-kr/tensorflow-ml-nlp.gitCloning into 'tensorflow-ml-nlp'...lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG$ lstensorflow-ml-nlp/(pr_tensorflow)lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG$ cd tensorflow-ml-nlp(pr_tensorflow)lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG/tensorflow-ml-nlp (master)$ ls1.Intro/ 3.NLP_INTRO/ 5.TEXT_SIM/ main.png requirements.txt2.NLP_PREP/ 4.TEXT_CLASSIFICATION/ 6.CHATBOT/ README.md(pr_tensorflow) python 3.6 버전을 설치해주자 12lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG/tensorflow-ml-nlp (master)$ conda install python=3.6 123lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG/tensorflow-ml-nlp (master)$ pip install -r requirements.txtCollecting tensorflow 주피터노트북 실행 12lego7@DESKTOP-UHCO554 MINGW64 ~/Desktop/NaverCloud/hyeonukdev/NLG/tensorflow-ml-nlp (master)$ jupyter notebook","link":"/2020/04/01/NLG-anaconda/%EC%95%84%EB%82%98%EC%BD%98%EB%8B%A4%EC%84%A4%EC%B9%98/"},{"title":"엑셀 수식 사용 - 1강. 수식과 함수","text":"1.수식의 이해 Cell의 자료형식 숫자형식 : 0 ~ 9 숫자의 정밀도는 앞에서 15자리, -9.9E+307~9.9E+307 범위 문자형식 : A ~ Z, a ~ z, 가나다라, 특수문자 수학형식 : = 으로 시작 날짜/시간 형식 수식 - 연산자(수식연산자, 논리연산자) 수식연산자(Mathematical operators) 연산자 설명 + 더하기 - 빼기 * 곱하기 / 나누기 ^ 지수 &amp; 문자열조합 논리연산자(Logical operators) 연산자 설명 = 같음 &gt; 보다 큼 &lt; 보다 작음 &gt;= 보다 크거나 같음 &lt;= 보다 작거나 같음 &lt;&gt; 같지 않음 연산자 우선 순위(Operator precedence) 기호 연산자 연산순위 ^ 지수승 1 * , / 곱하기,나누기 2 + , - 더하기,빼기 3 &amp; 문자열 결합 4 = , &lt;,&gt; 같음,작음,큼 5 예시","link":"/2020/04/16/DataScience/%EC%97%91%EC%85%80%EC%88%98%EC%8B%9D%EC%82%AC%EC%9A%A9-1%EA%B0%95%EC%88%98%EC%8B%9D%EA%B3%BC%ED%95%A8%EC%88%98/"},{"title":"2장요약","text":"2.5 2장 요약 벡터가 어떻게 의미를 가지게 되는가 임베딩에 자연어의 통계적 패턴 정보를 주면 자연어의 의미를 함축할 수 있다. 백오브워즈 가정에서는 어떤 단어의 등장 여부 혹은 그 빈도 정보를 중시한다. 백오브워즈 가정의 대척점에는 언어 모델이 있다. 언어 모델은 단어의 등장 순서를 학습해 주어진 단어 스퀀스가 얼마나 자연스러운지 확률을 부여한다. 분포 가정에서는 문장에서 어떤 단어가 같이 쓰였는지를 중요하게 따진다. 말뭉치의 통계적 패턴을 서로 다른 각도에서 분석하는 것이며 상호 보완적이다.","link":"/2020/04/02/KoreanEmbedding/2%EC%9E%A5%EC%9A%94%EC%95%BD/"},{"title":"1장정리","text":"1.6 1장의 요약 임베딩이란 자연어를 기계가 이해할 수 있는 숫자의 나열인 벡터로 바꾼 결과 혹은 그 일련의 과정 전체를 가리킴 임베딩을 사용하면 단어/문장 간 관련도를 계산할 수 있음 임베딩에는 믜미적/문법적 정보가 함축돼 있음 임베딩은 다른 딥러닝 모델의 입력값으로 쓰일 수 있음 임베딩 기법은 (1) 통계 기반에서 뉴럴 네트워크 기반으로 (2) 단어 수준에서 문장 수준으로 (3) 엔드투엔드에서 프리트레인/파인 튜닝 방식으로 발전해옴 임베딩 기법은 크게 행렬 분해 모델, 에측 기반 방법, 토픽 기반 기법 등으로 나눠짐 이 책이 다루는 데이터의 최소 단위는 토큰임. 문장은 토큰의 집합, 문서는 문장의 집합, 말뭉치는 문서의 집합을 가리킴. 말뭉치 &gt; 문서 &gt; 문장 &gt; 토큰. 어휘 집합은 말뭉치에 있는 모든 문서를 문장으로 나누고 여기에 토크나이즈를 실시한 후 중복을 제거한 토큰들의 집합임","link":"/2020/03/31/KoreanEmbedding/1%EC%9E%A5%EC%A0%95%EB%A6%AC/"},{"title":"어떤단어가같이쓰였는가","text":"2.4 어떤 단어가 같이 쓰였느가2.4.1 분포 가정자연어 처리에서 분포 distribution란 특정 범위, 즉 ++윈도우++ 내에 동시에 등장하는 ++이웃 단어++ 또는 ++문맥의 집합++을 가리킨다. 개별 단어의 분포는 그 단어가 문장 내에서 주로 어느 위치에 나타나는지, 이웃한 위치에 어떤 단어가 자주 나타나는지에 따라 달라진다. 어떤 쌍이 비슷한 문맥 환경에서 자주 등장한다면 그 의미 도한 유사할 것이라는 게 분포 가정 ** distributional hypothesis**의 전제다. 예컨데 한국어의 빨래, 세탁이라는 단어의 의미를 전혀 모른다고 하자. 두 단어의 의미를 파악하기 위해서는 이들 단어가 실제 어떻게 쓰이고 있는지 관찰을 해야한다. 두 단어는 타깃 단어 ** target word**이고 청소, 물 등은 그 주위에 등장한 문맥 단어가 된다 특기는 자칭 청소와 빨래지만 요리는 절망적재를 우려낸 물로 빨래 할 때 나찬 물로 옷을 세탁한다.세탁, 청소, 요리와 기사는 이웃한 단어들이 서로 비슷하기 때문이다. 빨래가 청소 물 과 같이 등장하는 경향을 미루어 짐작해볼 때 이들끼리도 직간접적으로 관계를 지닐 가능성이 낮아보이지는 않는다. 그럼에도 개별 단어의 분포 정보와 그 의미 사이에는 논리적으로 직접적인 연관성은 사실 낮다. 다시 말해 분포 정보가 곧 의미라는 분포 가정에 의문접이 발생한다. 2.4.2 분포와 의미(1) : 형태소형태소** morpheme란 의미를 가지는 최소 단위를 말한다. 더 쪼개면 의미를 잃어버리는 것이다.예를 들어 철수가 밥을 먹었다 라고 한다면 형태소 후보는 철수, 밥, 이다.조금 더 깊게 분석해보자. 계열관계 ** paradigmatic relation가 있다. 계열 관계는 해당 형태소 자리에 다른 형태소가 ‘대치’되어 쓰일 수 있는 가를 따지는 것이다. 예컨데 철수 대신에 영희가 올 수 있고 밥대신 빵을 쓸 수 있다. 이를 근거로 형태소 자격을 부여한다. 특정 타깃 단어 주변의 문맥 정보를 바탕으로 형태소를 확인한다는 이야기와 일맥상통한다. 말뭉치의 분포 정보와 형태소가 밀접한 관계를 이루고 있다. 2.4.3 분포와 의미(2) : 품사품사란 단어를 문법적 성질의 공통성에 따라 언어학자들이 몇 갈래로 묶어 놓은 것이다. 기능 의미 형식위 세가지를 기준으로 분류한다. 기능한 단어가 문장 가운데서 다른 단어와 맺는 관계를 가르킨다.깊이 높이는 문장에서 주어로 쓰이고 깊다 높다는 서술어로 사용되고 있다. 의미단어의 형식적 의미를 나타낸다. ``깊이높이를 하나로 묶고깊다높다`를 같은 군집으로 넣을 수 있다. 품사에서는 어휘적 의미보다 형식적 의미가 중요하다. 다시말해 어떤 단어가 사물의 이름을 나타내는가, 그렇지 않으면 움직임이나 성실, 상태를 나타내느냐 하는 것이다. 형식단어의 형태적 특징을 의미한다. 깊이 높이는 변화하지 않는다. 깊었다 높았다 깊겠다 높겠따 따위와 같이 어미가 붙어 여러 가지 모습으로 변화를 일으킬 수 있다.그러나 예외가 있다. 공부 공부하다 두 개를 분류하려면 공부는 명사이지만 우리는 동작이라는 여지를 알고 있다. 품사 분류에서 가장 중요한 기준은 ==기능==이다. 해당 단어가 문장 내에서 점하는 역할에 초점을 맞춰 품사를 분류한다는 것이다.형태소의 경계를 정하거나 품사를 나누는 것과 같은 다양한 언어학적 문제는 말뭉치의 분포 정보와 깊은 관계를 갖고 있다. 이로인하여 분포 정보를 함축한다면 해당 벡터에 해당 단어의 의미를 자연스레 내재시킬 수 있는 것이다. 2.4.4 점별 상호 정보량점별 상호 정보량은 두 확률변수사이의 상관성을 계량화하는 단위다. 두 확률변수가 완전히 독립인 경우 그 값이 0이 된다. 독립이라고 하면 A가 나타나는 것이 단어 B의 등장할 확률에 전혀 영향을 주지 않고, 단어 B등장이 단어 A에 영향을 주지 않는 경우를 가리킨다.두 단어의 등장이 독립일 때 대비해 얼마나 자주 같이 등장하는지를 수치화한 것이다$$PMI(A,B) = log{P(A,B) \\over P(A)*P(B)}$$ PMI 행렬의 행 벡터 자체를 해당 단어의 임베딩으로 사용할 수도 있다.","link":"/2020/04/02/KoreanEmbedding/%EC%96%B4%EB%96%A4%EB%8B%A8%EC%96%B4%EA%B0%80%EA%B0%99%EC%9D%B4%EC%93%B0%EC%98%80%EB%8A%94%EA%B0%80/"},{"title":"단어가어떤순서로쓰였는가","text":"2.3 단어가 어떤 순서로 쓰였는가2.3.1 통계 기반 언어 모델언어 모델 ** language model**이란 단어 시퀀스에 확률을 부여하는 모델이다.단어의 등장 순서를 무시하는 백오브워즈와 달리 언어 모델은 시퀀스 정보를 명시적으로 학습한다. 단어가 n개 주어진 상황이라면 언어 모델은 n개 단어가 동시에 나타날 확률, 즉 P라는 것을 반환한다. 통계 기반의 언어 모델은 말뭉치에서 해당 단어 시퀀스가 얼마나 자주 등장하는지 빈도를 세어 학습한다. 이렇게 되면 주어진 단어 시퀀스 다음 단어는 무엇이 오는게 자연스러운지 알 수 있다. n-gram이란 n개 단어를 뜻하는 용어이다. 난폭,운전 눈, 뜨다 등은 2-gram 또는 bigram이라는 말을 쓴다. 누명, 을, 쓰다 는 3-gram 혹은 trigram이라고 쓴다. 경우에 따라서 n-gram은 n-gram에 기반한 언어 모델을 의미하기도 한다. 말뭉치 내 단어들을 n개씩 묶어서 그 빈도를 학습했다는 뜻이다. 예컨데 내, 내 마음 말뭉치는 빈도가 많지만 내 마음 속에 영원히 기억될 최고의 명작이다 라는 말뭉치가 한 번도 없을 수 있다. 이럴 때에는 말뭉치로 학습한 언어 모델은 해당 표현이 나타날 확률을 0으로 부여하게 된다. 문법적으로나 의미적으로 결함이 없는 훌륭한 한국어 문장임에도 해당 표현을 말이 되지 않는 문장으로 취급할 수 있다는 것이다. 내 마음 속에 영원히 기억될 최고의 라는 표현 다음에 명작이다라는 단어가 나타날 확률은 조건부확률 ** conditional probability**의 정의를 활용해 ==최대우도추정법== 으로 유도한다. $$P(명작이다|내, 마음, 속에, 영원히, 기억될, 최고의) = { Freq(내, 마음, 속에, 영원히, 기억될, 최고의, 명작이다) \\over Freq(내, 마음, 속에, 영원히, 기억될, 최고의)}$$ 그러나 우변의 분자가 0이라서 전체 값은 0이된다. 앞에서 배운 n-gram을 사용해보자. 직전 n-1개 단어의 등장 확률로 전체 단어 시퀀스 등장 확률을 근사하는 것이다. 이말을 다시 해석하면 한 상태** state의 확률은 그 직전 상태에만 영향을 받는 것이다. 마코프 가정 **Markov assumption에 기반한 것이다. $$P(명작이다|내, 마음, 속에, 영원히, 기억될, 최고의) ≈ P(명작이다|최고의)={ Freq(최고의, 명작이다) \\over Freq(최고의)}$$ 처럼 전 상황에 대해서만 영향을 주는 것이다. 다시말해 명작이다 라는 직전의 1개 단어만 보고 전체 단어 시퀀스 등장 확률을 근사한 것이다. 좀 더 늘려서 끝까지 계산하게 되면 다음과 같다. $$P(내, 마음, 속에, 영원히, 기억될, 최고의, 명작이다) ≈ P(내)P(마음|내)P(속에|마음)P(영원히|속에)P(기억될|영원히)P(최고의|기억될)P(명작이다|최고의)$$ 일반화를 시킨다면 다음과 같다. 바이그램모델에서는 1개만 참고하지만 일반화를 시키면 전체 단어 시퀀스 등장 확률 계산시 직전 n-1개 단어의 히스토리를 본다 $$P(Wn|W(n-1) = { Freq(W(n-1,W(n)) \\over Freq(W(n-1))}$$ 그러나 데이터에 한 번도 등장하지 않는 n-gram이 존재할 때 예측 문제가 발생할 수 있다. 처음 보는 단어를 본다면 그 확률은 0으로 보기 때문이다. 이를 위해서 백오프** back-off, 스무딩 ** smoothing등의 방식이 제안된다.백오프란 n-gram등장 빈도를 n보다 작은 범위의 단어 시퀀스 빈도로 근사하는 방식인데, n을 크게 하면 할 수록 등장하지 않은 케이스가 많아질 가능성이 높기 때문이다.내 마음 속에 영원히 기억될 최고의 명작이다는 7-gram에서는 0이지만 N을 4로 내린다면 달라진다.스무딩이란 등장 빈도 표에 모두 K만큼 더하는 것이다. 높은 빈도를 가진 문자열 등장 확률을 일부 깎고 학습 데이터에 전혀 등장하지 않은 케이스들에는 일부 확률을 부여하게 된다. 2.3.2 뉴럴 네트워크 기반 언어 모델뉴럴 네트워크는 입력과 출력 사이의 관계를 유연하게 포착해낼 수 있고, 그 자체로 확률 모델로 기능이 가능하기 때문에 뉴럴 네트워크로 사용한다. 1발 없는 말이 -&gt; [언어모델] -&gt; 천리 뉴럴 네트워크 기반 언어 모델은 위 그림처럼 단어 시퀀스를 가지고 다음 단어를 맞추는 과정에서 학습된다. 학습이 완료되면 이들 모델의 중간 혹은 말단 계산 결과물을 단어나 문장의 임베딩으로 활용한다. 대표적인 모델은 다음과 같다. ELMo GPT 마스크 언어 모델 ** masked language model**은 언어 모델 기반 기법과 큰 틀에서 유사하지만 디테일에서 차이가 잇다. 문장 중간에 ‘마스크’를 씌워 놓고 해당 위치에 어떤 단어가 올지 예측하는 과정을 학습한다. 대게 언어 모델 기반 기법은 단어를 순차적으로 입력받아 다음 단어를 맞춰야하기 때문에 태생적으로 일방향 ** uni-directional이다. 하지만 마스크 언어 모델 기반 기법은 문장 전체를 보고 중간을 예측하기 때문에 양방향 ** bi-directional학습이 가능하다. 대표적인 모델은 다음과 같다. BERT","link":"/2020/04/02/KoreanEmbedding/%EB%8B%A8%EC%96%B4%EA%B0%80%EC%96%B4%EB%96%A4%EC%88%9C%EC%84%9C%EB%A1%9C%EC%93%B0%EC%98%80%EB%8A%94%EA%B0%80/"},{"title":"어떤단어가많이쓰였는가","text":"2.2 어떤 단어가 많이 쓰였는가2.2.1 백오브워즈 가정수학에서 백이란 중복 원소를 허용한 집합 multiset을 뜻한다. 원소의 순서는 고려하지 않는다. 어쩌면 중복 집합과 같다.자연어 처리 분야에서는 백오브워즈 bag of words란 단어의 등장 순서에 관계없이 문서 내 단어의 등장 빈도를 임베딩으로 쓰는 기법 문장을 단어들로 나누고 이들을 중복집합에 넣어 임베딩으로 활용하는 것 저자가 생각한 주제가 문서에서의 단어 사용에 녹아 있을 것 주제가 비슷한 문서라면 단어 빈도 또는 단어 등장 역시 비슷하 것 빈도를 그대로 백오브워즈로 쓴다면 많이 쓰인 단어가 주제와 더 강한 관련을 맺고 있을 것 위 처럼 문장을 단어로 쪼개고 임의의 주머니에 넣고 뽑았을 때 등장하면 1 아니면 0을 반영한 것이다. 백오브워즈 임베딩은 단순하지만 정보 검색 ** Information Retrieval분야에서 많이 쓰인다.사용자의 질의 ** query에 가장 적절한 문서를 보여줄 때 질의를 백오브워즈 임베딩으로 변환하고 질의와 검색 대상 문서 임베딩 간 코사인 유사도를 구해 유사도가 가장 높은 문서를 사용자에게 노출한다. 2.2.2 TF-IDF단어 빈도 또는 등장 여부를 그대로 임베딩으로 쓰는 것에는 단점이 있다. 해당 단어가 많이 나왔다고 하더라도 문서의 주제를 가늠하기 어렵다. 이유는 다음과 같다. ‘을/를’, ‘이/가’ 같은 조사들이 한국어 문서에 등장한다. 이 것으로 문서의 주제를 추측하기 어렵다.이런 단점을 보완하기 위해서 Term Frequency-Inverse Document Frequency이다.단어-문서 행렬에 가중치를 계산해 행렬 원소를 바꾼다. 이 또한 단어 등장 순서는 고려하지 않는다. 위 수식을 자세히 알아보자 TF는 어떤 단어가 특정 문서에 얼마나 많이 쓰였는지 빈도를 나타낸다. A라는 단어가 문서1에 10번, 문서2에 5번 쓰였다면 문서1 - 단어A의 TF는 10, 문서2 - 단어A의 TF는 5 DF란 특정 단어가 나타난 문서의 수를 뜻한다. 문서1과 문서2에만 A가 등장했으므로 DF는 2D DF가 클수록 다수 문서에 쓰이는 범용적 단어이다 IDF는 전체 문서 수를 해당 단어의 DF로 나눈 뒤 로그를 취한 값이다. 그 값이 클수록 특이한 단어이다. 주제 예측 능력과 직결된다 결국 TF-IDF는 어떤 단어의 주제 예측 능력이 강할 수록 가중치가 커지고 그 반대의 경우 작아진다어떤 단어의 TF가 높으면 TF-IDF 값 역시 커진다단어 사용 빈도는 저자가 상정한 주제와 관련을 맺고 있을 거라는 가정에 기초한 것이다 2.2.3 Deep Averaging NetworkDeep Averaging Network는 백오브워즈 가정의 뉴럴 네트워크 버전이다. 예를 들어 애비는 종이었다 라는 문장이 있다면{애비, 종, 이, 었, 다}에 속한 단어의 임베딩을 평균을 취해 만든다. 문장 내에 어떤 단어가 쓰였는지, 쓰였다면 얼마나 많이 쓰였는지 그 빈도만을 고려한다. 문장 임베딩을 입력받아 해당 문서가 어떤 범주인지 분류 classifiation 한다.","link":"/2020/03/31/KoreanEmbedding/%EC%96%B4%EB%96%A4%EB%8B%A8%EC%96%B4%EA%B0%80%EB%A7%8E%EC%9D%B4%EC%93%B0%EC%98%80%EB%8A%94%EA%B0%80/"},{"title":"데이터와주요용어","text":"1.5 이 책이 다루는 데이터와 주요 용어 텍스트(text) 말뭉치(corpus) : 텍스트 데이터 표본(Sample) : 특정한 목적을 가지고 수집한 말뭉치 컬렉션(collection) : 말뭉치에 속한 각각의 집합 문장(sentence) : 이 책에서 다루는 데이터의 기본 단위, 마침표나 느낌표, 물음표와 같은 기호로 구분된 문자열 문서(document), 단락(paragraph)의 집합 : 생각이나, 감정, 정보를 공유하는 문장의 집합, 줄바꿈(\\n) 문자로 구분된 문자열 토큰(token), 단어(word), 형태소(morpheme), 서브워드(subword) : 이 책에서 다루는 가장 작은 단위 토크나이즈(tokenize) : 문장을 토큰 시쿼스로 분석하는 과정, 토큰 시퀀스는 문장을 토큰으로 나누는 것, 토큰 구분자는 쉼표를 주로 사용 어휘 집합(vocabulary) : 말뭉치에 있는 모든 문서를 문장으로 나누고 여기에 토크나이즈를 실시한 후 중복을 제거한 토큰들의 집합 미등록 단어(unknown word) : 어휘 집합에 없는 토큰","link":"/2020/03/31/KoreanEmbedding/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%99%80%EC%A3%BC%EC%9A%94%EC%9A%A9%EC%96%B4/"},{"title":"한국어임베딩-임베딩의역할","text":"1.2 임베딩의 역할임베딩은 다음 역할을 수행할 수 있다 단어/문장 간 관련도 계산 의미적/문법적 정보 함축 전이 학습 1.2.1 단어/문장 간 관련도 계산현업에서는 2013년 구글 연구 팀이 발표한 Word2Vec이라는 기법이 대표적이다.단어들을 벡터로 바꾸는 방법이다.한국어 위키백과, KorQuAD, 네이버 영화 리뷰 말뭉치 등은 은전한닢으로 형태소 분석을 한 뒤 100차원으로 학습한 Word2Vec 임베딩 중 희망 이라는 단어의 벡터는 다음과 같다 [-0.00209 -0.03918 0.02419 … 0.01715 -0.04975 0.009300] 위 수식의 숫자들은 모두 100개이다. 100차원으로 임베딩을 했기 때문이다.단어를 벡터로 임베딩하는 순간 단어 벡터들 사이의 유사도 similarity를 계산하는 일이 가능해진다. 각 쿼리 단어별로 벡터 간 유사도 측정 기법의 일종인 코사인 유사도 cosine similarity 기준 상위 4개 희망 절망 학교 학생 소망 체념 초등 대학생 희망찬 절망감 중학교 대학원생 꿈 상실감 야학교 교직원 열망 번민 중학 학부모 희망과 코사인 유사도가 가장 높은 것은 소망이다.자연어일 때는 불가능했던 코사인 유사도 계산이 임베딩 덕분에 가능해 졌다.다음은 Word2Vec 임베딩을 통해서 단어 쌍 간 코사인 유사도를 시각화 한 것이다. 검정색일 수록 코사인 유사도가 높다 입베딩을 수행하면 벡터 공간을 기하학적으로 나타낸 시각화 역시 가능하다 1.2.2 의미/문법 정보 함축입베딩은 벡터인 만큼 사칙연산이 가능하다.단어 벡터간 덧셈/뺄셈을 통해 단어들 사이의 의미적, 문법적 관계를 도출해낼 수 있다. 단어 유추 평가 word analogy test 단어1 - 단어2 + 단어3 연산을 수행한 벡터와 코사인 유사도가 가장 높은 단어4를 배열한다 단어1 단어2 단어3 단어4 아들 딸 소년 소녀 아들 딸 아빠 엄마 아들 딸 남성 여성 남동생 여동생 소년 소녀 남동생 여동생 아빠 엄마 1.2.3 전이학습임베딩은 다른 딥러닝 모델의 입력값으로 자주 쓰인다. 문서 분류를 위한 딥러닝 모델을 만든다.예컨데 품질 좋은 임베딩을 쓰면 문서 분류 정확도와 학습 속도가 올라간다. 이렇게 임베딩을 다른 딥러닝 모델의 입력값으로 쓰는 기법을 전이 학습 transfer learning 이라고 한다. 전이학습전이 학습 모델은 제로부터 시작하지 않는다. 대규모 말뭉치를 활용해 임베딩을 미리 만들어 놓는다. 임베딩에는 의미적, 문법적 정보 등이 있다.문장의 극성을 예측하는 모델 양방향 LSTM에 어텐션 메커니즘을 적용 bidirectional Long Short-Term Memory, Attention 이 딥러닝의 모델의 입력값은 FastText 임베딩(100차원)을 사용했다. FastText 임베딩은 Word2Vec의 개선된 버전이며 59만 건에 이르는 한국어 문서를 미리 학습한 모델학습 데이터는 다음과 같다 이 영화 꿀잼 + 긍정 positive 이 영화 노잼 + 부정 negative 전이 학습 모델은 문장을 입력받으면 해당 문장이 긍정인지 부정인지를 출력한다. 문장을 형태소 분석한 뒤 각각의 형태소에 해당하는 FastText 단어 임베딩이 모델의 입력값이 된다. 위의 그래프로 처음 부터 하는 것 보다 FastText 임베딩을 사용한 모델의 성능이 좋다. 즉, 임베딩의 품질이 좋으면 수행하려는 Task의 성능 역시 올라간다. 왜 임베딩이 중요한지 깨달았다","link":"/2020/03/29/KoreanEmbedding/%EC%9E%84%EB%B2%A0%EB%94%A9%EC%9D%98%EC%97%AD%ED%95%A0/"},{"title":"임베딩기법의역사와종류","text":"1.3 임베딩 기법의 역사와 종류1.3.1 통계 기반에서 뉴럴 네트워크 기반으로초기 임베딩 기법은 대부분 말뭉칭의 통계량을 직접 활용했다. 대표적으로 잠재 의미 분석 ** Latent Semantic Analysis**이다. 잠재 의미 분석잠재 의미 분석이란 단어 사용 빈도 등 말뭉치의 통계량 정보가 들어 있는 커다란 행렬 ** Matrix에 특이값 분해 ** Singular Value Decomposition등 수학적 기법을 적용해 행렬에 속한 벡터들의 차원을 축소하는 방법 단어-문서 행렬에 잠재 의미 분석을 적용했다고 가정하자. 그런데 단어-문서 행렬을 행의 개수가 매우 많다. 어휘 수는 대개 10~20만 개일 것이다. 행렬의 대부분 요소 값은 0이다. 문서 하나에 모든 어휘가 쓰이는 경우는 매우 드물다. 이렇게 대부분의 요소 값이 0인 행렬을 희소 행렬 ** sparse matrix**이라고 한다. 이런 희소 행렬을 다른 모델의 입력값으로 쓰게 되면 계산량도 메모리 소비량도 쓸데없이 커진다. 그래서 원래 행렬의 차원을 축소해 사용한다. 단어와 문서를 기준으로 줄인다. 잠재 의미 분석 행렬 수행 대상 행렬은 여러 종류가 될 수 있다. TF-IDF 행렬 단어-문맥 행렬 점별 상호 정보량 행렬 최근에는 뉴럴 네트워크 기반의 임베딩 기법들이 주목받고 있다. 이전 단어들이 주어졌을 때 다음 단어가 뭐가 될지 예측하거나 문장 내 일부분에 구멍을 뚫어 놓고 해당 단어가 무엇일지 맞추는 과정에서 학습된다. 1.3.2 단어 수준에서 문장 수준으로2017년 이전의 임베딩 기법들은 대게 단어 수준 모델이었다. NPLM, Word2Vec, Glove, FastText, Swivel 등이 있다. 단어 수준 임베딩 기법의 단점은 동음이의어 ** homonym을 구분하기 어렵다. 단어 형태가 같다면 동일한 단어로 보고, 문맥 정보를 해당 단어 벡터에 전달하기 때문이다.다행히도 ELMoEmbeddings from Language Modles**가 발표된 후 문장 수준 임베딩 기법이 주목받았다. 1.3.3 룰 -&gt; 엔드투엔드 -&gt; 프리트레인/파인 튜닝 1990년 : 사람이 피처를 직접 뽑음 2000년 중반 : 딥러닝 모델 주목, 입출력의 관계를 사람의 개입 없이 모델 스스로 처음부터 끝까지 이해하도록 유도 2018년 : 말뭉치로 임베딩을 만듬, 구체적 문제에 맞는 소규모 데이터에 맞게 임베딩을 포함한 모델 전체를 업데이트함 다운스트림 태스크 ** Downstream task** 품사판별 ** Part-of Speech tagging** 개체명 인식 ** Named Entity Recognition** 의미역 분석 ** Semantic Role Labeling** ######예시 품사 판별 : 나는 네가 지난 여름에 한 [일]을 알고 있다. → 일: 명사(Noun) 문장 성분 분석 : 나는 [네가 지난 여름에 한 일]을 알고 있다. → 네가 지난 여름에 한 일 : 명사구(Noun Phrase) 의존 관계 분석 : [자연어 처리는] 늘 그렇듯이 [재미있다]. → 자언어 처리는, 재미있다 : 주격명사구(Nsub) 의미역 분석 : 나는 [네가 지난 여름에 한 일]을 알고 있다. → 네가 지난 여름에 한 일 : 피행위주역(Patient) 상호 참조 해결 : 나는 어제 [성빈이]를 만났다. [그]는 스웨터를 입고 있었다. → 그=성빈이 업스트림 태스크 ** Upstream task** 단어/문장 임베딩을 프리트레인하는 작업 1.3.4 임베딩의 종류와 성능임베딩 기법 행렬 분해 예측 토픽 기반 행렬 분해 기반 방법말뭉치 정보가 들어 있는 원래 행렬을 두 개 이상의 작은 행렬로 쪼개는 방식의 임베딩 기법분해한 이후에 둘 중 하나의 행렬만 쓰거나 둘을 add 하거나 concatenate 임베딩으로 사용 예측 기반 방법어떤 단어 주변에 특정 단어가 나타날지 예측하거나, 이전 단어들이 주어졌을 때 다음 단어가 무엇일지 예측하거나, 문장 내 일부 단어를 지우고 해당 단어가 무엇일지 맞추는 과정에서 학습 토픽 기반 방법주어진 문서에 잠재된 주제를 추론** inference**하는 방식으로 임베딩을 수행모델은 학습이 완료되면 각 문서가 어떤 주제 분포를 갖는지 확률 벡터 형태로 반환 하기 때문에 가능 임베딩 성능 평가성능 측정 대상 다운스트림 태스크는 형태소 분석, 문장 성분 분석, 의존 관계 분석, 의미역 분석, 상호 참조 해결 등이다.안타깝겓게도 한국어는 공개된 데이터가 많지 않아 높은 품질 측정을 기대하긴 어렵다.","link":"/2020/03/30/KoreanEmbedding/%EC%9E%84%EB%B2%A0%EB%94%A9%EA%B8%B0%EB%B2%95%EC%9D%98%EC%97%AD%EC%82%AC%EC%99%80%EC%A2%85%EB%A5%98/"},{"title":"한국어임베딩-임베딩이란","text":"한국어임베딩github한국어 임베딩 서적을 공부하며 정리하는 글이 되겠습니다. 1.1 임베딩이란?기계의 자연어 이해와 생성은 연산 Computation 과 처리 Processing의 영역이다 자연어처리분야에서의 임베딩이란 사람이 쓰는 자연어를 기계가 이해할 수 있는 숫자의 나열인 벡터 vector로 바꾼 결과 혹은 그 일련의 과정 전체를 의미한다. 단어나 문장 각각을 벡테로 변환해 벡터공간 vector space으로 ‘끼워 넣는다embed 는 의미에서 임베딩이라고 지었다. 단어-문서 행렬 Term-Document Matrix 구분 메밀꽃 필 무렵 운수좋은 날 사랑 손님과 어머니 삼포 가는길 기차 0 2 10 7 막걸리 0 1 0 0 선술집 0 1 0 0 위 와 같은 빈도표를 단어-문서 행렬이라고 부른다.row는 단어, column은 문서(작품)에 대응한다.운수좋은 날의 문서의 임베딩은 [2,1,1]이다. 막걸리라는 단어의 임베딩은 [0,1,0,0] 이다.표를 보면 ‘사랑 손님과 어머니’, ‘삼포 가는 길’이 사용하는 단어 목록이 상대적으로 많이 겹침을 알 수 있다.일르 바탕으로 ‘사랑 손님과 어머니’는 ‘’삼포 가는 길’과 ‘기차’라는 소재를 공유한다는 점에서 비슷한 작품임을 추정할 수 있다.","link":"/2020/03/29/KoreanEmbedding/%EC%9E%84%EB%B2%A0%EB%94%A9%EC%9D%B4%EB%9E%80/"},{"title":"환경소개","text":"1.4.1 환경소개 Ubuntu 16.04.5 Python 3.5.2 Tensorflow 1.12.0 도커 구성하기본인은 Synology NAS를 사용하고 있으므로 NAS에서 docker 환경을 구성하는 방법을 포스팅하려고 한다.혹 NAS가 없는 경우 책에는 AWS로 하는 방법을 소개했으니 참고하자.도커이미지 123$ uname -a #ubuntu 환경 확인$ pwd #위치 확인$ cd /home #home으로 이동 1234root@docker-NLG:/# apt upgrade root@docker-NLG:/# apt update root@docker-NLG:/# apt install python3.5.2root@docker-NLG:/# apt install python3-pip pip3 라고 command에 쳤을 때 뭐라뭐라 길게 나오면 성공!더 정확하게 확인하려면 12root@docker-NLG:/# pip3 --version pip 9.0.1 from /usr/lib/python3/dist-packages (python 3.6) 123root@docker-NLG:/# pip3 install --upgrade piproot@docker-NLG:/# pip --version pip 20.0.2 from /usr/local/lib/python3.6/dist-packages/pip (python 3.6) 도커 다운을 위한 패키지 설치안된다면 앞에 sudo를 붙여보시길.. 1234apt install apt-transport-https apt install ca-certificatesapt install curl apt install software-properties-common apt-transport-https : 패키지 관리자가 https를 통해 데이터 및 패키지에 접근할 수 있도록 한다.ca-certificates : ca-certificate는 certificate authority에서 발행되는 디지털 서명. SSL 인증서의 PEM 파일이 포함되어 있어 SSL 기반 앱이 SSroot@docker-NLG:/# pip3 –version L 연결이 되어있는지 확인할 수 있다.curl : 특정 웹사이트에서 데이터를 다운로드 받을 때 사용software-properties-common : *PPA를 추가하거나 제거할 때 사용한다. curl 명령어로 도커 다운받기 &amp;&amp; repository에 경로 추가하기1234root@docker-NLG:/# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - OK root@docker-NLG:/# add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot; curl 명령어의 옵션 f : HTTP 요청 헤더의 contentType을 multipart/form-data로 보낸다.s : 진행 과정이나 에러 정보를 보여주지 않는다.(–silent)S : SSL 인증과 관련있다고 들었는데, 정확히 아시는 분 있다면 댓글 부탁!L : 서버에서 301, 302 응답이 오면 redirection URL로 따라간다.apt-key : apt가 패키지를 인증할 때 사용하는 키 리스트를 관리한다. 이 키를 사용해 인증된 패키지는 신뢰할 수 있는 것으로 간주한다. add 명령어는 키 리스트에 새로운 키를 추가하겠다는 의미이다. add-apt-repository : PPA 저장소를 추가해준다. apt 리스트에 패키지를 다운로드 받을 수 있는 경로가 추가된다. docker 패키지가 검색되는지 확인1234root@docker-NLG:/# apt-get update root@docker-NLG:/# apt-cache search docker-ce docker-ce-cli - Docker CLI: the open-source application container engine docker-ce - Docker: the open-source application container engine apt update : 저장소의 패키지 갱신 도커 설치하기 &amp;&amp; ubuntu를 도커그룹으로 입력123root@docker-NLG:/# apt-get install docker-ceroot@docker-NLG:/# usermod -aG docker $USER Usage: usermod [options] LOGIN nvidia-docker 설치위의 단계까지 끝내면 일반적인 도커 기능들을 이용하실 수 있습니다. 하지만 NVIDIA의 GPU를 이용하시면서 여러 환경의 CUDA Tookit을 이용하실 경우 nvidia-docker라는 확장 기능을 추가하시면 보다 편리하게 사용하실 수 있습니다. nvidia-docker를 설치하고자 하실 경우 호스트 운영체제에 먼저 NVIDIA 드라이버가 설치되어 있어야 합니다. NVIDIA의 그래픽카드 또는 GPU를 사용하지 않는 경우 이 과정을 진행하고 도커 설치과정을 끝내실 수 있습니다. 우분투에서 NVIDIA 드라이버 설치 방법12345678910root@docker-NLG:/# curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey|apt-key add - OKroot@docker-NLG:/# distribution=$(. /etc/os-release;echo $ID$VERSION_ID) root@docker-NLG:/# curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list|tee /etc/apt/sources.list.d/nvidia-docker.list deb https://nvidia.github.io/libnvidia-container/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-container-runtime/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-docker/ubuntu18.04/$(ARCH) /root@docker-NLG:/# apt-get update nvidia-docker 실행우분투에서 nvidia-driver받기 1234root@docker-NLG:/# apt-get install -y nvidia-container-toolkitroot@docker-NLG:/# apt-get install systemdroot@docker-NLG:/# systemctl restart dockerroot@docker-NLG:/# docker run --gpus all nvidia/cuda:9.0-base nvidia-smi 도커실행하기1root@docker-NLG:/home# git clone https://github.com.rastgo/embedding 참고 링크 오픈소스링크TensorFlow : https://www.tensorflow.orgGensim : https://radimrehurek.com/gensimFastText : https://fasttext.ccGloVe : https://nlp.stanford.edu/projects/gloveSwivel : https://github.com/tensorflow/models/tree/master/research/swivelELMo : https://allennlp.org/elmoBERT : https://github.com/google-research/bertScikit-Learn : https://scikit-learn.orgKoNLPy : http://konlpy.org/en/latest/Mecab : http://eunjeon.blogspot.com/soynlp : https://github.com/lovit/soynlpKhaiii : https://github.com/kakao/khaiii https://tech.kakao.com/2018/12/13/khaiii/Bokeh : https://docs.bokeh.org/sentencepiece : https://github.com/google/sentencepiece","link":"/2020/03/30/KoreanEmbedding/%ED%99%98%EA%B2%BD%EC%86%8C%EA%B0%9C/"},{"title":"자연어계산과이해","text":"2.1 자연어 계산과 이해컴퓨터는 자연어를 사람처럼 이해할 수 없다. 그러나 임베딩을 활용하면 컴퓨터가 자연어를 계산하는 것이 가능해진다. 임베딩은 자연어를 컴퓨터가 처리할 수 있는 숫자들의 나열인 벡터로 바꾼 결과이기 때문이다. 컴퓨터는 임베딩을 계산/처리해 사람이 알아들을 수 있는 형태의 자연어로 출력한다. 자연어의 통계적 패턴 ** statistical pattern** 정보를 통째로 임베딩에 넣는다.임베딩을 만들 때 쓰는 통계 정보는 3가지가 있다. 문장에 어떤 단어가 많이 쓰였는지 단어가 어떤 순서로 등장하는지 문장에 어떤 단어가 같이 나타났는지 구분 백오프워즈 가정 언어 모델 분포가정 내용 어떤 단어가 많이 쓰였는가 단어가 어떤 순으로 쓰였는가 어떤 단어가 같이 쓰였는가 대표 통계량 TF-IDF - PMI 대표 모델 Deep Averaging Network ELMo, GPT Word2Vec 언어 모델에서는 단어의 등장 순서를, 분포 가정에서는 이웃 단어를 우선시한다. 어떤 단어가 문장에서 주로 나타나는 순서는 해당 단어의 주변 문맥과 뗄래야 뗄 수 없는 관계를 가진다.한편, 분포 가정에서는 어떤 쌍이 얼마나 자주 나타나는지와 관련한 정보를 수치화하기 위해 개별 단어 그리고 단어 쌍의 빈도 정보를 적극 활용한다. 백오브워즈 가정, 언어 모델, 분포 가정은 말뭉치의 통계적 패턴을 서로 다른 각도에서 분석하는 것이며 상호 보완적이다.","link":"/2020/03/31/KoreanEmbedding/%EC%9E%90%EC%97%B0%EC%96%B4%EA%B3%84%EC%82%B0%EA%B3%BC%EC%9D%B4%ED%95%B4/"},{"title":"Background of NLP","text":"Basic Concept of Machine Learning 예를 들어 호랑이와 고양이를 예측하는 인공지능을 만들고 싶다라고 한다면 모델입장에서는 두가지가 필요하다 호랑이이미지 = 호랑이레이블 고양이이미지 = 고양이레이블 이렇게 레이블 정보(With Labels)를 활용해서 학습하는 것을 Supervised Learning 지도학습 이라고 한다 반면, 레이블 정보 없이(No Labels) 이미지만을 활용해서 하는 것을 Unsupervised Learning 비지도학습 이라고 한다 레이블정보가 아니라 입력이미지에 대해서 잘 분류하였으면 +1점, 잘 분류하지 못했으면 -1점 처럼 리워드를 주는 방식(With Rewards)을 Reinforcement Learning 강화학습 이라고 한다 Machine Learning Supervised Learning Regression : 수치형, 회기, 아파트가격/주가예측 Classification : 카테고리컬 variable, 클래스로 예측하는 것, 분류, 남성/여성, 양성/음성 Unsupervise Learning Clustering : 레이블이 없는 입력이미지를 바탕으로 학습할 때 유사하다고 계산이 되는 것을 군집화 하는 것 Dimensionality Reduction : 데이터가 엄청나게 큰 벡터로 표현될 때 적은차원의 벡터로 표현 하는 것, 차원축소의 기법 Reinforcement Learning Decision Process : 의사결정 Game Ai : 게임 ai Process of Machine Learning데이터 수집 -&gt; 해당 데이터를 전처리(해당 모델에 대해서 잘 이용할 수 있게 작업) -&gt; 모델링 -&gt; 학습한 모델의 성능을 평가 Data Collection Database Server API Preprocessing Not Available : 정형데이터의 경우 변수에 없는 값이 발생할 수 있다 Scaling : 변수 간의 정보 반영이 단위 값에 따라 다를 수 있다 ex) 사람의 키는 cm 몸무게는 kg 인데 남자/여자 판별할 때 영향력이 1cm와 1kg은 다르다 Derived Variables : 파생변수(각 변수를 조합)를 만든다 Modeling ML Model DL Model RL Model Performance Measure Accuracy : 얼마나 잘 분류했는지 Mean Squared Error : 얼마나 잘 예측했는지 오차 계산 Similarity : 얼마나 유사한지 Role of Train, Valid, Test Dataset잘 활용하기 위해서는 3가지의 Dataset이 필요하다 Train 학습을 하는데 이용한다 학습이 완료되고 예측을 해본다 Using for Training Model Valid 학습을 하지 않고 예측만 진행한다 만약 예측시 valid보다 train이 좋지 않으면 다시 학습한다 모니터링의 역할만 한다 Using for Training Direction Test 모델이 한 번도 보지 못한 것을 평가 Using for Measure Performance 10000의 dataset이 있을 경우 train : 6000, valid : 2000, test : 2000 으로 한다 8 : 1 : 1 도 한다 Process of NLP with Deep Learning자연어처리 딥러닝을 이해하자 Data Collection Crawling : html에서 데이터를 직접 가져오기 ex) 영화평을 크롤링해서 분석 Preprocessing Tokenizer Make Corpus Representation Modeling ML Model DL Model RL Model Performance Measure Accuracy Mean Squared Error Similarity Make Corpus with Train Dataset Make Number to Input Natural Language into Computer자연어를 숫자 값으로 변경하기 Make Token to Make a Dictionary토큰을 만들기 ‘I am a boy’ -&gt; ‘I’, ‘am’, ‘a’, ‘boy’ 띄어쓰기를 바탕으로 단어 분리 ‘I am a girl’ -&gt; ‘I’, ‘am’, ‘a’, girl’ 각 단어는 토큰을 의미 Make a Dictionary out of the Tokens in the Train Dataset트레인 데이터셋 안에 있는 토큰으로만 단어사전을 만든다 Replace Words with Numbers using a Dictionary숫자를 붙여주기 ‘I’ : 0, ‘am’ : 1, ‘a’ : 2, ‘boy’ : 3, ‘girl’ : 4 ‘I am a boy’ -&gt; [0,1,2,3] ‘I am a girl’ -&gt; [0,1,2,4] 겹치지 않는다 Representation Vector ‘boy’ : 3 , ‘girl’ : 4 boy and girl have similar roles in sentence남자와 여자는 문장에서 비슷한 역할을 수행할 것이다 But 3,4 can’t represent their role enough하지만 3,4만으로는 비슷하다는 것을 나타낼 수 없다 Represent Natural Language with Vectors not scalars원-핫벡터도 어떠한 인덱스만 1이기 때문에 스칼라로 보자다양한 숫자로 채워진 벡터로 만들어보자 Word2Vec, Glove, FastTest(Word) Sentence, Document, Sentence Piece단어 뿐만아니라 문장, 문서 등으로 토큰을 만들 수 있다","link":"/2020/04/25/NLP-BASIC/BackgroundofNLP/"},{"title":"Recurrent Neural Network","text":"Deep Learning Neural Network with Many Hidden Layers Learning through Back-Propagation from Objective Function (Loss Function) 인간의 뇌와 흡사 Type of RNN 빨간색은 input초록색은 hidden state파란색은 output 해석하는 형태도 존재이어져서 뭔가를 한다고 이해하자 Vanilla RNN xt와 ht-1을 같이 받는다Wh는 가중치행렬 Need to Refine Long Term Dependency문장길이가 토큰기준 3개정도인데만약 길이가 길게 되면 최종적 output값에 대해 발생하는 그레디언트 값이 앞쪽까지 전달되는데 문제가 있다. LSTM (Long Short Term Memory) 12개의 term이 학습이 된다Cell state가 있다xt는 현재시점t-1은 이전시점ft는 현재시점에 대한 input과 이전시점에대한 ht-1에 각각 가중치행렬을 곱해주고 b를 더함 이것을 시그모드취해준다.tanh는 -1 ~ 1 까지임 -&gt; 현재 위치에서 어느정도 정보를 반영할지에 대한 결과 forget gate : 현재시점 입력값과 이전시점의 hidden state의 결과에 시그모이드를 취한 값을 이용해서 몇퍼센트 기억할건지 하는 역할 input gate : 현재시점 입력값과 이전시점의 hidden state를 tanh를 해서 원소 곱 그리고 forget에서 나온 값과 더한다 -&gt; cell state 업데이트를 함 output gate : 업데이트한 cell state를 정보를 바탕으로 output을 통과한 결과에 cell state를 tanh를 해주고 원소 곱 -&gt; ht 와 yt로 내보내줌 GRU(Gated recurrent unit) lstm의 많은 학습을 9개로 줄인 것","link":"/2020/04/25/NLP-BASIC/RecurrentNeuralNetwork/"},{"title":"Machine Translation","text":"Neural Machine Translation 기계번역 Sequence to Sequence Encoder Decoder From English to Korean From German to Korean Speech to Text Text to Speech Process Sequence to Sequence인코더와 디코더의 구조. 인코더는 이용하고자 하는 대상 즉 소스. 한글에서 영어로 번역하는 태스크 일때, 인코더는 한글데이터 디코더는 영어데이터. 한글문장을 바꾸어보자.한글 형태소 토크나이저를 이용해 나누기. 그게 x1, x2, x3 … xj가 된다. 그다음 corpus(단어사전)를 만든다. 해당단어를 인덱스로 바꾸어준다. x1은 넘버링이 들어가고 넘버링을 원-핫 벡터로 치환해서 들어간다. 파란색이 임베딩 벡터를 가져옴 RNN input으로 들어감 그전에 weight 매트릭스를 곱하고 바이어스가 더해진 값이 들어간다.Encoder의 output 값이 Decoder의 input 값이 된다.SOS는 Start of SentenceEOS는 End of Sentencey1는 영어딕셔너리에서 뽑힌 값이다.y1은 softmax를 통해서 가장 큰 값을 뽑아준다. with Attentionhidden state만으로 y2가 부족하다고 판단할 수 있다. Encoder의 hidden state 값과 y2의 hidden state 값을 전부 내적한다. 어떤 스칼라의 값을 Attention Weight를 계산한다. 전부 0~1사이의 값으로 각각 바뀐다. 총 합이 1이 된다. 그리고 context vector로 만들어준다. 각 hidden state 별로 얼마나 가중있게 보아야하는지 척도를 알 수 있다. Transformer Attention is all you need(Ashishi Vaswani et al, 2017) 기존에는 RNN구조를 이용해서 Seq2Seq을 풀어냈다면 이 논문에서는 Attention 매커니즘만 이용하겠다. 훨씬 더 기계번역이 좋다. Using Only Attention Mechanism for Seq2Seq Basic concept of BERT","link":"/2020/04/26/NLP-BASIC/Machine_Translation/"},{"title":"Vector for NLP","text":"라이브러리 소개Representation VectorBackground원-핫 인코딩을 표현한 벡터, 트레인 데이터 셋 안에 전체 문장들의 합을 코퍼스라고 했을 때, 코퍼스 안에서 어떤 토크나이저를 거쳐서 딕셔너리를 만든다 -&gt; v가 된다 Make several tokens from sentences Build a Dictionary of words by indexing each token Make a Vector(Dimension : Number of Words) 1 for the corresponding index with the remaining 0 Orthogonal Vector -&gt; Lose of Context InformationRome Paris는 역할이 비슷하지만 표현할 수 없다 Sparse Vector -&gt; Curse of Dimensionality벡터를 내적했을 때 값이 크면 유사도가 높지만 원-핫 인코딩 벡터는 1개 빼고 0 이 된다 두 가지 이유로 적합하지 않음 -&gt; 토크나이저를 쓰자 TokenizerEnglish -&gt; SPACY, NLTK한국어는 형태소라는 것이 있기 때문에 띄어쓰기로는 애매할 수 있다.이러한 것을 보완해서 한국어토큰이 별도 있다.Korean -&gt; KoNLPy(Hannanum, Kkma, Komoran, Twitter), MECAB, KHAIII 한국어의 사전에 따라 모델의 성능이 다르기 때문에 중요하다. 넘버링이 되어 있는 단어를 어떻게 표현할 것인지 알아보자 Word2Vec Efficient Estimation of Word Representations in Vector Space(Tomas Mikolov et al, 2013) CBOW 방식 w(t-2) ~ w(t+2)바탕으로 w(t)를 유추할 수 있도록 한다. 주변 단어들을 이용해서 중심단어를 학습한다. w(t-2) : The w(t-1) : quick w(t) : brown -&gt; output w(t+1) : fox w(t+2) : jumps w(t-2)가 들어갔을 때 brown이 나올 수 있도록 학습하는 것. 중심단어를 이용해서 주변 단어를 학습한다. 네모를 window라고 하고 중심단어로부터 주변단어까지의 사이즈를 window size라고한다 Skip-gram 방식 w(t)를 바탕으로 w(t-2) ~ w(t+2)를 유추할 수 있도록 한다. Objective Function : Learn to reflect similarity between two vectors The의 경우 빈도수가 높아서 과적합이 일어날 수 있다. -&gt; Subsampling to get : Regularize 전체 단어에 대한 대상으로 softmax를 계산하는 것이 아닌 window size 안에 있는 단어와 밖에 있는 단어는 샘플링하여 해당되는 내용을 바탕으로 softmax 계산을 한다. -&gt; Negative Sampling to get Speed Up Glove Global Vectors for Word Representation (Jeffrey Pennington et al, 2014)co-occurrence 개념을 제시window 밖에 있는 단어는 학습이 진행되지 않는 단점을 지적했다. Objective Function : Learn to reflect co-occurrence between two vectors가정 : 한 문장안에 동시 출연된 단어는 연관성이 있을 것이다. 연관성이 높으면 값이 높을 것이다 FastText Bag of Tricks for Efficient Text Classification (Armand Joulin et al, 2016) Objective Function : Learn to reflect similarity between two vectors코퍼스를 형성하는 단어를 적게두자.UnigramsBigramsTrigrams4-grams","link":"/2020/04/25/NLP-BASIC/VectorforNLP/"},{"title":"소프트스킬(1)","text":"다른 이들과 달리 멋지게 시작하기 사업가처럼 생각하기 나는 어떤 제품이나 서비스를 팔 생각인가? 서비스 개선 방법을 고민하기 고정관념에서 벗어나 사업가처럼 사고하자 목표를 설정하고 미래에 대비하기 성취할 목표를 설정하기 목표를 정확히 이해하기 크거나 구체적인것 보다 방향을 제시해야한다 목표를 주기적으로 살피자 시간을 내서 큰 목표를 최소 하나 이상을 기록하기 큰 목표를 월간, 주간, 일간으로 작은 목표로 나누기 큰 목표를 매일 생각할 수 있도록 잘 보이는 장소에 두기 면접의 달인이 되기 고정관념에서 벗어나 인맥 쌓기 개발자들의 블로그를 찾아 친부 쌓기 기술 수준을 꾸준히 발전시키기 전문성을 갖추기 전문성으로 많은 기회의 문이 열린다 전문성이 높아질수록 잠재적 기회가 줄어드는 반면 기회를 잡을 확률은 점점 높아진다 전문분야는 다음과 같다 - 웹 개발 기술 - 임베디드 시스템 - 특정 운영체제 - 모바일 개발 - 프레임워크 - 소프트웨어 시스템 승진하기 존재감 있게 일하기 주간 보고서를 작성하기 자신의 활동을 매일 기록하기 어떤 문제든 해결책을 제시할 수 있는 사람이 되기 해결책을 실행할 수 있는 사람이 되기 전문가되기 사고방식 전환하기 약속을 지키고 맡은 일을 완수하고 포기하지 않기 맡은 일과 경력을 진지하게 생각하기 좋은 습관 기르기 - 시간 관리 기술 자기 계발하기 첫 제품 만들기 문제 해결을 염두하고 제품을 제작하기 How to Market Yourself as a Software Developer 에릭리스 - 린스타트업 이루고 싶은게 있다면 이미 이룬 것처럼 연기하라이력서쓰기 온라인 이력서 만들기 개성을 더하기 행동과 결과를 연결하기 교정하기","link":"/2020/04/16/books/%EC%86%8C%ED%94%84%ED%8A%B8%EC%8A%A4%ED%82%AC_1/"},{"title":"논문읽는 방법","text":"논문의 구조 논문은 표현의 간결성(conciseness)과 명료성(clarity)이 매우 중요 ​ -영어 논문의 구조 나는 이런 문제를 풀거야 (abstract) 사실 이 문제는 이런 동기에서 연구가 시작된건데 (introduction) 관련해서 이런저런 접근들이 있었지 (related works) 난 이런 새로운 방식으로 접근해보려고 하는데 (method) 정말 이게 잘 먹히는지 실험도 해봤어 (experiment) 이를 통해 이런 사실도 알아냈지만 한계점도 있지 (discussion) 마지막으로 귀찮은 너를 위해 요약 (conclusion) 논문의 핵심은 ‘내가 주어진 문제에서 이러한 기여(contribution)를 했다’ ​ 논문 고르기 구글스칼라 이용 관심있는 키워드를 넣고 논문을 검색 그 분야의 개략적인 연구들을 훑어보려면 관련 키워드와 함께 ‘review’, ‘survey’, ‘tutorial’ 등을 넣고 검색 이들은 특정 문제를 푸는 일반 논문들과 달리, 관련 연구들을 종합하거나 (review), 조사하거나 (survey), 쉽게 설명하고 있다. (tutorial) Abstract 초록읽기 하이라이트 같은 거 개요 -&gt; In this paper -&gt; 방법 -&gt; 결과 순으로 적힘 이 논문이 ‘무슨 문제’를 풀려고 했고, ‘어떠한 새로운 기여’를 담고 있는지 파악 ​ Conclusion 결론 읽기 내가 제대로 이해했는지 확인하기 위해 결론 먼저 읽음 논문이 무슨 문제를 풀려했고, 어떠한 기여를 했는지 아는게 중요 ​ Instroduction 서론 읽기 본론은 지엽적인 문제해결만을 다룸 서론에서는 주요 연구들을 한줄 요약들과 함께 친절히 소개해줌 소개되는 논문들은 꼭 읽어야하는 논문 위주 (1) 내가 어떤 문제를 풀고 있는지 (2) 관련 연구들은 이 문제를 어떻게 풀어왔는지 (3) 마지막으로 나는 그들과 달리 어떤 입장에서 문제를 해결했는지 ​ 표/그림 보기영어 독해를 쉽게하는 방법 중 하나는 ‘앞에 나올 내용을 예상하며 읽는 것’이다. 이제까지 초록, 결론, 서론을 읽었던 것은 모두 본론에 어떤 내용이 나올지 잘 예측할 수 있기 위해서였다. 여기에 또 한가지 본문 이해에 도움을 주는 소재가 있다면 바로 표와 그림들 ​ Methods &amp; Experiments 이전까지는 무엇을 왜 에 대한 내용 방법 및 실험은 어떻게 에 대한 본연구의 자세한 설명 수식의 역할만 이해한다면 디테일은 일단 패스 중요한건 그 수식이 인풋으로 무엇을 받아 아웃풋으로 무엇을 내놓는지 이해하는 것이다. 그리고 왜 이 수식이 필요한지, 없으면 어떤 일이 벌어지는지를 이해하는 것 역시 중요하다. ​ 중요한건 수식이 아니라 ‘내가 뭘 읽고 있는지’와 ‘내가 왜 읽고 있는지’의 능동적 이해 자세이다. 혼미해지는 정신 꽉 부여잡고 이 논문의 핵심스토리에 집중하자. ​ 출처 http://gradschoolstory.net/terry/readingpapers/ 영어 못해도 논문 잘 읽는 법‘그 발번역 정말 못읽겠더라. 차라리 원서 읽어.’ ‘맞아맞아~ 어떻게 한글이 영어보다 어렵니? 원서가 훨씬 쉬운 듯’ 대학생 초년 시절, 영어가 너무 벅찬던 내가 운좋게 번역본이라도 구해 들고 있을지면 친구들은 항상 내게 이런 말을 건냈다. 번역본이 훨씬 어렵지 않냐면서 말이다. ‘당연하지&amp;#82… gradschoolstory.net ​","link":"/2020/04/01/Paper/How_to_read_Paper/"},{"title":"클래스란 무엇인가","text":"Class가 무엇인가?# 자동차 1 car_brand1 = &quot;Kia&quot; car_color1 = &quot;Red&quot; car_year1 = 1996 # 자동차 2 car_brand2 = &quot;Hyundai&quot; car_color3 = &quot;Blue&quot; car_year3 = 2009 # 자동차 3 car_brand3 = &quot;BMW&quot; car_color3 = &quot;Black&quot; car_year3 = 2000브랜드, 색상, 제작년도가 있는 코드 만약 100대, 1000대 이상이 되면 일일이 쓰면 비효율적!→ 클래스를 사용하자 class Car: def __init__(self, brand, color, year): self.brand = brand self.color = color self.year = year car1 = Car(&quot;Kia&quot;, &quot;Red&quot;, 1996) car2 = Car(&quot;Hyundai&quot;, &quot;Blue&quot;, 2006) car3 = Car(&quot;BMW&quot;, &quot;Black&quot;, 2000)Car 는 자동차 클래스car1, car2, car3 객체는 Car 클래스의 ‘인스턴스’ ==클래스 : 비슷한 속성을 가진 객체를 묶는 큰 틀== 클래스 변수class Car: honk = &quot;빵빵&quot; print honk # NameError: name &apos;honk&apos; is not definedhonk이라는 변수는 외부에서 호출이 안된다 클래스 안에 있는 변수는 ‘해당 클래스의 인스턴트’를 통해서 호출 my_car = Car() my_car.honk # &apos;빵빵&apos; Car().honk self는 뭔가요?클래스 메소드의 첫 번째 인수로 self를 써 줘야지해당 메소드를 인스턴스의 메소드로 사용 가능쉽게 : 이 메소드를 부르는 객체가 해당 클래스의 인스턴스 인지 확인하려고 class Car: honk = &quot;빵빵&quot; def set_info(self, color, year): self.color = color self.year = year def get_info(self): print(&quot;color : %s , year: %d&quot; %(self.color, self.year)) my_car1 = Car() my_car1.set_info(&quot;Red&quot;, 2017) my_car1.get_info() #=&gt; color : Red ,year: 2017 init 이란?class Car: honk = &quot;빵빵&quot; def set_info(self, color, year): self.color = color self.year = year def get_info(self): print &quot;color : %s ,year: %d&quot; % (self.color, self.year) my_car = Car() my_car.set_info(&quot;Red&quot;, 2017) my_car.get_info() #=&gt; color:Red, year:2017 new_car = Car()0 new_car.get_info() # AttributeError: Car instance has no attribute &apos;color&apos;오류발생! set_info()를 안하고 get_info()를 먼저 불렀다…클래스의 인스턴트를 생성할 때, 오류를 줄이고 싶다! init 을 사용하자초기화 메소드, 생성자라고 불림인스턴스 = 클래스(변수1,변수2..) class Car: honk = &quot;빵빵&quot; def __init__(self, color, year): self.color = color self.year = year print &quot;새로운 Car 인스턴스가 생성되었습니다.&quot; def get_info(self): print &quot;color : %s ,year: %d&quot; % (self.color, self.year) my_car = Car(&quot;Red&quot;, 2017) # 새로운 Car 인스턴스가 생성되었습니다. my_Car.get_info() # color : Red, year: 2017새로운 인스턴스를 만들고 난 후 “새로운 Car 인스턴스가 생성되었습니다” 출력 즉 , init 메소드가 호출 되었다. 클래스 상속? 상속 : 물려받는다? 유산을 상속하다 부모의 클래스가 존재하고 그 부모 클래스를 ‘상속’받은 자식 클래스를 만들 수 있다.자식클래스는 부모가 가진 메소드나 변수를 물려받아 그대로 사용 가능! class Person: def __init__(self, name, age): self.name = name self.age = age def info(self): print(&quot;이름: %s, 나이: %d&quot; %(self.name, self.age)) class Employee(Person): pass em = Employee(&quot;goorm&quot;,20) em.info() #=&gt; 이름: goorm, 나이: 20Person 클래스는 init 메소드를 통해 이름, 나이를 초기값으로 받는다 info메소드를 통해 이름과 나이를 출력 Employee클래스를 보면 Person을 상속받았다 그래서 info를 동일하게 쓸 수 있다. 만약 메소드를 변형한다면?메소드 오버라이딩이라고 부른다 class Person: def __init__(self, name, age): self.name =name self.age = age def info(self): print &quot;나는 부모 클래스 입니다.&quot; class Employee(Person): def info(self): print &quot;나는 자식 클래스 입니다.&quot; per = Person(&quot;Python&quot;, 100) per.info() #=&gt; &quot;나는 부모 클래스 입니다.&quot; em = Employee(&quot;goorm&quot;,20) em.info() #=&gt; &quot;나는 자식 클래스 입니다.&quot;원래는 “나는 부모 클래스 입니다” 이지만 Person을 상속받아 자식클래스, 즉, Employee에서 메소드를 변형, 즉, 오버라이딩했다 따라서 “나는 자식 클래스 입니다”가 출력 예시를 하나 만들어보자123class 클래스명(상속클래스): def __init__(self, 매개변수): 인스턴스 속성 123456class Klass(object): def __init__(self, name): self.name = name def getName(self): return self.name __init__은 객체 생성 후 초기화 함수이다.객체가 생성될 때 내부의 이름공간에 속성을 할당하여 초기화 역할만 한다. 이제 객체를 생성해 보자 1k = Klass(\"객체 생성\") 이름을 조회해 보자 1k.name 1결과 '객체 생성' k.name 과 k.getName()은 동일하다 Python의 가장 큰 특징이다. 굳이 getName을 사용하지 않아도 name로만 조회가 가능하다. 객체와 인스턴스의 관계클래스는 객체를 만드는 도구이다.클래스로 객체를 생성하고,객체를 사용해서 특정기능을 처리할 수 있다. 여러개의 객체를 생성해 보자 123k1 = Klass(\"객체 생성1\")k2 = Klass(\"객체 생성2\")k3 = Klass(\"객체 생성3\") 생성관계isinstance : 클래스와 객체의 생성관계를 확인하는 내장함수 1isinstance(k, Klass) 1결과 : True 1isinstance(k1, Klass) 1결과 : True 즉 k와 k1의 Klass를 통해서 생성된 것이다. 함수와 메소드 구분하기함수들은 객체가 생성된 다음에 호출하기 때문에 메소드라고한다.예를 들면 getName()을 쓰려면 Klass에서 만든 인스턴스를 이용해서 호출할 때 사용하는 것이다. 클래스에 어떤 메소드가 있는지 확인해보자 1Klass.__dict__ 1k.__init__ 객체를 호출할 때는 함수가 아니라 메소드로 처리함을 알 수 있다.self에서는 객체에서 자동으로 전달되고 두 번째 인자에만 해당하는 값을 문자열로 전달하면 된다. 12k.__init__(\"메소드로 갱신\")k.name 1결과 : '메소드로 갱신'","link":"/2020/04/01/Python/%ED%81%B4%EB%9E%98%EC%8A%A4%EB%9E%80%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/"},{"title":"Sequence_Tagging","text":"Tagging Make Label about the sentences 레이블을 붙이는 과정 This moive is so nice -&gt; Positive This moive is so boring -&gt; Negative Pair of Sentence and Label 문장과 레이블에 대해 쌍관계를 유지하는걸 태깅 It can use other Machine Learning Model’s Input Data 이것을 바탕으로 데이터를 input할 수 수 있음 Sentiment Analysis 감성분석데이터 어떤 문장에 대해서 긍정/부정, 평점등으로 평가하는데 이걸 예측하는 것 Benchmark Dataset 논문에서 많이 이용됨 IMDB (Internet Moive DataBase) Yelp (음식점평) Amazon Review (도서평) Crawling 네이버 영화 평 yes24 도서 평 Question Answering특정한 문단과 질문을 넣었을 때 딥러닝 모델이 답변을 주는 것 Benchmark Dataset SQuAD.(1.1,2.0) 스탠퍼드 QnA WikiQA CoQA POS Part-of-Speech Tagging 문장에서 해당 단어들이 어떤 역할을 하는지 주어, 목적어, 서술어 등 Benchmark Dataset Penn Treebank UD Process 빨간색 Input파란색 Output초록색 RNN, LSTM, GRU숫자는 시점 빨간색에 문장을 넣으면파란색에는 Postive RNN hideen state를 바탕으로 태깅 기본 RNN Stack RNN Hidden state 결과를 새로운 input으로 받음 Bidirectional RNN forward backward 같은 시점에는 Concat 진행 CNN Convolutional Neural Networks for Sentence Classification(Yoon Kim et al, 2014) 문장에 대해서 filter size(2,3,4,5)에 대해 합성곱을 하여 진행 스트라이딩을 돌면서 feature maps을 만듬 같은 레벨의 feature map에 max pooling을 진행 문장특징을 뽑음 해당 결과값에 대해 Fully connected layer를 통해 최종 결과를 낸다","link":"/2020/04/26/NLP-BASIC/Sequence_Tagging/"},{"title":"SW개발 보안 구현 - API 오용","text":"소프트웨어 개발 보안 구축SW개발 보안 구현API 오용 개념 소프트웨어 구현단계에서 API를 잘못 사용하거나 보안에 취약한 API를 사용하지 않도록 하기 위한 보안 검증 항목들 API 오용의 보안 약점 DNS lookup에 의존한 보안 결정 취약한 API 사용 API 프로그래머가 라이브러리가 제공하는 여러 함수를 이용하여 프로그램을 작성할 때 해당 함수의 내부 구조는 알 필요없이 단순히 API에 정의된 입력 값을 주고 결과 값을 사용 보안 약점의 종류1. DNS lookup에 의존한 보안 결정 도메인명에 의존하여 인증이나 접근 통제 등의 보안 결정을 내리는 경우 발생하는 보안 약점 DNS 엔트리를 속여 동일한 도메인에 속한 서버인 것처럼 위장하거나, 사용자와 서버 간의 네트워크 트래픽을 유도하여 악성 사이트를 경유하도록 조작할 수 있음 DNS 검색을 통해 도메인 이름으로 비교하지 않고 IP주소를 직접 입력하여 접근함으로써 방지 2. 취약한 API 사용 보안 문제로 사용이 금지된 API를 사용하거나, 잘못된 방식으로 API를 사용했을 때 발생하는 보안 약점 보안 상 안전한 API라고 하더라도 자원에 대한 직접 연결이나 네트워크 소켓을 통한 직접 호출과 같이 보안에 위협을 줄 수 있는 인터페이스를 사용하는 경우 보안 약점이 노출됨 보안 문제로 금지된 함수는 안전한 함수로 대체하고, API 매뉴얼을 참고하여 보안이 보장되는 인터페이스를 사용함으로써 방지 가능","link":"/2020/04/28/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/API%EC%98%A4%EC%9A%A9/"},{"title":"SW개발 보안 구현 - 코드오류","text":"소프트웨어 개발 보안 구축SW개발 보안 구현코드오류의 개념 코드 오류는 소프트웨어 구현 단계에서 개발자들이 코딩 중 실수하기 쉬운 형(Type) 변환, 자원 반환 등의 오류를 예방하기 위한 보안 점검 항목 코드 오류로 발생할 수 있는 보안 약점 Null 포인터 역참조 Null은 값이 없음을 의미하며 포인터는 메모리의 위치를 가리킴. 부적절한 자원 해제 해제된 자원 사용 초기화되지 않은 변수 사용 보안약점종류1. 널 포인터(Null Pointer) 역참조 널포인트가 가리키는 메모리에 어떠한 값을 저장할 때 발생하는 보안 약점 많은 라이브러리 함수들이 오류가 발생할 경우 널 값을 반환하는데, 이 반환값을 포인터로 참조하는 경우 발생 널포인터는 메모리의 첫 주소를 가리키며, 해당 주소를 참조할 경우 소프트웨어가 비정상적으로 종료 됨 공격자는 널 포인터 참조 오류로 발생하는 예외 상황을 악용할 수 있음 널 값을 갖고 있는지 검사함으로써 방지 null이 이미 없는 것이기 때문에 초기화 불가 2. 부적절한 자원 해제 자원을 반환하는 코드를 누락하거나 프로그램 오류로 할당된 자원을 반환하지 못했을 때 발생하는 보안 약점 힙 메모리, 소켓 등의 유일한 시스템 자원이 계속 점유하고 있으면 자원 부족으로 인해 새로운 입력을 처리하지 못함 힙 메모리 소프트웨어가 자유롭게 사용할 수 있는 메모리 공간 소켓 데이터 교환을 위한 통로 자원 반환 코드가 누락되었는지 확인하고, 오류로 인해 함수가 중간에 종료되었을 때 예외처리에 관계없이 자원이 반환되도록 코딩함으로써 방지 3. 해제된 자원 사용 이미 사용이 종료되어 반환된 메모리를 참조하는 경우 발생하는 보안 약점 반환된 메모리를 참조하는 경우 예상하지 못한 값 또는 코드를 수행하게 되어 의도하지 않은 결과 발생 주소를 저장하고 있는 포인터를 초기화함으로써 방지 가능 4. 초기화되지 않은 변수 사용 변수 선언 후 값이 부여되지 않은 변수를 사용할 때 발생하는 보안 약점 변수 선언으로 메모리가 할당되면 해당 메모리 이전에 사용하던 내용이 계속 남아 외부에 노출되는 경우 중요 정보 악용됨 변수 선언시 할당된 메모리를 초기화함으로써 방지 가능","link":"/2020/04/28/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%EC%BD%94%EB%93%9C%EC%98%A4%EB%A5%98/"},{"title":"SW개발 보안 구현 - 핵심정리","text":"소프트웨어 개발 보안 구축SW개발 보안 구현1. 암호 알고리즘 주민번호, 패스워드, 은행계좌 등 중요 정보를 보호하기 위해 평문을 암호문으로 만드는 절차 또는 방법 해시를 사용하는 단방향 암호화 방식과 개인키와 공개키로 분류되는 양방향 암호화 방식으로 구분됨 Stream 방식 평문과 동일한 길이의 스트림을 생성하여 비트단위로 암호화 Block 방식 한 번에 하나의 데이터 블록을 암호화 2. 코드오류 코드 오류는 소프트웨어 구현 단계에서 개발자들이 코딩 중 실수하기 쉬운 형(Type) 변환, 자원 반환 등의 오류를 예방하기 위한 보안 점검 항목 코드 오류로 발생할 수 있는 보안 약점 Null 포인터 역참조 Null은 값이 없음을 의미하며 포인터는 메모리의 위치를 가리킴. 부적절한 자원 해제 해제된 자원 사용 초기화되지 않은 변수 사용 3. 캡슐화 정보 은닉이 필요한 중요한 데이터와 기능을 불충분하게 캡슐화하거나 잘못 사용함으로써 발생할 수 있는 문제를 예방하기 위한 보안 점검 항목들 캡슐화 보안 약점 잘못된 세션에 의한 정보 노출 제거 되지 않고 남은 디버그 코드 시스템 데이터 정보 노출 Public 메소드로부터 반환된 Private 배열 Private 배열에 Public 데이터 할당 4. API 오용 소프트웨어 구현단계에서 API를 잘못 사용하거나 보안에 취약한 API를 사용하지 않도록 하기 위한 보안 검증 항목들 API 오용의 보안 약점 DNS lookup에 의존한 보안 결정 취약한 API 사용","link":"/2020/04/28/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"},{"title":"SW구축관리 - SW개발보안 정책","text":"IT프로젝트정보시스템구축관리SW구축관리SW개발보안 정책의 개념 소프트웨어 개발과정에서발생할수 있는 보안취약점을 최소화하여 보안위협으로 부터 안전한 소프트웨어를 개발하기 위한 일련의 보안활동 SW개발 생명주기SDLC의 각 단계에서 요구되는 보안활동을 수행해 안전한 소프트웨어를 개발하는 것이 목적 SW 보안 취약점이 발생하는 경우 보안 요구사항이 정의되지 않은 경우 소프트웨어 설계 시 논리적 오류가 포함된 경우 기술 취약점을 갖고 있는 코딩 규칙을 적용한 경우 소프트웨어 배치가 적절하지 않은 경우 보안 취약점 발견 시 적절하게 대응하지 못한 경우 SW개발 보완 관련 기관 소프트웨어 개발 보안 관련 활동 주체 정책기관인 행정안전부 발주기관인 행정기관 전문기관인 인터넷진흥원 개발기관인 사업자 보안약점진단인 감리법인 SW개발 역할별 보안활동 프로젝트 관리자 PM 응용프로그램에 대한 보안 전략을 구성원들에게 설명하고 프로젝트 일정 및 보안위험의 상관관계등과 같은 보안 영향을 이해시키고 조직의 상태를 모니터링 요구사항 분석가 RM 아키텍트가 고려해야 할 보안 관련 비지니스 요구사항을 설명하고 프로젝트 팀이 고려해야할 구조에 존재하는 보안 요구사항과 유즈케이스에 대한 보안 고려사항을 기반으로 오용 사례를 정의 아키텍트 Architect 보안 오류가 발생하지 않도록 보안 기술 문제를 충분히 이해하고 시스템 사용되는 모든 리소스 정의 및 각 리소스별로 적절한 보안 요구사항 적용 설계자 Designer 특정 기술이 보안요구사항을 만족하는지 확인하고 애플리케이션 보안노력에 대한 품질 측정을 지원, 많은 비용이 필요한 수정 요구사항을 최소화하기 위한 방법을 제공, 타사의 소프트웨어 통합시 발생가능한 보안 위험을 이해하며 식별된 보안위협에 적절히 대응 구현개발자 Implementer 구조화된 소프트웨어 개발 환경에서 프로그램을 원활히 구현할 수 있도록 시큐어 코딩 표준을 준수하여 개발하며 제3자가 소프트웨어 안전 여부를 쉽게 판단할 수 있도록 문서화 시큐어 코딩 개발하고 있는 소프트웨어의보안상 취약점을 사전에 보완하면서 프로그래밍하는것 테스트분석가 Test Analyst 소프트웨어 개발 요구사항과 구현 결과를 반복적으로 확인하며 테스트 그룹은 반드시 보안전문가일 필요는 없지만보안 위험에 대한 학습이나 툴 사용법을 숙지함 SW개발 역할별 보안활동 보안 감시자 Security Auditor 프로젝트 전체단계에서 활동하며, 소프트웨어 개발 프로젝트의 현재 상태의 보안을 보장하고 요구사항 검토시 요구사항의 적합성과 완전성을 확인하고, 설계단계에서는 보안 문제로 이어질 수 있는 사항이 있는지 확인하며, 구현단계에서는 보안 문제가 있는지 확인 SW개발보안 관련 법령 개인정보보호법 정보통신망 이용촉진 및 정보보호 등에 관한 법률 신용정보의 이용 및 보호에 관한 법률 표준 개인정보 보호 지침 개인정보의 안전성 확보 조치 기준 개인정보 영향평가에 관한 고시 IT기술 관련 규정 RFID 프라이버시 보호 가이드라인 위치정보의 관리적, 기술적 보호조치 권고 해설서 바이오정보 보호 가이드라인 뉴미디어 서비스 개인정보 보호 가이드라인","link":"/2020/04/30/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/SW%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EC%A0%95%EC%B1%85/"},{"title":"SW구축관리 - SW 관련 신기술","text":"IT프로젝트정보시스템구축관리SW구축관리 소프트웨어와 관련된 IT 신기술의 종류와 특징을 이해 소프트웨어 개발 보안의 개념과 보안 관련 기관 및 소프트웨어 개발 프로젝트 참여자별 보안 활동 역할 이해 소프트웨어 개발 보안 활동 관련 법령 및 규정의 종류 이해 용어사전 SW개발보안 정책 소프트웨어 개발 과정에서 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 소프트웨어를 개발하기 위한 일련의 보안활동 SW 관련 신기술1. AI; Artificial Intelligence 인공지능 컴퓨터 스스로 인간의 두뇌와 같이 추론, 학습, 판단 등 인간 지능적인 작업을 수행하는 시스템 인공지능의 응용분야에는 신경망, 퍼지, 패턴 인식, 전문가 시스템, 자연어 인식, 이미지 처리, 컴퓨터 시각, 로봇 공학 등 Fuzzy 퍼지 인간의 말, 의미, 사고, 측정 등에 본질적으로 포함되어 있는 애매 모호함을 수학적으로 다루는 학문 2. AR; Augmented Reality 증강현실 가상현실이 이미지, 주변 배경, 객체 모두를 가상의 이미지로 만들어 보여 주는 반면, 증강 현실은 현실에 기반하여 정보를 추가 제공하는 기술 3. Blockchain 블록체인 과 Distributed Ledgers 분산 장부 P2P 네트워크를 이용하여 온라인 금융 거래 정보를 온라인 네트워크 참여자의 디지털 장빙 분산 저장하는 기술 기존 금융 회사들이 사용하고 있는 중앙 집중형 서버에 거래 정보를 저장할 필요가 없어 관리 비용이 절감되고, 분산 저장으로 인해 해킹이 어려워짐에 따라 보안 및 거래 안정성이 향상됨 4. CC; Common Criteria 공통 평가 기준 ISO 15408 표준으로 채택된 정보 보호 제품 평가기준 정보화 순기능 역할을 보장하기 위해 정보화 제품의 정보보호기능과 이에 대한 사용 환경 등급을 정한 기준 5. CEP; Complex Event Processing 복잡 이벤트 처리 실시간으로 발생하는 많은 사건들 중 의미가 있는 것만을 추출할 수 있도록 사건 발생 조건을 정의하는 데이터 처리 방법 금융, 통신, 전력, 물류, 국방 등에서 대용량 데이터 스트림에 대한 요구에 실시간으로 대응하기 위하여 개발된 기술이며 미들웨어에 접속시키면 기업이 독자적인 실시간 응용 애플리케이션 개발 가능 미들웨어 운영체제와 해당 운영체제에 의해 실행되는 응용 프로그램 사이에서 운영체제가 제공하는 서비스 이외에 추가적인 서비스를 제공하는 소프트웨어 6. Deep Learning 딥 러닝 인간의 두뇌를 모델로 만들어진 인공신경망을 기반으로 하는 기계 학습 기술 많은 데이터를 이용한 컴퓨터가 마치 사람처럼 스스로 학습할 수 있어 특정 업무를 수행할 때 정형화된 데이터를 입력 받지 않고 스스로 필요한 데이터를 수집,분석하여 고속으로 처리 가능 7. Digital Twin 디지털 트윈 현실 속의 사물을 소프트웨어로 가상화한 모델로 자동차, 항공, 에너지, 국방, 헬스케어 등 여러 분야에서 활용 현실 속의 사물을 대신해 다양한 상황을 모의 실험하기 위한 용도 8. Expert System 전문가 시스템 의료 진단 등과 같이 특정 분야의 전문가가 수행하는 고도의 업무를 지원하기 위한 컴퓨터 응용 프로그램 인간의 지적 활동과 경험을 통해서 축적된 전문가의 지식과 전문가에 의해 정의된 추론 규칙을 활용하여 결정하거나 문제르 해결 지식 베이스(Knowledge Base)라는 데이터베이스 + 추론을 실행하는 추론 엔진(Inference Engine) 9. Grayware 그레이웨이 소프트웨어를 제공하는 입장에서는 악의적이지 않은 유용한 소프트웨어라고 주장할 수 있지만 사용자 입장에서는 유용할 수도 있고 악의적일 수도 있는 애드웨어, 스파이웨어, 기타 악성코드나 악성 공유웨어를 뜻함 10. Hash 해시 임의의 길이의 입력 데이터나 메시지를 고정된 길이의 값이나 키로 변환하는 것 데이터의 암호화가 아닌 무결성 검증을 위한 방법으로 대칭, 비대칭 암호화 기법과 함께 사용되어 전자화폐, 전자서명 등 다양한 방면에서 활용되고 있음 11. Mashup 매시업 웹에서 제공하는 정보 및 서비스를 이용하여 새로운 소프트웨어나 서비스, 데이터베이스 등을 만드는 기술 다수의 정보원이 제공하는 콘텐츠를 조합하여 하나의 서비스로 제공하는 웹 사이트 또는 어플리케이션 12. OGSA; Open Grid Service Architecture 오픈 그리드 서비스 아키텍처 애플리케이션 공유를 위한 웹 서비스를 그리드 상에서 제공하기 위해 만든 개방형 표준 13. PET; Privacy Enhancing Technology 개인정보 강화 기술 심각한 위험으로 대두되고 있는 개인정보 침해 위험을 관리하기 위한 핵심 기술 암호화, 익명화 등 개인정보를 보호하는 기술에서 사용자가 직접 개인정보를 통제하기 위한 기술까지 다양한 사용자 프라이버시 보호 기술을 통칭함 14. PIA; Privacy Impact Assessment 개인정보 영향평가 제도 개인정보를 활용하는 새로운 정보시스템의 도입 및 기존 정보시스템의 중요한 변경 시 시스템의 구축/운영이 기업의 고객은 물론 국민의 사생활에 및리 영향에 대해 미리 조사/분석/평가하는 제도 15. QKD; Quantum Key Distribution 양자 암호키 분배 양자 통신을위해 비밀키를 분배/관리하는 기술 양자 물리학에서 상호 작용과 관련된 모든물리적 독립계의 최소단위 16. RIA; Rich Internet Application 리치 인터넷 어플리케이션 플래시 애니메이션 기술과 웹 서버 애플리케이션 기술을 통합하여 기존 HTML보다 역동적이고 인트랙티브한 웹페이지를 제공하는 신개념의 플래시 웹페이지 제작 기술 17. Semantic Web 시맨틱 웹 컴퓨터가 사람을 대신하여 정보를 읽고 이해하고 가공하여 새로운 정보를 만들어 낼 수 있는 ‘의미론적인 웹이라는 의미를 가진 차세대 지능형 웹 18. SOA; Service Oriented Architecture 서비스 지향아키텍처 정보시스템을 공유와 재사용이 가능한 서비스 단위나 컴포넌트 중심으로 구축하는 정보기술 아키텍처 19. Software Escrow 소프트웨어 에스크로 소프트웨어 개발자의지식재산권을 보호하고 사용자는 저렴한비용으로 소프트웨어를 안정적으로 사용 및 유지보수 받을 수 있도록 소스 프로그램과 기술 정보 등을 제3의 기관에 보관하는 것 20. Vaporware 증발품 판매 계획 또는 배포 계획은 발표되었으나 실제로 고객에게 판매되거나 배포되지 않고 있는 소프트웨어","link":"/2020/04/30/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/SW%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/SW%EA%B4%80%EB%A0%A8%EC%8B%A0%EA%B8%B0%EC%88%A0/"},{"title":"SW개발 보안 구현 - 캡슐화","text":"소프트웨어 개발 보안 구축SW개발 보안 구현캡슐화의 보안 점검 정보 은닉이 필요한 중요한 데이터와 기능을 불충분하게 캡슐화하거나 잘못 사용함으로써 발생할 수 있는 문제를 예방하기 위한 보안 점검 항목들 캡슐화 보안 약점 잘못된 세션에 의한 정보 노출 제거 되지 않고 남은 디버그 코드 시스템 데이터 정보 노출 Public 메소드로부터 반환된 Private 배열 Private 배열에 Public 데이터 할당 캡슐화 보안 약점1. 잘못된 세션에 의한 정보 노출 다중 스레드 환경에서 멤버 변수에 정보를 저장할 때 발생하는 보안 약점 싱글톤 패턴에서 발생하는 레이스컨디션으로 인해 동기화 오류가 발생하거나, 멤버 변수의 정보가 노출 될 수 있음 멤버 변수보다 지역 변수를 활용하여 변수의 범위를 제한하여 방지 잘못된 세션에 의한 정보 노출은 SW개발 보안 설계의 세션통제 보안 약점으로도 나오는데, 세션통제는 분석, 설계 단계의 점검 내용이고 캡슐화는 구현단계의 점검내용만 다를 뿐 나머지는 동일 2. 제거되지 않고 남은 디버그 코드 개발 중에 버그 수정이나 결과값 확인을 위해 남겨둔 코드들로 인해 발생하는 보안 약점 디버그 코드에 인증 및 식별 절차를 생략하거나 우회하는 코드가 포함되어 있는 경우 공격자가 악용 가능 배포전에 코드 검사를 통해 남아있는 디버그 코드를 삭제함으로써 방지 가능 3. 시스템 데이터 정보 노출 시스템 내부 정보를 시스템 메시지 등을 통해 외부로 출력하도록 코딩했을 때 발생하는 보안 약점 메시지는 최소한의 정보만을 제공함으로써 방지 가능 4. Public 메소드로부터 반환된 Private 배열5. Private 배열에 Public 데이터 할당","link":"/2020/04/28/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%EC%BA%A1%EC%8A%90%ED%99%94/"},{"title":"SW구축관리 - 핵심정리","text":"IT프로젝트정보시스템구축관리SW구축관리1. IT신기술 및 SW개발 트렌드 정보 인공지능 증강현실 블록체인 딥러닝 전문가 시스템 그레이웨이 매시업 시맨틱 웹 서비스 지향 아키텍처 2. SW개발보안 정책 SW개발 생명주기의 각 단계에서 요구되는 보안활동을 수행해 안전한 소프트웨어를 개발하는 것이 목적 SW개발 보안 관련 기관 행정안전부, 한국인터넷진흥원, 발주기관 사업자, 감리법인 SW개발 역할별 보안활동 프로젝트 관리자 요구사항 분석가 아키텍트 설계자 구현개발자 테스트분석가 보안감시자 SW개발보안 관련 법령 및 규정 개인정보 보호법 정보통신망 이용촉진 및 정보보호 등에 관한 법률","link":"/2020/04/30/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/SW%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"},{"title":"SW개발 보안 구현 - 암호알고리즘","text":"소프트웨어 개발 보안 구축SW개발 보안 구현 암호 알고리즘의 개념과 암호 알고리즘의 종류별 특징을 이해 코드오류와 캡슐화, API 오용 개념과 각 보안 점검 항목별 보약 약점의 종류 및 특징을 이해 용어사전 Hash 해시 임의의 길이의 입력 데이터나 메시지를 고정된 길이의 값이나 키로 변환하는 단방향 암호 알고리즘 암호 알고리즘 개념 주민번호, 패스워드, 은행계좌 등 중요 정보를 보호하기 위해 평문을 암호문으로 만드는 절차 또는 방법 해시를 사용하는 단방향 암호화 방식과 개인키와 공개키로 분류되는 양방향 암호화 방식으로 구분됨 Stream 방식 평문과 동일한 길이의 스트림을 생성하여 비트단위로 암호화 Block 방식 한 번에 하나의 데이터 블록을 암호화 양방향 알고리즘1. 비밀키(개인키, 대칭키) 암호 알고리즘 장/단점 암호화 및 복호화 할 때 사용하는 키가 같음 장점 : 암호화 복호화 속도가 빠르며, 알고리즘이 단순하고, 공개키 암호기법보다 파일의 크기가 작음 단점 : 사용자의 증가에 따라 관리해야할 키의 수가 많음 2. 공개키(비대칭키) 암호 알고리즘 장/단점 암호화할 때 사용하는 키와 복호화 할 때 사용하는 키가 다름 장점 : 키의 분배가 용이하고, 관리해야할 키의 개수가 적음 단점 : 암호화 및 복호화 속도가 느리며, 알고리즘이 복잡하고, 개인키 암호화 기법보다 파일의 크기가 큼 3. 양방향 암호 알고리즘의 종류 단방향 암호 알고리즘 해시 입력 데이터나 메시지를 고정된 길이의 값이나 키로 변환하는 것을 의미 해시 알고리즘을 해시 함수라고 부르며, 해시 함수로 변환된 값이나 키를 해시값 또는 해시키로 부름 데이터의 암호화, 무결성 검증을 위해 사용될 뿐만 아니라 정보보호의 다양한 분야에 활용","link":"/2020/04/27/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%EC%95%94%ED%98%B8%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"title":"네트워크구축관리 - 네트워크 관련 신기술","text":"IT프로젝트정보시스템구축관리네트워크구축관리IT신기술 및 네트워크 장비 트렌드 정보네트워크 관련 신기술1. Ad-hoc Network 애드 혹 네트워크 재난 현장과 같이 별도의 고정된 유선망을 구축할 수 없는 장소에서 모바일 호스트만을 이용하여 구성한 네트워크 망을 구성한 후 단기간 사용되는 경우나 유선망을 구성하기 어려운 경우에 적합하며, 빠른 망 구성과 저렴한 비용이 장점 2. BLE; Bluetooth Low Energy 저전력 블루투스 기술 일반 블루투스와 동일한 2.4GHz 주파수 대역을 사용하지만 연결되지 않은 대기 상태에서는 절전 모드를 유지하는 기술 주로 낮은 전력으로 저용량 데이터를 처리하는 시계, 장난감, 비콘, 착용 컴퓨터 등의 국소형 사물 인터넷에 적합 3. Cloud Computing 클라우드 컴퓨팅 각종 컴퓨팅 자원을 중앙 컴퓨터에 두고 인터넷 기능을 갖는 단말기로 언제 어디서나 인터넷을 통해 컴퓨터 작업을 수행 중앙 컴퓨터는 복수의 데이터 센터를 가상화 기술로 통합한 대형 데이터 센터로 각종 소프트웨어, 데이터, 보안 솔루션 기능 보유 서비스 종류 IaaS Paas SaaS 4. GIS; Geographic Informatio System 지리 정보 시스템 지리적인 자료를 수집/분석/출력할 수 있는 컴퓨터 응용 시스템으로 위성을 이용해 모든 사물의 위치 정보를 제공해 주는 것 GIS는 지도에서 사물을 확인하는 단계를 벗어나 인터넷, 인공위성 등 다양한 매체를 통해 지리 데이터를 수집/구축/분석/처리 과정을 거쳐 고품질의 공간 정보를 생성함으로써 보다 나은 공간 의사 결정에 도움을 주는 단계에까지 이르고 있음 5. 지능형 초연결망 과학기술정보통신부 주관으로 추진 중인 사업으로 스마트 시티, 스마트 스테이션 등 4차 산업혁명 시대를 맞아 새로운 변화에 따라 급격하게 증가하는 데이터 트래픽을 효과적으로 수용하기 위해 시행되는 정부 주관 사업 6. M2M; Machine to Machine 사물 통신 무선통신을 이용한 기계와 기계 사이의 통신 변압기 원격 감시 전기, 가스 등의 원격 검침 무선 신용카드 조회기 무선 보안 단말기 버스 운행 시스템 위치 추적 시스템 부호 분할 다중 접속(CDMA), GSM, 무선 데이터 통신 등 다양한 무선 통신망을 사용 7. IoT; Internet of Things 사물 인터넷 정보 통신 기술을 기반으로 실세계와 가상세계의 다양한 사물을 인터넷으로 서로 연결하여 진보된 서비스를 제공하기 위한 서비스 기반 기술 M2M의 개념을 인터넷으로 확장하여 사물은 물론, 현실과 가상 세계의 모든 정보와 상호 작용하는 IoT개념으로 진화 IoT 기반 서비스는 개방형 아키텍처를 필용로 하기 때문에 정보공유에 대한 부작용을 초소화하기 위한 정보 보안 기술의 적용이 중요함 8. Mesh Network 메시 네트워크 차세대 이동통신 홈 네트워킹, 공공 안정 등 특수 목적을 위한 새로운 방식의 네트워크 기술로, 대규모 디바이스의 네트워크 생성에 최적화 됨 무선 랜의 한계를 극복하기 위해 라우터들을 기지국으로 활용하여 모든 구간을 동일한 무선망처럼 구성함 9. Mobile Computing 모바일 컴퓨팅 휴대용 기기로 이동하면서 자유로이 네트워크에 접속하여 업무를 처리할 수 있는 환경 모바일 컴퓨팅의 진화로 기업은 비지니스 효율을 극대화하여 경쟁력을 확보하고 개인은 삶의 질을 향상시킬 수 있음 10. MCC; Mobile Cloud Computing 모바일 클라우드 컴퓨팅 클라우드 서비스를 이용하여 소비자와 소비자의 파트너가 모바일기기로 클라우드 컴퓨팅 인프라를 구성하여 여러 가지 정보와 자원을 고유하는 ICT기술을 의미함 모바일의 이동성과 클라우드 컴퓨팅의 경제성이 결합됨 11. NDN; Named Data Networking 콘텐츠 자체의 정보와 라우터 기능만으로 데이터 전송을 수행하는 기술로, 클라이언트와 서버가 패킷의 헤더에 내장되어 있는 주소 정보를 이용하여 연결되던 기존의 IP망을 대체할 새로운 인터넷 아키텍처로 떠오르고 있음 해시 테이블에 기반을 두는 P2P 시스템과 같이 콘텐츠에 담겨 있는 정보와 라우터 기능만으로 목적지를 확정함 12. Network Slicing 네트워크 슬라이싱 3GPP를 포함한 여러 글로벌 이동통신 표준화 단체가 선정한 5G의 핵심 기술 중 하나로, 네트워크에서 하나의 물리적인 코어 네트워크 인프라를 독립한 다수의 가상 네트워크로 분리하여 각각의 네트워크를 통해 다양한 고객 맞춤형 서비스 제공을 목적으로 하는 네트워크 기술 13. NFC; Near Field Communication 근거리 무선 통신 고주파를 이용한 근거리 무선 통ㅅ니 기술 양방향 통신을 지원하는 RFID 기술의 일종이며, 13.56MHz 주파수를 이용해 10cm 내에서 최고 424kbps의 속도로 데이터 전송을 지원 14. NGN; Next Generation Network 차세대 통신망 유선망 기반의 차세대 통신망 15. PICONET 피코넷 여러 개의 독립된 통신장치가 블루투스 기술이나 UWB 통신 기술을 사용하여 통신망르 형성하는 무선 네트워크 기술 네트워크를 구성하는 장비 간에 사전에 네트워크와 정의와 계획없이 상황에 따라 조정 프로토콜에 의하여 마스터와 슬레이브의 역할을 하면서 네트워크를 형성 16. SDN; Software Defined Networking 소프트웨어 정의 네트워킹 네트워크를 컴퓨터처럼 모델링하여 여러 사용자가 각각의 소프트웨어들로 네트워킹을 가상화 하여 제어하고 관리하는 네트퉈크 17. SON; Self Oragnizing Network 자동 구성 네트워크 주변 상황에 맞추어 스스로 망을 구성하는 네트워크 통신망 커버리지 및 전송 용량 확장의 경제성 문제를 해결하고, 망의 운영과 관리의 효율성을 높이는 것을 목적으로 함 18. USN; Ubiquitous Sensor Network 유비쿼터스 센서 네트워크 각종 센서로 수집한 정보를 무선으로 수집할 수 있도록 구성한 네트워크 19. UWB; Ultra WidBand 초광대역 짧은 거리에서 많은 양의 디지털 데이털르 낮은 전력으로 전송하기 위한 무선 기술로 무선 디지털 펄스라고도 하며, 블루투스와 비교되는 기술 20. WBAN; Wireless Body Area Network 웨어러블 또는 몸에 심는 형태의 센서나 기기를 무선으로 연결하는 개인 영역 네트워킹 기술 21. Wi-Sun 와이선 스마트 그리드와 같은 장거리 무선 통신을 필요로 하는 사물인터넷 서비스를 위한 저전력 장거리 통신 기술","link":"/2020/04/28/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B4%80%EB%A0%A8%EC%8B%A0%EA%B8%B0%EC%88%A0/"},{"title":"HW구축관리 - HW 관련 신기술","text":"IT프로젝트정보시스템구축관리HW구축관리 IT 신기술 및 서버장비 트랜드 정보 서버장비 운영(Secure-OS, 운영체제, NAS, DAS, SAN, 고가용성) 용어 사전 Secure-OS 기존의 운영체제에 내재된 보안 취약점을 해소하기 위해 보안 기능을 갖춘 커널을 추가하여 외부의 침입으로 시스테 자원을 보호하는 운영체제 고가용성 High Availability 긴 시간 동안 안정적인 서비스 운영을 위해 장애 발생시 즉시 다른 시스템으로 대체 가능한 환경을 구축하는 메카니즘 HW 관련 신기술1. Three Dimension Printing 3D 프린팅 대상을 평면으로 출력하는 것이 아니라 아주 얇은 두께로 한층 한층 적층시켜 손으로 만질 수 있는 실제 물체로 만들어내는 것 2. 4K Ultra High Definition 4K 해상도 가로 해상도가 4 Kilo Pixel로 차세대 고화질 해상도를 지칭하는 용어 가로 픽셀수 3,840 * 세로 픽셀수 2,160 3. M-DISC, Milennial DISC 엠디스크 한 번의 기록만으로 자료를 영구 보관할 수 있는 광 저장장치 디스크 표면의 무기물층에 레이저를 이용해 자료를 조작해서 기록하므로 빛, 열, 습기 등의 외부요인에 영향을 받지 않음 4. Memristor 멤리스트 메모리와 레지스터의 합성어로 전류의 방향과 양 등 기존의 경험을 모두 기억하는 특별한 소자 전원 공급이 끊어졌을 때도 직전에 통과한 전류의 방향과 양을 기억하기 때문에 다시 전원이 공급되면 기존의 상태로 그대로 복원됨 5. MEMS; Micro-Electro Mechanical System 멤스 초정밀 반도체 제조 기술을 바탕으로 센서, 액추에이터등 기계구조를 다양한 기술로 미세 가공하여 전기기계적 동작을 할 수 있도록 한 초미세 장치 6. Network Virtualization 네트워크 가상화 라우터, 방화벽, 스위치 같은 물리적 네트워크 자원들을 마치 하나의 자원처럼 사용하는 기술로 단일한 네트워크를 여러 개의 가상 네트워크로 구성할 수 있으며, 서로 영향을 주지 않고 네트워크 자원에 액세스하며 일관성 있는 관리 및 보안 정책 유지 가능 7. N-Screen 앤 스크린 N개의 서로 다른 단말기에 동일한 콘텐츠를 자유롭게 이용할 수 있는 서비스 PC, TV, 휴대폰에서 동일한 콘텐츠를 끊기 없이 이용할 수 있음 8. Phablet 패블릿 폰과 태블릿의 합성어로 태블릿 기능을 포함한 5인치 이상의 대화면 스마트폰 9. RAID; Redundant Array of Inexpensive Disk 여러 개의 하드디스크로 디스크 배열을 구성하여 파일을 구성하고 있는 데이터 블록들을 서로 다른 디스크들에 분산 저장할 경우 그 블록들을 여러 디스크에서 동시에 읽거나 쓸 수 있으므로 디스크의 속도가 매우 향상됨 10. Server Virtualization 서버 가상화 CPU, 메모리, 하드디스크 등 서버의 물리적인 자원들을 논리적으로 통합하여 마치 하나의 서버를 통해 서비스를 받는 것처럼 느껴지게 하는 기술 11. Thin Client PC 신 클라이언트 PC 서버 기반 컴퓨팅과 관련되어 신 클라이언트PC는 하드디스크나 주변 장치 없이 기본적인 메모리만 갖추고 서버와 네트워크로 운용되는 개인용 컴퓨터 12. TrustZone Technology 트러스트존 기술 ARM에서 개발한 기술로 하나의 프로세서 내에 일반 애플리케이션을 처리하는 일반구역과 보안이 필요한 애플리케이션으로 처리하는 보안 구역으로 분할하여 관리하는 하드웨어 기반의 보안 기술","link":"/2020/04/30/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/HW%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/HW%EA%B4%80%EB%A0%A8%EC%8B%A0%EA%B8%B0%EC%88%A0/"},{"title":"HW구축관리 - 서버장비 운영","text":"IT프로젝트정보시스템구축관리HW구축관리서버장비 운영 요소1. 서버 장비 운영 요소의 개념 정보처리시스템에 필요한 서버 장비 뿐만 아니라 데이터 저장 장치인 스토리지, 운영체제, 고가용성 장비, 보안 솔루션 등 정보 시스템 운영의 시작부터 끝까지 필요한 모든 것 2. 서버 소프트웨어 유형 서버 SW 유형 주요 기능 비고 운영체제(OS) 시스템에 대한 계정/성능/장애/구성/보안 관리 를 담당 Windwo Server, Unix, LINUX DBMS Data를 효과적이고, 효율적으로 관리하기 위한 관리 시스템 Oracle, MySQL, DB2 보안 솔루션 기밀성, 무결성, 가용성 등 백신ISW, IDS, IPS, Firewall WEB 운영 시스템 자원을 효율적으로 이용하기 위한 가상화 솔루션 Apache, WAS, JEJUS 3. 저장장치(스토리지 시스템) Secure OS1. Secure OS 개념 기존의 운영체제에 내재된 보안 취약점을 해소하기 위해 보안 기능을 갖춘 커널을 추가하여 외부의 침입으로 부터 시스템 자원을 보호하는 운영체제 보안 커널은 보안 기능을 갖춘 커널을 의미하며, TCB 기반으로 참조 모니터의 개념을 구현하고 집행 보안 커널의 보호 대상은 주기억장치와 보조기억장치, 저장 데이터, 하드웨어 장치, 자료 구조, 명령어, 각종 보호 매커니즘 보호방법 논리적분리 프로세스 논리적 구역지정 물리적분리 특정장비만 사용토록 제한 암호적분리 내부 정보 암호화 시간적분리 프로세스 동시실행 방지 구현복잡도 암호적 &gt; 논리적 &gt; 시간적 &gt; 물리적 참조모니터 3가지 특징 Isolation 격리성 Verifiability 검증가능성 Completeness 완전성 2. Secure OS 보안 기능 구분 설명 식별 및 인증 각 접근 주체에 대한 안전하고 고유한 식별 인증 기능 임의적 접근 통제 소속 그룹 또는 개인에 따라 부여된 권한에 따라 접근 통제 DAC 또는 신분기반정책 강제적 접근 통제 접속 단말 및 접속방법, 권한, 요청 객체의 특성 등 여러보안 속성이 고려된 규칙에 따라 강제적으로 접근 통제 MAC 또는 규칙기반 정책 객체재사용보호 메모리에 기존 데이터가 남아있지 않도록 초기화하는 기능 완전한 조정 우회할 수 없도록 모든 접근 경로를 완전하게 통제하는 기능 신뢰 경로 비밀번호 변경 및 권한 설정 등과 같은 보안 작업을 위한 안전한 경로를 제공하는 기능 감사 및 감사기록 축소 모든 보안 관련 사건 및 작업을 기록한 후 보호하는 기능 3. 고가용성1. High Availability 고가용성의 개념 긴 시간동안 안정적인 서비스 운영을 위해 장애 발생시 즉시 다른 시스템으로 대체 가능한 환경을 구축하는 메커니즘 가용성을 극대화 하는 방법 클러스터 두 대 이상의 서버를 하나의 서버처럼 운영하는 기술 이중화 시스템 오류로 데이터베이스 서비스중단이나 물리적 손상발생시 이를 복구하기 위해 동일한 데이터베이스를 복제하여 관리하는 것 2. 고가용성의 필요성 서비스 다운 타임을 최소화함으로써 가용성을 극대화 고가용성으로 기업의 비즈니스 연속성을 확보 기업의 신뢰도 및 경쟁력 향상","link":"/2020/04/30/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/HW%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%EC%84%9C%EB%B2%84%EC%9E%A5%EB%B9%84%EC%9A%B4%EC%98%81/"},{"title":"네트워크구축관리 - 핵심정리","text":"IT프로젝트정보시스템구축관리네트워크구축관리1. IT 신기술 및 네트워크 장비 트렌드 정보- Ad-hoc Network 애드 혹 네트워크 - Cloud Computing 클라우드 컴퓨팅 - IoT; Internet of Things 사물 인터넷 - NDN; Named Data Networking - NFC; Near Field Communication 근거리 무선 통신 - PICONET 피코넷 - USN; Ubiquitous Sensor Network 유비쿼터스 센서 네트워크2. 네트워크 장비(라우터, 백본 스위치)- 네트워크 토폴리지(Topology) 종류 - 성형, 버스형, 링형, 트리형, 망형 - 네트워크 분류 - LAN, MAN, WAN, VAN - 스위치의 분류 - L2, L3, L4, L7 스위치 - Hierarchical 3 Layer 모델 - 액세스 계층, 디스트리뷰션 계층, 코어 계층","link":"/2020/04/30/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"},{"title":"SW개발 보안 설계 - 에러처리","text":"소프트웨어 개발 보안 구축SW개발 보안 설계에러처리의 개념 소프트웨어 실행 중에 발생할 수 있는 오류(Error)들을 사전에 정의하여 오류로 인해 발생할 수 있는 문제들을 예방하기 위한 보안 점검 항목 각 프로그래밍 언어의 예외처리 구문을 통해 오류에 대한 사항을 정의 예외처리 구문으로 처리하지 못한 오류들은 중요정보를 노출시키거나, 소프트웨어의 싫애이 중단되는 등의 문제를 발생 보안 약점의 종류 오류 메시지를 통한 정보 노출 오류 상황 대응 부재 부적절한 예외처리 발생 오류 메시지를 통한 정보노출 오류 발생으로 실행환경, 사용자 정보, 디버깅 정보 등의 중요 정보를 소프트웨어가 메시지로 외부에 노출하는 보안 약점 오류 메시지를 통해 노출되는 경로 및 디버깅 정보는 해커의 악의적인 행위를 도움 예외처리 구문에 예외의 이름이나 스택트레이스를 출력하도록 코딩시 해커는 소프트웨어의 내부구조를 쉽게 파악 가능 스택트레이스 오류가 발생한 위치를 추적하기 위해 소프트웨어가 실행 중에 호출한 메소드의 리스트를 기록한 것 오류 발생 시 가능한 내부에서만 처리되도록 하거나 메시지를 출력할 경우 최소한의 정보만 출력되도록 함으로써 방지 오류 상황에 대한 대응 부재 소프트웨어 개발 중 예외처리를 하지 않았거나 미비로 인해 발생하는 보안 약점 오류가 발생할 수 있는 부분에 예외처리 구문을 작성하고 제어문을 활용하여 오류가 악용되지 않도록 코딩함으로써 방지 부적절한 예외처리 함수의 반환 값 또는 오류들을 세분화하여 처리하지 않고 광범위하게 묶어 한 번에 처리가 존재할 때 발생하는 보안 약점 함수 등이 예상했던 결과와 다른 값을 반환하여 예외로 처리되지 않은 경우 잘못된 값으로 인해 다양한 문제가 발생 가능 모든 함수의 반환 값이 의도대로 출력되는지 확인하고, 세분화된 예외처리를 수행함으로써 방지","link":"/2020/04/27/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%EC%97%90%EB%9F%AC%EC%B2%98%EB%A6%AC/"},{"title":"네트워크구축관리 - 네트워크 장비","text":"IT프로젝트정보시스템구축관리네트워크구축관리네트워크장비Topology 네트워크 설치 구조 네트워크 분류 스위치 분류 스위치는 브리지와 같이 LAN과 LAN을 연결하여 훨씬 큰 LAN을 만드는 장치 OSI계층의 Layer에 따라 L2, L3, L4, L7로 분류 스위치 방식 스위치가 프레임을 전달하는 방식에 따라 Store and Forwarding, Cut-through, Fragment Free로 구분됨 Backbone Switch 백본 스위치 여러 네트워크들을 연결할 때 중추적 역할을 하는 네트워크를 백본이라고 하고, 백본에서 스위칭 역할을 하는 장비를 백본 스위치라고 함 모든 패킷이 지나가는 네트워크의 중심에 배치 대규모 트래픽을 처리하려면 고성능 백본 스위치를 사용 L3 스위치가 담당 네트워크 구축을 위한 Hierarchical 3 Layer 모델","link":"/2020/04/30/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9E%A5%EB%B9%84/"},{"title":"SW개발 보안 설계 - Secure SDLC","text":"소프트웨어 개발 보안 구축SW개발 보안 설계 Secure SDLC 개념과 SDLC 단계별 보안활동에 대한 이해 입력데이터 검증 및 표현, 보안기능, 에러처리, 세션통제 보안 점검의 개념 이해 각각의 보안 약점 및 방지 방법 이해 용어사전 Security Elements 보안요소 소프트웨어 개발에 있어 충족시켜야 할 요소 및 요건을 의미하며, 주요 보안요소에는 기밀성, 무결성, 가용성이 있으며 그 외에 인증, 부인방지가 포함됨 Session Control 세션통제 세션은 서버와 클라이언트의 연결을 의미하고 세션통제는 세션의 연결과 연결로 인해 발생하는 정보를 관리하는 것 Secure SDLC(Software Development Life Cycle) 개념 보안상 안전한 소프트웨어를 개발하기 위해 소프트웨어 개발 생명주기에 보안 강화를 위한 프로세스를 포함한 것 소프트웨어 유지 보수 단계에서 보안 이슈를 해결하기 위해 소모되는 많은 비용을 최소화하기 위해 등장 요구사항 분석, 설계, 구현, 테스트, 유지보수 등 SDLC 전체 단계에 걸쳐 수행되어야 할 보안 활동을 제시 Secure SDLC 단계별 활동1.요구사항 분석 단계에서의 보안 활동 보안 항목에 해당하는 요구사항을 식별하는 작업을 수행 전산화되는 정보가 가지고 있는 보안 수준을 보안 요소별로 등급을 구분하여 분류 보안정책항목들의 출처, 요구수준, 세부내용을 문서화 보안요소 기밀성 시스템 내의 정보와 자원은 인가된 사용자에게만 접근 허용 무결성 시스템 내의 저보는 오직 인가된 사용자만 수정가능 가용성 인가 받은 사용자는 언제든지 사용 가능 인증 시스템 내 정보와 자원을 사용하려는 자가 합법적인 사용자인지 확인 부인방지 데이터를 송/수신한 자가 송/수신 사실을 부인할 수 없도록 증거 제공 2. 설계 단계에서의 보안 활동 식별된 보안 요구사항들을 소프트웨어 설계서에 반영하고, 보안 설계서를 작성 소프트웨어에서 발생할 수 있는 위협을 식별하여 보안대책, 소요예산, 사고발생 시 영향범위와 대응책 수립 환경에 대한 보안 통제 기준 수립 및 설계 반영 네트워크 외부의 사이버 공격으로부터 개발 환경을 보호하기 위해 네트워크를 분리하거나 방화벽 설치 서버 보안이 뛰어난 운영체제를 사용하고 보안 업데이트, 외부접속에 대한 접근통제 실시 물리적 보안 출입통제, 개발 공간 제한, 폐쇄회로 개발프로그램 허가 되지 않은 프로그램을 통제하고 지속적인 데이터 무결성 검사 실시 3. 구현 단계에서의 보안 활동 표준 코딩 정의서 및 소프트웨어 개발 보안 가이드를 준수하며, 설계서에 따라 보안 요구사항들을 구현 갭라 과정 중에는 지속적인 단위 테스트를 통해 소프트웨어에 발생할 수 있는 보안 취약점을 최소화 단위 테스트 프로그램의 단위기능을 구현하는 모듈이 정해진 기능을 정확히 수행하는지 검증 코드 점검 및 소스 코드 진단 작업을 통해 소스 코드의 안정성 확보 4. 테스트 단계에서의 보안 활동 설계 단계에서 작성한 보안 설계서를 바탕으로 보안 사항들이 정확히 반영되고 동작하는지 점검 동적 분석 도구 또는 모의 침투테스트를 통해 설계 단계에서 식별된 위협들의 해결 여부 검증 구현 단계에서 추가로 제시된 위협들과 취약점들을 점검할 수 있도록 테스트 계획을 수립하고 시행 테스트 단계에서 수행한 모든 결과는 문서화, 개발자에게 피드백 5. 유지보수 단계에서의 보안 활동 이전 과정을 모두 수행했음에도 발생할 수 있는 보안사고들을 식별 사고 발생 시 이를 해결하고 보안 패치를 설치 보안 이슈는 유지보수 단계","link":"/2020/04/27/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/Secure_SDLC/"},{"title":"SW개발 보안 설계 - 세션통제","text":"소프트웨어 개발 보안 구축SW개발 보안 설계세션통제의 개념 세션 서버와 클라이언트의 연결 세션통제 세션의 연결과 연결로 인해 발생하는 정보를 관리 소프트웨어 개발 과정 중 요구사항 분석 및 설계단계에서 진단해야 하는 보안 점검 내용 보안 약점 불충분한 세션 관리 잘못된 세션에 의한 정보 노출 인가된 클라이언트만 접근할 수 있도록하는 것은 기밀성에 관한 것 1. 불충분한 세션 관리 일정한 규칙이 존재하는 세션ID가 발급되거나 타임아웃이 너무 길게 설정되어 있는 경우 발생할 수 있는 보안 약점 세션 관리가 충분하지 않으면 침입자는 세션 하이재킹와 같은 공격을 통해 획득한 세션ID로 인가되지 않은 시스템의 기능을 이용하거나 중요한 정보에 접근 가능 2. 잘못된 세션에 의한 정보 노출 다중 스레드 환경에서 멤버 변수에 정보를 저장할 때 발생하는 보안 약점 싱글톤 패턴에서 발생하는 레이스 컨디션으로 인해 동기화 오류가 발생하거나, 멤버 변수의 정보가 노출 싱글톤 하나의 객체를 생성하면 생성된 객체를 어디서든 참조할 수 있지만, 여러 프로세스가 동시에 참조할 수 없는 디자인 패턴 레이스컨디션 두 개 이상의 프로세스가 공용 자원을 획득하기 위해 경쟁하는 상태 멤버 변수보다 지역 변수를 활용하여 변수의 범위를 제한함으로써 방지 세션 설계 시 고려사항 시스템의 모든 페이지에서 로그아웃이 가능하도록 UI 구성 로그아웃 요청시 할당된 세션이 완전히 제거되도록 함 세션 타임아웃은 중요도 높을 시 25분, 낮을실 1530분 이전 세션이 종료되지 않으면 새 세션이 생성되지 못하도록 설계 중복 로그인을 허용하지 않는 경우 클라이언트의 중복 접근에 대한 세션 관리 정책을 수립 패스워드 변경 시 활성화된 세션을 삭제하고 재할당 세션ID의 관리방법 안전한 서버에서 최소 128비트 예측이 불가능하도록 안전한 난수 알고리즘 URL Rewrite기능을 사용하지 않는 방향으로 설계 URL Rewrite 쿠키를 사용할 수 없는 환경에서 세션ID전달을 위해 URLL에 세션ID를 포함시키는 로그인시 로그인 이전의 세션ID를 삭제하고 재할당 장기간 접속하고 있는 세션ID는 주기적으로 재할당되도록 설계","link":"/2020/04/27/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%EC%84%B8%EC%85%98%ED%86%B5%EC%A0%9C/"},{"title":"SW개발 보안 설계 - 입력데이터 검증 및 표현","text":"소프트웨어 개발 보안 구축SW개발 보안 설계입력데이터 검증 및 표현의 개념 폼 양식의 입력란을 통해 입력되는 데이터로 인해 발생하는 문제들을 예방하기 위해 구현 단계에서 검증해야 하는 보안 점검 항목들 입력 데이터로 인해 발생하는 문제를 예방하기 위해서 소프트웨어개발의 구현 단계에서 유효성 검증 체계를 갖추고, 검증되지 않은 데이터가 입력되는 경우 이를 처리할 수 있도록 구현해야 함 입력 데이터를 처리하는 객체에 지정된 자료형이 올바른지 확인하고 일관된 언어셋(Character Set)을 사용하도록 코딩 함 Character Set 컴퓨터에서 처리하기 위해 사용하는 코드표를 의미 ASCII Unicode UTF-8 입력데이터 검증 및 보안 약점 종류 SQL 입력란에 SQL을 삽입하며 무단으로 DB를 조회하거나 조작하는 보안 약점 동적 쿼리에 사용되는 입력 데이터에 예약어 및 특수문자가 입력되지 않게 필터링 되도록 방지 동적쿼리 질의어 코드를 문자열 변수에 넣어 조건에 따라 질의를 동적으로 변경하여 처리하는 방식 XSS 크로스사이트 스크립트 웹페이지에 악의적인 스크립트를 삽입하여 방문자들의 정보를 탈취하거나 비정상적인 기능 수행을 유발하는 보안 약점 HTML 태그의 사용을 제한하거나 스크립트에 삽입되지 않도록 ‘&lt;’, ‘&gt;’ 등의 문자를 다른 문자로 치환함으로써 방지 위험한 형식 파일 업로드 악의적인 명령어가 포함된 스크립트 파일을 업로드함으로써 시스템에 손상을 주거나 시스템을 제어할 수 있는 보안 약점 업로드 되는 파일의 확장자 제한, 파일명의 암호화, 웹사이트와 파일 서버 경로 분리, 실행 속성을 제거하는 드으이 방법으로 방지 경로 조작 및 자원 삽입 데이터 입출력 경로를 조작하여 서버 자원을 수정/삭제할 수 있는 보안 약점 사용자 입력값을 식별자로 사용하는 경우, 경로 순회 공격을 막는 필터를 사용하여 방지 경로 순회 경로를 탐색할때 사용하는 ‘/‘, ‘' 등의 기호를 악용하여 허가되지 않은 파일에 접근하는 방식","link":"/2020/04/27/Engineer_Information_Processing/ch20_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%EC%9E%85%EB%A0%A5%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B2%80%EC%A6%9D%EB%B0%8F%ED%91%9C%ED%98%84/"},{"title":"시스템보안구현 - 로그분석","text":"시스템보안구축시스템보안구현 로그 분석의 개념과 리눅스와 윈도우에서의 주요 로그분석대상을 이해 보안 솔루션의 개념과 보안 솔루션의 종류별 특징을 이해 취약점 분석/평가의 개념과 범위 및 항목, 수행 절차를 이해 로그 분석 로그 시스템 사용에 대한 모든 내역을 기록해 놓은 것 로그 분석을 통해 시스템에 대한 침입 흔적이나 취약점 확인 가능 로그 정보를 이용하면 시스템 침해 사고 발생 시 해킹 흔적이나 공격 기법 파악 가능 Linux 리눅스 로그 var/log 디렉토리에 기록 관리 syslogd 데몬 로그 파일 관리 etc/syslog.conf 읽어 로그 관련 파일들의 위치 파악 후 로그 작업 시작 데몬 사용자의 직접적인 개입없이 특정 상태가 되면 자동으로 동작하는 시스템 프로그램 Linux, Unix 는 데몬 Window 는 서비스 syslog.conf 파일을 수정하여 로그 관련 파일들의 저장 위치와 파일명 변경 가능 리눅스 주요 로그 파일 로그 파일명 데몬 내용 커널로그 /dev/console kernel 커널에 관련된 내용을 관리자에게 알리기 위해 파일로 저장하지 않고 지정된 장치에 표시 부팅로그 /var/log/boot.log boot 부팅 시 나타나는 메시지들을 기록 크론로그 /var/log/cron crond 작업 스케줄러인 crond의 작업 내역을 기록 시스템로그 /var/log/messages syslogd 커널에서 실시간으로 보내오는 메시지들을 기록 보안로그 /var/log/secure xinetd 시스템의 접속에 대한 로그를 기록 FTP로그 /var/log/xferlog ftpd FTP로 접속하는 사용자에 대한 로그를 기록 메일로그 /var/log/mailog sendmail popper 송수신 메일에 대한 로그를 기록 커널 운영체제에서 가장 핵심적인 부분으로 하드웨어를 보호하고 프로그램과 하드웨어 간의 인터페이스 역할을 담당 프로세스 관리 기억장치 관리 파일 관리 입/출력 관리 프로세스 간 통신 데이터 전송 및 변환 커널의 로그파일은 Console Window 윈도우 로그 이벤트 뷰어를 이용하여 이벤트 로그 확인 [제어판]-[관리도구]-[이벤트뷰어] C:\\Windows\\System32\\winevt\\Logs 윈도우 이벤트 뷰어의 로그 로그 내용 응용프로그램 응용프로그램에서 발생하는 이벤트 기록 보안 로그온 시도, 파일이나 객체 생성, 조회, 제거 등의 리소스 사용관련 이벤트 기록 시스템 Windows 시스템 구성요소에 의해 발생하는 이벤트 기록 Setup 프로그램설치와 관련된 이벤트 기록 Forwarded Events 다른 컴퓨터와의 상호작용으로 발생하는 이벤트기록 로그인은 보안 로그 항목에 기록되는 내용","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%EB%A1%9C%EA%B7%B8%EB%B6%84%EC%84%9D/"},{"title":"SW개발 보안 설계 - 보안기능","text":"소프트웨어 개발 보안 구축SW개발 보안 설계보안기능의 개념 소프트웨어 개발의 구현 단계에서 코딩하는 기능인 인증, 접근제어, 기밀성, 암호화등을 올바르게 구현하기 위한 보안 점검 항목들 각 보안 기능들은 서비스 환경이나 취급 데이터에 맞게 처리될 수 있도록 구현 소프트웨어 기능 또는 데이터에 접근하려는 사용자별로 중요도구분하고, 차별화된 인증 방안 적용 개인정보나 인증정보와 같은 중요한 정보의 변조, 삭제, 오남용 등을 방지하기 위해 안전한 암호화 기술 적용 보안기능의 보안 약점 종류 적절한 인증 없이 중요기능 허용 보안검사를 우회하여 인증과정 없이 중요한 정보 또는 기능에 접근 및 변경 중요정보나 기능을 수행하는 페이지에서 재인증 기능을 수행하도록 하여 방지 중요한 자원에 대한 잘못된 권한 설정 권한 설정이 잘못된 자원에서 접근하여 해당 자원을 임의로 사용 인가되지 않은 사용자의 중요 자원에 대한 접근 여부를 검사하므로써 방지 부적절한 인가 접근제어 기능이 없는 실행경로를 통해 정보 또는 권한을 탈취 모든 실행경로에 접근 제어 검사 수행하고 사용자에게는 필요한 접근권한만 부여함으로써 방지 하드코드가된 비밀번호 소스코드 유출 시 내부에 하드코드 된 패스워드를 이용하여 관리자 권한 탈취 패스워드는 암호화하여 별도의 파일에 저장하고 디폴트 패스워드 사용을 피함 취약한 암호화 알고리즘 사용 암호화된 환경설정 파일을 해독하여 비밀번호 등의 중요정보를 탈취 안전한 암호화 알고리즘을 이용하고 업무관련 내용이나 개인정보등은 암호모듈을 이용함으로써 방지 중요정보 평문 저장 및 전송 암호화되지 않은 평문 데이터를 탈취하여 중요한 정보를 획득 HTTPS또는 SSL과 같은 보안 프로토콜을 이용함으로써 방지","link":"/2020/04/27/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%EB%B3%B4%EC%95%88%EA%B8%B0%EB%8A%A5/"},{"title":"시스템보안구현 - 보안솔루션","text":"시스템보안구축시스템보안구현보안솔루션 개념 접근통제, 침입 차단 및 탐지 등을 수행하여 외부로부터 불법적인 침입을 막는 기술 시스템 주요 보안 솔루션 방화벽 IDS 침입 탐지 시스템 IPS 침입 방지 시스템 DLP 데이터 유출 방지 웹 방화벽 VPN NAC Firewall 방화벽 조직 내부의 네트워크와 인터넷 간에 전송되는 정보를 선별하여 수용/거부/수정하는 기능을 가진 침입 차단 시스템 내부 네트워크에서 외부로 나가는 패킷은 그대로 통과시킴 외부에서 내부 네트워크로 들어오는 패킷은 내용을 엄밀히 체크하여 인증된 패킷만 통과시키는 구조 해킹등으로 의한 외부로의 정보 유출을 막기 위해 사용 IDS(Intrusion Detection System) 침입 탐지 시스템 컴퓨터의 비정상적인 사용, 오용, 남용 등을 실시간으로 탐지하는 시스템 내부 사용자의 불법적인 행동과 외부 해킹에 100% 대처는 불가능 문제발생시 해커 침앱 패턴에 대한 추적과 유해 정보 감시 필요 종류 오용탐지 미리 입력해둔 공격 패턴이 감지되면 알려줌 이상탐지 비정상적인 행위나 자원이 사용되면 알려줌 IPS(Intrusion Prevention System) 침입 방지 시스템 방화벽 + 침입 탐지 시스템을 결합 비정상적인 트래픽을 능동적으로 차단하고 격리하는 등의 방어 조치를 취하는 보안 솔루션 침입 탐지 기능으로 패킷을 하나씩 검사한 후 비정상적인 패킷이 탐지되면 방화벽 기능으로 해당 패킷을 차단 DLP)Data Leakage/Loss Prevention) 데이터 유출 방지 내부 정보의 외부 유출을 방지하는 보안 솔루션 사내PC 및 네트워크상의 모든 정보 검색하고 메일, 메신저, 웹하드, 프린트 등의 사용자 행위를 탐지 및 통제함으로써 방지 Web Firewall 웹 방화벽 일반 방화벽이 탐지하지 못하는 SQL 삽입공격, Cross-Site Scripting(XSS) 등의 웹 기반 공격을 방어할 목적으로 만들어진 웹 서버에 특화된 방화벽 웹 관련 공격을 감시하고 도달하기 전에 차단 VPN(Virtual Private Network, 가상 사설 통신망) 인터넷 등 통신 사업자의 공중 네트워크에 암호화 기술을 이용하여 사용자가 마치 자신의 전용 회선을 사용하는 것처럼 해주는 보안 솔루션 암호화된 규격을 통해 인터넷망을 전용선의 사설망을 구축한 것처럼 이용 비용 부담이 줄어듬 원격지의 지사, 이동 근무자가 지역적 제한 없어짐 NAC(Network Access Control) 네트워크에 접속하는 내부PC의 MAC주소를 IP관리시스템에 등록한 후 일관된 보안 관리 기능을 제공하는 보안솔루션 MAC주소 랜카드 48bit 내부PC의 소프트웨어 사용 현황을 관리하여 불법적인 소프트웨어 설치를 방지 일반적인 배포 관리 기능을 이용해 백신이나 보안 패치 등의 설치 및 업그레이드 수행 네트워크에 접속한 비인가된 시스템을 자동으로 검출하여 자산을 관리 ESM(Enterprise Security Management) 다양한 장비에서 발생하는 로그 및 보안 이벤트를 통하여 관리하는 보안 솔루션 로그(방화벽, IDS, IPS, VPN) 및 보안 이벤트를 통합하여 관리함으로써 비용 및 자원 절약 보안 솔루션 간의 상호 연동을 통해 종합적인 보완 관리체계 수립 가능","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%EB%B3%B4%EC%95%88%EC%86%94%EB%A3%A8%EC%85%98/"},{"title":"시스템보안설계 - 서비스공격유형(1)","text":"시스템 보안 설계서비스 공격 유형 서비스 거부 공격의 개념과 서비스 거부 공격의 종류별 특징을 이해 서버 인증과 서버 접근 통제의 개념을 이해하고 인증의 종류와 접근 통제 정책의 종류를 이해 보안아키텍처와 보안 Framework의 개념 및 보안 통제 항목의 종류를 이해 서비스 거부 공격 - 서비스 공격은 일반적으로 서비스 거부(Dos) 공격을 뜻함 - 서버는 서비스 요청에 대해 서비스를 제공하는 의무가 있음 - 서버가 서비스 능력을 초과하는 요청을 도시다발적으로 받게 되면 서비스 불능상태로 마비됨 Ping Flood 하나의 사이트로 많은 양의 ICMP echo request를 요청할 때 이 사이트에서 존재하는 시스템 자원은 개별 메시지들에 각각 응답하기 위해 시스템 자원(resource)를 모두 사용해 버리는 점을 이용 ICMP : Internet Control Message Protocol TCP/IP 기반의 인터넷 통신 서비스에서 인터넷 프로토콜에 결합되어 전송되는 프로토콜로, IP에 대해 통신 중 발생하는 오류 처리와 전송 경로 변경, 에코 요청, 에코 응답 등을 제어하기 위한 메시지를 취급 1ping [주소] Ping of Death Ping 명령을 전송할 때 패킷의 크기를 인터넷 프로토콜 허용 범위(65,536 byte)이상으로 전송하여 공격 대상의 네트워크를 마비시키는 서비스 거부 공격 Ping 기본 크기 : 32byte 1ping -I 100 -n 5 [주소] SMURFING 엄청난 양의 데이터를 한 사이트에 집중적으로 보냄으로써 네트워크를 불능 상태로 만듬 공격자는 패킷의 송신 주소를 공격 대상의 IP주소로 위장하고 해당 네트워크 라우터의 브로드캐스트 주소를 수신지로 하여 패킷을 전송하면 라우터의 브로드캐스트 주소로 수신된 패킷은 해당 네트워크 내의 모든 컴퓨터로 전송함 - Broadcast : 네트워크에 연결된 전체 컴퓨터에 패킷을 전송할 때 사용하는 주소 해당 네트워크 내의 모든 컴퓨터는 수신된 패킷에 대한 응답 메시지를 송신 주소인 공격 대상 컴퓨터로 집중적으로 전송하게 되어 공격 대상지는 네트워크 과부하로 정상적인 서비스 수행이 불가능해짐 SYN Flooding(Synchronize sequence number) TCP는 신뢰성 있는 전송을 위해 3-way-handshake를 거친 후에 데이터를 전송 Client &gt; ServerSYN 패킷 전송대상 서버에 접속한다고 손을 내밈 Server &gt; ClientSYN + ACK 패킷 전송서버에는 접속해도 된다고 응답함 Client &gt; ServerACK(Acknowledgment) 패킷 전송응답메시지를 받으면 데이터를 보냄 공격자가 가상의 클라이언트로 위장한 후 공격 대상지인 서버로 ‘SYN’ 신호를 보냄 서버는 ‘SYN+ACK’신호를 가상의 클라이언트로 보내면서 클라이언트의 접속을 받아들이기 위한 메모리의 일정 공간을 확보함 공격자가 사용할 수 없는 IP 주소를 이용하여 공격 대상지 서버로 반복적인 3-way-handshake 과정을 요청하면 공격 대상지 서버는 메모리 공간을 점점 더 많이 확보한 상태에서 대기하게 됨 대비SYN 수신 대기 시간을 줄이거나 침입 차단 시스템을 활용 TearDrop 데이터의 송수신과정에서 패킷의 크기가 커서 여러 개로 분할되어 전송될 때 분할 순서를 알 수 있도록 Fragment Offset 값을 함께 전송 이때 Offset 값을 변경시켜 수신 측에서 패킷을 재조립할 때 오류로 인한 과부하 발생시켜 시스템 다운 유도 - 일반적으로 128kb로 토막낸다. 8개 - 다시 받을 때 합친다. 대비 - Fragment Offset 잘못된 경우 해당 패킷을 폐기 Land 패킷을 전송할 때 송신 IP주소와 수신 IP주소를 모두 공격 대상의 IP주소로 설정한 후 공격 대상에게 전송하는 것 이 패킷을 받은 공격 대상은 송신 IP주소가 자신이므로 자신에게 응답을 수행하는데 이러한 패킷이 계속해서 전송될 경우 자신에 대해 무한 응답하게 함 대비 송신 IP주소와 수신 IP 주소를 검사 DDoS(Distributed Denial of Service, 분산 서비스 거부) 공격 여러 곳에 분산된 공격 지점에서 한 곳에 서버에 대해 서비스 거부 공격을 수행 일부 호스트에 다수의 에이전트를 관리할 수 있는 핸들러 프로그램을 설치하여 마스터로 지정후 공격 취약점이 있는 호스트들을 탐색한 후 이들에 분산 서비스 공격용 툴을 설치하여 좀비PC로 만듬 분산 서비스 공격용 툴 - Trin00 - TFN - TFN2K - Stacheldraht","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%EC%84%9C%EB%B9%84%EC%8A%A4%EA%B3%B5%EA%B2%A9%EC%9C%A0%ED%98%9501/"},{"title":"시스템보안설계 - 보안아키텍처","text":"시스템 보안 설계보안아키텍처보안 아키텍처의 개념 무결성, 가용성, 기밀성을 확보하기 위해 보안 요소 및 보안 체계를 식별하고 이들 간의 관계를 정의한 구조 보안의 3요소 Integrity 무결성 Availability 가용성 Confidentality 기밀성 관리적, 물리적, 기술적 보안 개념의 수립, 보안 관리 능력의 향상, 일관된 보안 수준의 유지를 기대함 관리적 보안 정보보호 정책 조직 분류 교육 및 훈련 인적 보안 업무 연속성 관리 물리적 보안 건물 및 사물실 출입 통제 지침 전산실 관리 지침 재해 복구 센터 운영 기술적 보안 사용자 인증 접근 제어 서버 네트워크 데이터 보안 수준에 변화가 생겨도 기본 보안 아키텍처의 수정 없이 지원할 수 있어야함 보안 프레임워크의 개념 프레임워크는 뼈대, 골조를 의미 안전한 정보시스템 환경을 유지하고 보안 수준을 향상시키기 위한 체계 ISO 27001은 정보보안 관리를 위한 국제 표준 조직에 대한 정보보안 관리 규격이 정의되어 있어 실제 심사/인증용으로 사용됨","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%EB%B3%B4%EC%95%88%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/"},{"title":"시스템보안구현 - 핵심정리","text":"시스템보안구축시스템보안구현 핵심정리로그분석 로그는 시스템 사용에 대한 모든 내역을 기록해 놓은 것으로 로그를 분석하여 시스템에 대한 침입 흔적이나 취약점 확인 가능 리눅스 주요 로그 파일 로그 파일명 데몬 내용 커널로그 /dev/console kernel 커널에 관련된 내용을 관리자에게 알리기 위해 파일로 저장하지 않고 지정된 장치에 표시 부팅로그 /var/log/boot.log boot 부팅 시 나타나는 메시지들을 기록 크론로그 /var/log/cron crond 작업 스케줄러인 crond의 작업 내역을 기록 시스템로그 /var/log/messages syslogd 커널에서 실시간으로 보내오는 메시지들을 기록 보안로그 /var/log/secure xinetd 시스템의 접속에 대한 로그를 기록 FTP로그 /var/log/xferlog ftpd FTP로 접속하는 사용자에 대한 로그를 기록 메일로그 /var/log/mailog sendmail popper 송수신 메일에 대한 로그를 기록 보안솔루션 접근 통제, 침입차단 및 탐지 등을 수행하는 외부로 부터의 붋법적인 침입을 막는 기술 및 시스템 주요 보안 솔루션 방화벽 IDS 침입 탐지 시스템 IPS 침입 방지 시스템 DLP 데이터 유출 방지 웹 방화벽 VPN NAC 취약점 분석 사이버 위협으로부터 정보시스템의 취약점을 분석 및 평가한 후 개선하는 일련의 과정 수행 절차 및 방법 취약점 분석/평가 계획 수립 취약점 분석/평가 대상 선별 취약점 분석 수행 취약점 평가 수행","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"},{"title":"시스템보안구현 - 취약점분석","text":"시스템보안구축시스템보안구현취약점분석개요 취약점 분석/평가의 개념 사이버 위협으로 부터 정보시스템의 취약점을 분석 및 평가한 후 개선하는 일련의 과정 안정적인 정보시스템의 운영을 방해하는 사이버 위협에 대한 항목별 점검항목 파악후 취약점 분석 수행 취약점이 발견되면 위험 등급 부여 후 개선 방향 수립 범위 및 항목 취약점 분석/평가 범위 및 항목 정보시스템과 정보시스템 자산에 직/간접적으로 관여된 물리적, 관리적, 기술적 분야를 포함 상, 중, 하 3 단계로 중요도 분리 ‘상’인 항목은 필수적으로 점검 ‘중’, ‘하’는 선택적으로 점검 수행 절차 및 방법 취약점 분석/평가 계획 수립 수행주체, 수행절차, 소요예산, 산출물 등의 세부 계획 수립 취약점 분석/평가 대상 선별 자산을 식별하고 유형별로 그룹화하여 평가 대상 목록을 작성 식별된 대상 목록의 각 자산에 대해 중요도 산정 취약점 분석 수행 관리적, 물리적, 기술적 세부 점검 항목표 작성 관리적 점검 정보보호 정책, 지침 등 관련 문서 확인 정보보호 담당자, 시스템 관리자, 사용자 등과 면담 물리적 점검 전산실, 발전실 등 통제구역 현장 점검 기술적 점검 점검도구 모의 해킹 취약점 평가 수행 세부 결과를 작성 위험등급 ‘상,중,하’ 표시 ‘상’ 은 조기 개선 ‘중’, ‘하’ 는 장기 개선으로 구분 후 개선 방향 수립","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/%EC%B7%A8%EC%95%BD%EC%A0%90%EB%B6%84%EC%84%9D/"},{"title":"시스템보안설계 - 핵심정리","text":"시스템보안구축시스템 보안 설계 핵심정리서비스 공격 유형 서비스 거부 공격의 종류 Ping Flood Ping of Death Smurfing SYN Flooding TearDrop Land DDos 네트워크 침해 공격 Smishing APT Spear Phishing Qshing 정보 보안 침해 공격 Botnet Worm Zero Day Attack Ransomeware Trojan Horse Key Logger Attack 서버 인증 보안 서버는 인터넷을 통해 개인정보를 암호화하여 송/수신할 수 있는 기능을 갖춘 서버인증은 다중 사용자 컴퓨터나 시스템이나 네트워크 시스템에서 로그인을 요청한 사용자의 정보를 확인하고 접근 권한을 검증하는 보안 절차 인증의 종류 지식기반인증 소유기반인증 생체기반인증 행위기반인증 서버 접근통제 사용자 및 장비의 접근 필요성에 따라 정보자산에 대한 접근 권한을 부여함으로써 비인가자의 무단 접근을 제한 접근통제의 3요소 정책 메커니즘 보안모델 접근통제 정책 종류 임의적 접근통제 강제적 접근통제 역할기반 접근통제 접근통제 행렬 접근제어(AC) 보안 아키텍처 정보시스템의 무결성, 가용성, 기밀성을 확보하기 위해 보안 요소 및 보안 체계를 식별하고 이들간의 관계를 정의한 구조 관리적, 물리적, 기술적 보안 개념의 수립, 보안관리 능력 향상, 일관된 보안 수준의 유지를 기대 보안 수준에 변화가 생겨도 기본 보안 아키텍처의 수정 없이 지원할 수 있어야 함 보안 요구사항의 변화나 추가를 수용할 수 있어야 함 보안 프레임워크 프레임워크는 뼈대, 골조를 의미 안전한 정보시스템 환경을 유지하고 보안 수준을 향상시키기 위한 체계 ISO 27001은 정보보안 관리를 위한 국제 표준으로 일종의 보안 인증이자 가장 대표적인 보안 프레임워크","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC.md/"},{"title":"시스템보안설계 - 서버접근통제","text":"시스템 보안 설계서버 접근통제Access Control 접근 통제 개념 사용자 및 장비의 접근 필요성에 따라 정보자산에 대한 접근 권한을 부여함으로써 비인가자의 무단 접근을 제한 통제 종류 - 비인가된 사용자의 접근 감시 - 접근 요구자의 사용자 식별 - 접근 요구의 정당성 확인 및 기록 - 보안 정책에 근거한 접근의 승인 및 거부 운동 접근 통제의 3요소 정책 매커니즘 보안모델 접근통제 정책 종류임의적 접근통제 객체에 접근하고자 하는 주체의 접근 권한에 따라 접근 통제를 적용하는 방식 사용자가 접근권한을 임의적으로 추가하거나 철회하는 것이 가능 데이터 소유자가 사용자나 사용자 그룹의 신분에 따라 접근을 제어 기능 신원기반, 사용자 기반통제 방식 사용 강제적 접근통제 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식 제3자가 접근 통제 권한을 지정 최상위보안등급을 가진 자도 모든 자료의 열람은 불가 보안등급, 규칙기반, 관리기반 접근통제 방식으로 모든 주체 및 객체에 대해 일정하며 어느 하나의 주체, 객체 단위로 접근제한을 설정할 수 없음 역할기반 접근통제 임의적 접근통제의 단점을 보완한 기법 비임의적 접근통제 사용자에게 최소한의 권한을 부여함으로 남용을 방지 직무에 따라 허가를 결정하므로 직원변경이 자주되는 구조에서 유리 접근통제 행렬 주체는 열에, 객체는 행에 표시하여 각각에 권한을 부여하는 방법 R : Read, W : Write 접근제어(AC) 사용자에 따라 공유데이터에 접근할 수 있는 권한을 제한하는 방법으로 접근의 허용을 결정하는 인증, 사용자의 행위에 대해 강제적으로 제약하는 인가가 있음 서버보안의 접근통제 3요소 인증 인가 감사","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%EC%84%9C%EB%B2%84%EC%A0%91%EA%B7%BC%ED%86%B5%EC%A0%9C/"},{"title":"시스템보안설계 - 서버인증","text":"시스템 보안 설계서버 인증보안서버 개념 보안서버는 인터넷을 통한 개인정보를 암호화하여 송/수신할 수 잇는 기능을 갖춘 서버 Sniffing(스니핑)을 이용한 정보유출, Phishing(피싱)을 이용한 위조 사이트 등에 대비하기 위해 보안 서버 구축 필요 개인정보의 기술적/관리적 보호조치 기준에 따르면 다음을 갖추어야함 - 서버에 SSL(Secure Socket Laver) 인증서를 설치하여 정송 정볼르 암호화하여 송/수신 하는 기능 - 서버에 암호화 응용 프로그램을 설치하고 전송 정볼르 암호화하여 송/수신하는 기능 Authentication(인증)의 개념 인증은 다중 사용자 컴퓨터 시스템이나 네트워크 시스템에서 로그인을 요청한 사용자의 정보를 확인하고 접근 권한을 검증하는 보안절차 인증의 종류 - 지식기반인증 Something You Know - 소유기반인증 Something You Have - 생체기반인증 Something You Are - 행위기반인증 Something You Do 지식기반인증 사용자가 기억하고 있는 정보를 기반으로 인증을 수행하는 것 사용자의 기억을 기반으로 하므로 관리비용 저렴 인증기법 중 가장 보안에 취약함 예 - 아이디/비밀번호 - 아이핀 소유기반인증 사용자가 소유하고 있는 것을 기반으로 인증하는 것 소유물이 쉽게 도용될 수 있기 대문에 지식기반이나 생체기반 인증방식과 함께 사용 분실 및 도용의 위험이 존재 예 - 신분증 - 스마트 카드 - OTP 생체기반인증 사용자의 고유한 생체 정보를 기반으로 인증을 수행하는 것 사용이 쉽고 도난 위험도 적으며 위조가 어려움 예 - 지문 - 홍채/망막 - 얼굴 - 음성 - 정맥 행위기반인증 사용자의 행동 정보를 이용해 인증 수행 예 - 서명 위치기반인증 인증을 시도하는 위치의 적절성 확인 예 - GPS - IP","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%EC%84%9C%EB%B2%84%EC%9D%B8%EC%A6%9D/"},{"title":"시스템보안설계 - 서비스공격유형(2)","text":"시스템 보안 설계네트워크 침해 공격 용어Smishing 스미싱 문자메시지를 보낸 후 메시지에 있는 인터넷 주소를 클릭하면 악성코드를 설치하여 금융정보 빼냄 APT(Advanced Persistent Threats, 지능형 지속 위협) 특정기업이나 조직 네트워크에 침투해 활동 거점을 마련한 뒤 때를 기다리면서 보안을 무력화하고 정보를 수집한 다음 외부로 빼돌리는 형태의 공격 내부자에게 악성코드가 포함된 이메일을 오랜 기간 동안 꾸준히 발송해 클릭하기를 기다림 스턱스넷과 같이 악성코드가 담긴 USB로 전파 Spear Phishing 스피어 피싱 사회 공학의 한 기법 - Social Engineering : 인간 상호 작용의 깊은 신뢰를 바탕으로 사람들을 속여 정상 보안절차를 깨뜨리기 위한 비기술적 시스템 침입 수단 특정 대상을 선정 후 일반적인 메일로 위장 후 지속적으로 발송하여 발송 메일의 링크나 첨부 파일을 클릭하도록 유도해 사용자의 개인 정보를 탈취 Qshing 큐싱 QR(Quick Rsponse Code)를 통해 악성 앱의 다운로드 유도 정보 보안 침해 공격 용어Botnet 봇넷 악성 프로그램에 감염되어 악의적인 의도로 사용될 수 있는 다수의 컴퓨터들이 네트워크로 연결된 형태 Worm 웜 네트워크를 통해 연속적으로 자신을 복제하여 시스템의 부하를 높임으로써 결국 시스템을 다운시키는 바이러스 Zero Day Attack 제로데이공격 보안 취약점이 발견되었을 때 발견된 취약점의 존재 자체가 널리 공표되기 전에 해당 취약점을 통하여 이루어지는 보안 공격으로 공격의 신속성 의미 Ransomware 랜섬웨어 인터넷 사용자의 컴퓨터에 잠입해 내부 문서나 파일 등을 암호화해 사용자가 열지 못하게 하는 프로그램 암호 해독용 프로그램의 전달을 조건으로 돈을 요구 Trojan Horse 트로이 목마 정상적인 기능을 하는 프로그램으로 위장 프로그램 내에 숨어 있다가 해당 프로그램이 동작할 때 활성화 되어 부작용을 일으킴 자기 복제 능력은 없음 Key Logger Attack 키로거 공격 컴퓨터 사용자의 키보드 움직임을 탐지해 id, pw, 계좌번호 등 같은 개인의 중요한 정보를 몰래 빼가는 해킹","link":"/2020/04/26/Engineer_Information_Processing/ch21_%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/%EC%84%9C%EB%B9%84%EC%8A%A4%EA%B3%B5%EA%B2%A9%EC%9C%A0%ED%98%9502/"},{"title":"DB구축관리 - DB 관련 신기술","text":"IT프로젝트정보시스템구축관리DB구축관리 데이터베이스와 관련된 IT신기술의 종류와 특징을 이해 데이터베이스 관리 기능으로 회복과 병행제어의 개념 이해 데이터베이스 표준화의 개념과 구성요소를 이해 용어사전- 데이터 표준화 - 시스템을 구성하는 데이터 요소의 명칭, 정의, 형식, 규칙에 대한 원칙을 수립하고 적용하는 것DB 관련 신기술1. Big Data 빅데이터 기존의 관리 방법이나 분석체계로는 처리하기 어려운 막대한 양의 정형 또는 비정형 데이터의 집합으로 스마트 단말기의 빠른 확산, 소셜 네트워크 서비스의 활성화, 사물 네트워크의 확대로 데이터 폭발이 가속화됨 3가지 특징 Volume 데이터의 양 Velocity 데이터 생성 속도 Variety 형탱의 다양성 2. Broad Data 브로드 데이터 다양한 채널에서 소비자의 상호 작용을 통해 생성된 기업 마케팅에 있어 효율적이고 다양한 데이터이며, 이전에 사용하지 않거나 알지 못했던 새로운 데이터나 기존 데이터에 가치가 더해진 데이터 다양한 정보를 뜻하는 것으로 소비자의 SNS 활동이나 위치 정보 등이 이에 속함 3. Digital Archiving 늘어나는 정보 자원의 효율적인 관리와 이용을 위해 디지털 정보 자원을 장기적으로 보존하기 위한 작업 아날로그 콘텐츠는 디지털로 변환한 후 압축해서 저장하고, 디지털 콘텐츠도 체계적으로 분류하고 메타 데이터를 만들어 DB화 하는 작업 4. Meta Data 메타 데이터 일련의 데이터를 정리하고 설명해주는 데이터 메타 데이터는 여러 용도로 사용되나 주로 빠르게 검색하거나 내용을 간략화하고 체계적으로하기 위해 많이 사용 5. Data Diet 데이터 다이어트 데이터를 삭제하는 것이 아니라 압축하고, 중복된 정보는 중복을 배재하고 새로운 기준에 따라 나누어 저장하는 작업 인터넷과 이동통신 이용이 늘면서 각 기관/기업의 데이터베이스에 쌓인 방대한 정보를 효율적으로 관리하기 위해 대두된 방안으로 같은 단어가 포함된 데이터들을 한 곳에 모다 두되 필요할 때 제대로 찾아내는 체계를 갖추는 것이 필요 6. Hadoop 하둡 오픈 소스를 기반으로 한 분산 컴퓨팅 플랫폼 7. Tajo 타조 오픈 소스 기반 분산 컴퓨팅 플랫폼인 아파치 하둡 기반의 분산 데이터 웨어하우스 프로젝트로 우리나라가 주도하여 개발 데이터웨어하우스 자료와 창고의 합성어로기업의 의사결정과정에 효과적으로 사용할 수 있또록 에러시스템에 분산되어 있는 데이터를 주체별로 통합축적해 놓은 데이터베이스 대규모 데이터 처리와 실시간 상호 분석 모두 사용 가능","link":"/2020/05/01/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/DB%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/DB%EA%B4%80%EB%A0%A8%EC%8B%A0%EA%B8%B0%EC%88%A0/"},{"title":"HW구축관리 - 핵심정리","text":"IT프로젝트정보시스템구축관리HW구축관리1. IT 신기술 및 서버장비 트렌드 정보 하드웨어 관련 신기술 3D 프린팅 엠디스크 멤리스트 네트워크 가상화 앤 스크린 RAID 서버 가상화 2. 서버장비 운영 서버 장비 운영 요소 서버 장비 뿐만 아니라 스토리지, 운영체제, 고가용성 장비, 보안 솔루션등 정보 시스템 운영에 필요한 모든 것들을 포함 저방 장치 DAS NAS SAN Secure OS 기존의 운영체제에 내재된 보안 취약점을 해소하기 위해 보안 기능을 갖춘 커널을 추가한 운영체제 High Availability 안정적인 서비스 운영을 위해 장애 발생시 즉시 다른 시스템으로 대체 가능한 환경을 구축하는 메커니즘","link":"/2020/05/01/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/HW%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"},{"title":"DB구축관리 - DB 표준화","text":"IT프로젝트정보시스템구축관리DB표준화데이터 표준화의 개념 시스템을 구성하는 데이터 요소의 명칭, 정의, 형식, 규칙에 대한 원칙을 수립하고 적용하는 것 데이터 표준화 작업은 데이터의 정확한 의미를 파악할 수 잇게 할 뿐 만아니라 데이터에 대한 상반된 시각을 조정하는 역할을 수행 데이터 표준화의 대상 데이터 명칭 데이터를 유일하게 구분할 수 있는 유일성, 의미 전달의 충분성, ㄱ리고 업무적 보편성을 갖는 이름으로 정의 데이터 정의 데이터를 제3자의 입장에서도 쉽게 이해할 수 있도록 해당 데이터가 의미하는 범위 및 자격 요건을 규정 데이터 형식 업무 규칙 및 사용 목적과 유사한 데이터에 대해 일관되게 데이터 형식을 정의함으로써 데이터 입력 오류, 통제 위험 등을 최소화 데이터 규칙 기본 값, 허용 값, 허용 범위 등과 같이 발생할 수 있는 데이터 값을 사전에 지정함으로써 데이터의 정합성 및 완전성을 향상 데이터 표준화의 기대효과 동일한 데이터에 대해 동일한 명칭을 지정하면서 명확한 의사소통 가능 표준화된 데이터를 사용하면 필요한 데이터의 의미나 위치 등을 쉽게 파악 가능 데이터 표준에 따라 데이터 형식 및 규칙을 적용하면 입력 오류를 방지하고 잘못된 데이터로 인한 의사 결정의 오류를 줄여 데이터 품질을 향상 데이터 표준에 따라 데이터를 전사적으로 관리하면 시스템 간 데이터 공유 시 데이터 변환이나 정제 작업을 수행하지 않아도 됨 향후 데이터 유지보수 및 운영의 효율성, 관리 비용 절감 가능 데이터 표준 데이터 모델이나 데이터베이스에서 정의할 수 있는 모든 오브젝트를 대상으로 데이터 표준화를 수행하는 것이 이상적이나 주로 관리해야될 필요성이 있는 오브젝트만을 대상으로 데이터 표준화 데이터 표준의 종류 표준 단어 업무에서 사용하고 일정한 의미를 갖고 있는 최소 단위의 단어를 의미 표준 도메인 문자형, 숫자형, 날짜형, 시간형과 같이 칼럼을 성질에 따라 그룹핑한 개념 표준 코드 선택할 수 있는 값을 정형화하기 위해 기준에 맞게 이미 정의된 코드 값 표준 용어 단어, 도메인, 코드 표준이 정의되면 이를 바탕으로 표준 용어를 구성 데이터 관리 조직 전사적으로 수립된 데이터 표준 원칙, 데이터 표준, 데이터 표준 준수 여부 관리 등을 위해서 데이터관리자 역할이 요구됨 데이터 표준화 절차 데이터 표준화 요구사항 수집 데이터표준화와 관련된 요구사항 수집 시스템별 데이터 표준 수집 표준화 현황 진단 데이터 표준 정의 표준화 원칙 정의 표준 용아, 표준 단어, 표준 도메인, 표준 코드 등을 데이터 표준 정의 데이터 표준 확정 데이터 표준 검토, 확정, 공표 데이터 표준 관리 데이터 표준 적용, 준수, 검사 등 데이터 표준 관리절차 수립 데이터 표준 이행","link":"/2020/05/01/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/DB%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/DB%ED%91%9C%EC%A4%80%ED%99%94/"},{"title":"DB구축관리 - 핵심정리","text":"IT프로젝트정보시스템구축관리DB구축관리1. IT신기술 및 데이터베이스 기술 트렌드 정보 빅데이터 브로드 데이터 디지털 아카이빙 메타 데이터 데이터 다이어트 하둡 타조 2. 데이터베이스 관리기능 회복 트랜잭션들을 수행하는 도중에 장애가 발생하여 데이터베이스가 손상되었을 때 손상되기 이전의 정상 상태로 복구하는 작업 병행제어 동시에 여러 개의 트랜잭션을 병행 수행할 때, 동시에 실행되는 트랜잭션들이 데이터베이스의 일관성을 파괴하지 않도록 트랜잭션 간의 상호작용을 제어하는 것 3. 데이터베이스 표준화 시스템을 구성하는 데이터 요소의 명칭, 정의, 형식, 규칙에 대한 원칙을 수립하고 적용하는 것 데이터베이스 표준화 구성요소 데이터 표준 데이터 관리조직 데이터 표준화 절차","link":"/2020/05/01/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/DB%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"},{"title":"DB구축관리 - DB 관리 기능","text":"IT프로젝트정보시스템구축관리DB구축관리DB관리기능회복1. Recovery 회복의 개념 트랜잭션들을 수행하는 도중에 장애가 발생하여 데이터베이스가 손상되었을 때 손상되기 이전의 정상 상태로 복구하는 작업 트랜잭션 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산 2. 장애의 유형 트랜잭션 장애 입력 데이터 오류, 불명확한 데이터, 시스템 자원 요구의 과다등 트랜잭션 내부의 비정상적인 상황으로 인하여 프로그램 실행이 중지되는 현상 시스템 장애 데이터베이스에 손상을 입히지는 않으나 하드웨어 오동작, 소프트웨어의 손상, 교착 상태 등에 의해 모든 트랜잭션의 연속적인 수행에 장애를 주는 현상 미디어 장애 저장장치인 디스크 블록의 손상이나 디스크 헤드의 충돌 등에 의해 데이터베이스의 일부 또는 전부가 물리적으로 손상된 상태 3. Recovery Management 회복 관리기 회복관리기는 DBMS의 구성요소 트랜잭션 실행이 성공적으로 완료되지 못하면 트랜잭션이 데이터베이스에 생성했던 모든 변화를 취소(Undo)시키고 트랜잭션 수행 이전의 원래 상태로 복구하는 역할 메모리 덤프, 로그를 이용하여 회복을 수행 병행제어1. Concurrency Control 병행제어의 개념 동시에 여러 개의 트랜잭션을 병행 수행할 때, 동시에 실행되는 트랜잭션들이 데이터베이스의 일관성을 파괴하지 않도록 트랜잭션 간의 상호작용을 제어하는 것 2. 병행제어의 목적 데이터베이스의 공유를 최대화 시스템의 활용도를 최대화 데이터베이스의 일관성을 유지 사용자에 대한 응답 시간을 최소화 3. 병행수행의 문제점 병행제어 기법에 의한 제어없이 트랜잭션들이 데이터베이스에 동시에 접근하도록 허용하는 경우 발생하는 문제점 문제점 설명 갱신분실 두 개 이상의 트랜잭션이 같은 자료를 공유하여 갱신할 때 갱신 결과의 일부가 없어지는 현상 비완료 의존성 하나의 트랜잭션 수행이 실패한 후 회복되기 전에 다른 트랜잭션이 실패한 갱신 결과를 참조하는 현상 모순성 두 개의 트랜잭션이 병행수행 될 때 원치않는 자료를 이용함으로써 발생하는 문제 연쇄 복귀 병행수행되던 트랜잭션들 중 어느 하나에 문제가 생겨 Rollback하는 경우 다른 트랜잭션도 함께 Rollback되는 현상","link":"/2020/05/01/Engineer_Information_Processing/ch19_IT%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/DB%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/DB%EA%B4%80%EB%A6%AC%EA%B8%B0%EB%8A%A5/"},{"title":"SW개발 방법론 활용 - SW개발 방법론 선정","text":"SW개발방법론활용SW개발방법론선정 소프트웨어 개발 생명주기 모델의 개념과 모델 종류별 특징을 이해 정형화된 개발방법론의 특징을 고려하여 응용 소프트웨어 특성에 맞는 개발방법론을 선정 소프트웨어 공학기술의 요구사항 분석 기법인 요구 공학 방법론을 이해 소프트웨어 비용 산정 모델의 종류와 특징을 이해 용어사전 소프트웨어 개발 생명 주기 타당성검토 -&gt; 분석 -&gt; 설계 -&gt; 개발 -&gt; 테스트 -&gt; 운영 -&gt; 유지보수 -&gt; 폐기단계의 생명주기를 가짐 요구공학 요구사항을 정의하고, 문서화, 관리하는 프로세스 Software Life Cycle 소프트웨어 개발 생명주기 개념 소프트웨어를 어떻게 개발할 것인가에 대한 추상적 표현으로 순차적 또는 병렬적 단계로 나눈 것 소프트웨어 생명주기를 표현하는 형태 소프트웨어 개발 생명주기 타당성검토 -&gt; 분석 -&gt; 설계 -&gt; 개발 -&gt; 테스트 -&gt; 운영 -&gt; 유지보수 -&gt; 폐기 개발자는 문제의 유형이나 개발 방법 등에 다라 특정 모델을 선택 소프트웨어 생명주기 모델 종류 폭포수 모델 프로토타입 모델 나선형 모델 애자일 모델 1. Waterfall Model 폭포수 모델 각 단계를 확실히 완료한 후 그 결과를 검토하고 승인 과정을 거친 후 다음 단계를 진행하는 개발 방법론 고전적 라이프 사이클 패러다임이라고 하며, 개발 과정의 앞 단계가 완료되어야만 다음 단계로 넘어갈 수 있는 선형 순차적 모형 2. Prototype Model 프로토타입 모델 사용자 요구사항을 정확히 파악하기 위해 실제 개발될 소프트웨어에 대한 프로토타입을 만들어 최종 결과물을 예측하는 모형 시제품은 발주자나 개발자 모두에게 공동의 참조 모델을 제공 최종 결과물이 만들어지기 전에 의뢰자가 최종 결과물의 일부 또는 모형을 볼 수 있음 추후 구현 단계에성의 구현의 골격이 됨 소프트웨어 개발이 완료된 시점에서 오류가 발견되는 폭포수 모형의 단점을 보완하기 위한 모형 3. Spiral Model 나선형 모델 보헴이 제안한 것으로, 폭포수 모형과 프로토타입 모형의 장점에 위험 분석 기능을 추가한 모형 나선을 따라 돌 듯이 여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 완벽하게 소프트웨어를 개발하는 것으로 점진적 모형이라고도 함 개발 순서 계획 및 정의 -&gt; 위험 분석 -&gt; 공학적 개발 -&gt; 고객평가 소프트웨어를 개발하면서 발생할 수 있는 위험을 관리하고 최소화하는 것이 목적 비용이 많이 들고 시간이 오래 걸리는 대규모 시스템 구축에 적합함 4. Agile Model 애자일 모델 애자일은 ‘민첩한’, ‘기민한’이라는 의미 스프린트 또는 이터레이션이라고 불리는 짧은 개발 주기를 반복하며 개발과정 진행 각 개발주기마다 만들어지는 결과물에 대한 고객의 평가와 요구를 적극적으로 수용 소규모 프로젝트, 고도로 숙달된 개발자, 급변하는 요구사항에 적합 애자일 개발 핵심 4가지 프로세스와 도구보다 개인과 그들의 협업에 더 가치를 둔다. 포괄적인 문서화보다 제대로 작동하는 소프트웨어에 더 가치를 둔다. 계약 협상보다 고객과의 협력에 더 가치를 둔다. 계획에 따르기보다 변화에 대응하는 것에 더 가치를 둔다. 개발 모형 SCRUM 매일 정해진 시간에 정해진 장소에서 짧은 시간의 개발을 하는 팀을 위한 프로젝트 관리 중심의 방법론 30일 마다 동작 가능한 제품을 제공하는 스프린트(Sprint)를 중심으로 한다. Backlog : 제품과 프로젝트에 대한 요구사항 Sprint : 30일 단위 반복(Iteration)의 짧은 개발기간으로 분리하여 반복적 수행 스크럼미팅 : 매일15분 정도 미팅으로 오늘과 내일의 해야 할 일 계획 수립 스크럼마스터 : 프로젝트 리더, 스크럼 수행 시 문제 인식 및 해결하고자 노력 XP : eXtreme Programming 의사소통 개선과 즉각적인 피드백에 의한 단순한 코딩으로 SW품질을 높이기 위한 방법론 1~3주 반복(Iteration) 5가지 갗치 용기 단순성 의사소통 피드백 존경 Kanban Lean 도요타 생산시스템을 재정립한 경영 방법론인 Lean 시스템의 품질기법을 소프트웨어 개발에 적용한 개발 방법론 낭비요소 제거를 통한 프로세스 향상이 목적 7가지 원칙 낭비제거 품질 내재화 지식 창출 늦은 확정 빠른 인도 사람 존중 전체 최적화 Crystal ASD : Adaptive Software Development FDD : Feature Driven Development DSDM : Dynamic System Development Method DAD : Disciplined Agile Delivery 소프트웨어 개발 방법론의 개념 소프트웨어 개발, 유지보수 등에 필요한 여러 가지 일들의 수행 방법과 이러한 일들을 효율적으로 수행하려는 과정에서 필요한 각종 기법 및 도구를 체계적으로 정리하여 표준화한 것 소프트웨어 개발 방법론의 목적은 소프트웨어 생산성과 품질 향상 개발 방법론의 종류 구조적 방법론 정보공학 방법론 객체지향 방법론 컴포넌트 기반 방법론 애자일 방법론 제품 계열 방법론 1. 구조적 방법론 폭포수 모델과 같이 정형화된 분석 절차에 따라 사용자 요구사항을 파악하여 문서화하는 체계적인 분석 이론 프로그램 로직 중심의 방법론 쉬운 이해 및 검증 가능한 프로그램 코드 생성이 목적 2. 정보공학 방법론 정보시스템 개발에 필요한 관리절차와 작업기법을 체계화한 방법론 자료(Data) 중심의 방법론 대규모 정보시스템을 구축하는데 적합 3. 객체지향 방법론 현실 세계의 개체를 기계의 부품처럼 하나의 객체로 만들어, 객체들을 조립해서 필요한 소프트웨어를 구현하는 방법론 설계 시 자료와 자료에 가해지는 프로세서를 묶어 정의하고 관계를 규명 객체지향 방법론의 구성 요소에는 클래스, 객체, 메시지 특징 캡슐화 정보은닉 추상화 상속성 다형성 4. CBD; Componet Based Development 컴포넌트 기반 방법 기존의 시스템이나 소프트웨어를 구성하는 컴포넌트를 조합하여 하나의 새로운 애플리케이션을 만드는 방법론 컴포넌트의 재사용이 가능하여 시간과 노력을 절감 유지 보수 비용을 최소화하고 생산성 및 품질을 향상 5. Agile 애자일 방법론 고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발 과정을 진행하는 방법론 소규모 프로젝트, 고도로 숙달된 개발자, 급변하는 요구사항에 적합 6. 제품 계열 방법론 특정한 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론 임베디드 소프트웨어를 만드는데 적합 입베디드 SW 디지털TV, 냉장고 등 해당 제품의 특정기능에 맞게 특화되어 제품 자체에 포함된 SW 영역공학 영역 분석, 영역 설계, 핵심 자산을 구현하는 영역 응용공학 제품 요구 분석, 제품 설게, 제품을 구현하는 영역 영역공학과 응용공학의 연계를 위해 제품의 요구사항, 아키텍처, 조립 생산이 필요 소프트웨어 개발 방법론 결정 프로젝트 관리와 재사용 현황을 소프트웨어 개발 방법론에 반영하고, 확정된 소프트웨어 생명 주기와 개발 방법론에 맞춰 소프트웨어 개발 단계, 활동, 작업, 절차 등을 정의하는 것 소프트웨어 개발 방법론 결정 절차 프로젝트 관리와 재사용 현황을 소프트웨어 개발 방법론에 반영 개발 단계별 작업 및 절차를 소프트웨어 생명 주기에 맞춰 수립 결정된 소프트웨어 개발 방법론의 개발 단계별 활동 목적, 작업 내용, 산출물에 대한 매뉴얼 작성","link":"/2020/05/02/Engineer_Information_Processing/ch18_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B0%A9%EB%B2%95%EB%A1%A0/SW%EA%B0%9C%EB%B0%9C%EB%B0%A9%EB%B2%95%EB%A1%A0%EC%84%A0%EC%A0%95/"}],"tags":[{"name":"데이터분석","slug":"데이터분석","link":"/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/"},{"name":"데이터사이언스개념","slug":"데이터사이언스개념","link":"/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A4%EA%B0%9C%EB%85%90/"},{"name":"python 자료형","slug":"python-자료형","link":"/tags/python-%EC%9E%90%EB%A3%8C%ED%98%95/"},{"name":"c 자료형","slug":"c-자료형","link":"/tags/c-%EC%9E%90%EB%A3%8C%ED%98%95/"},{"name":"데이터분석 - 순열 - 조합","slug":"데이터분석-순열-조합","link":"/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D-%EC%88%9C%EC%97%B4-%EC%A1%B0%ED%95%A9/"},{"name":"자연어처리","slug":"자연어처리","link":"/tags/%EC%9E%90%EC%97%B0%EC%96%B4%EC%B2%98%EB%A6%AC/"},{"name":"Anaconda","slug":"Anaconda","link":"/tags/Anaconda/"},{"name":"한국어임베딩","slug":"한국어임베딩","link":"/tags/%ED%95%9C%EA%B5%AD%EC%96%B4%EC%9E%84%EB%B2%A0%EB%94%A9/"},{"name":"embedding","slug":"embedding","link":"/tags/embedding/"},{"name":"NLP배경","slug":"NLP배경","link":"/tags/NLP%EB%B0%B0%EA%B2%BD/"},{"name":"Recurrent Neural Network","slug":"Recurrent-Neural-Network","link":"/tags/Recurrent-Neural-Network/"},{"name":"Machine_Translation","slug":"Machine-Translation","link":"/tags/Machine-Translation/"},{"name":"Vector","slug":"Vector","link":"/tags/Vector/"},{"name":"소프트스킬","slug":"소프트스킬","link":"/tags/%EC%86%8C%ED%94%84%ED%8A%B8%EC%8A%A4%ED%82%AC/"},{"name":"논문","slug":"논문","link":"/tags/%EB%85%BC%EB%AC%B8/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"class","slug":"class","link":"/tags/class/"},{"name":"Sequence_Tagging","slug":"Sequence-Tagging","link":"/tags/Sequence-Tagging/"},{"name":"정보처리기사","slug":"정보처리기사","link":"/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"},{"name":"API오용","slug":"API오용","link":"/tags/API%EC%98%A4%EC%9A%A9/"},{"name":"코드오류","slug":"코드오류","link":"/tags/%EC%BD%94%EB%93%9C%EC%98%A4%EB%A5%98/"},{"name":"핵심정리","slug":"핵심정리","link":"/tags/%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC/"},{"name":"SW개발보안정책","slug":"SW개발보안정책","link":"/tags/SW%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EC%A0%95%EC%B1%85/"},{"name":"SW관련신기술","slug":"SW관련신기술","link":"/tags/SW%EA%B4%80%EB%A0%A8%EC%8B%A0%EA%B8%B0%EC%88%A0/"},{"name":"캡슐화","slug":"캡슐화","link":"/tags/%EC%BA%A1%EC%8A%90%ED%99%94/"},{"name":"암호알고리즘","slug":"암호알고리즘","link":"/tags/%EC%95%94%ED%98%B8%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"네트워크관련신기술","slug":"네트워크관련신기술","link":"/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B4%80%EB%A0%A8%EC%8B%A0%EA%B8%B0%EC%88%A0/"},{"name":"HW관련신기술","slug":"HW관련신기술","link":"/tags/HW%EA%B4%80%EB%A0%A8%EC%8B%A0%EA%B8%B0%EC%88%A0/"},{"name":"서버장비운영","slug":"서버장비운영","link":"/tags/%EC%84%9C%EB%B2%84%EC%9E%A5%EB%B9%84%EC%9A%B4%EC%98%81/"},{"name":"예외처리","slug":"예외처리","link":"/tags/%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC/"},{"name":"네트워크장비","slug":"네트워크장비","link":"/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9E%A5%EB%B9%84/"},{"name":"SDLC","slug":"SDLC","link":"/tags/SDLC/"},{"name":"세션통제","slug":"세션통제","link":"/tags/%EC%84%B8%EC%85%98%ED%86%B5%EC%A0%9C/"},{"name":"입력데이터검증및표현","slug":"입력데이터검증및표현","link":"/tags/%EC%9E%85%EB%A0%A5%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B2%80%EC%A6%9D%EB%B0%8F%ED%91%9C%ED%98%84/"},{"name":"로그분석","slug":"로그분석","link":"/tags/%EB%A1%9C%EA%B7%B8%EB%B6%84%EC%84%9D/"},{"name":"보안기능","slug":"보안기능","link":"/tags/%EB%B3%B4%EC%95%88%EA%B8%B0%EB%8A%A5/"},{"name":"보안솔루션","slug":"보안솔루션","link":"/tags/%EB%B3%B4%EC%95%88%EC%86%94%EB%A3%A8%EC%85%98/"},{"name":"서비스공격유형","slug":"서비스공격유형","link":"/tags/%EC%84%9C%EB%B9%84%EC%8A%A4%EA%B3%B5%EA%B2%A9%EC%9C%A0%ED%98%95/"},{"name":"보안아키텍처","slug":"보안아키텍처","link":"/tags/%EB%B3%B4%EC%95%88%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/"},{"name":"취약점분석","slug":"취약점분석","link":"/tags/%EC%B7%A8%EC%95%BD%EC%A0%90%EB%B6%84%EC%84%9D/"},{"name":"서버접근통제","slug":"서버접근통제","link":"/tags/%EC%84%9C%EB%B2%84%EC%A0%91%EA%B7%BC%ED%86%B5%EC%A0%9C/"},{"name":"서버인증","slug":"서버인증","link":"/tags/%EC%84%9C%EB%B2%84%EC%9D%B8%EC%A6%9D/"},{"name":"네트워크침해공격용어","slug":"네트워크침해공격용어","link":"/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%B9%A8%ED%95%B4%EA%B3%B5%EA%B2%A9%EC%9A%A9%EC%96%B4/"},{"name":"정보보안침해공격용어","slug":"정보보안침해공격용어","link":"/tags/%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88%EC%B9%A8%ED%95%B4%EA%B3%B5%EA%B2%A9%EC%9A%A9%EC%96%B4/"},{"name":"DB관련신기술","slug":"DB관련신기술","link":"/tags/DB%EA%B4%80%EB%A0%A8%EC%8B%A0%EA%B8%B0%EC%88%A0/"},{"name":"DB표준화","slug":"DB표준화","link":"/tags/DB%ED%91%9C%EC%A4%80%ED%99%94/"},{"name":"DB관리기능","slug":"DB관리기능","link":"/tags/DB%EA%B4%80%EB%A6%AC%EA%B8%B0%EB%8A%A5/"},{"name":"SW개발방법론선정","slug":"SW개발방법론선정","link":"/tags/SW%EA%B0%9C%EB%B0%9C%EB%B0%A9%EB%B2%95%EB%A1%A0%EC%84%A0%EC%A0%95/"}],"categories":[{"name":"데이터사이언스","slug":"데이터사이언스","link":"/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A4/"},{"name":"데이터분석","slug":"데이터사이언스/데이터분석","link":"/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A4/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D/"},{"name":"자연어처리","slug":"자연어처리","link":"/categories/%EC%9E%90%EC%97%B0%EC%96%B4%EC%B2%98%EB%A6%AC/"},{"name":"NLP","slug":"자연어처리/NLP","link":"/categories/%EC%9E%90%EC%97%B0%EC%96%B4%EC%B2%98%EB%A6%AC/NLP/"},{"name":"Anaconda","slug":"자연어처리/Anaconda","link":"/categories/%EC%9E%90%EC%97%B0%EC%96%B4%EC%B2%98%EB%A6%AC/Anaconda/"},{"name":"독서","slug":"독서","link":"/categories/%EB%8F%85%EC%84%9C/"},{"name":"논문","slug":"논문","link":"/categories/%EB%85%BC%EB%AC%B8/"},{"name":"파이썬","slug":"파이썬","link":"/categories/%ED%8C%8C%EC%9D%B4%EC%8D%AC/"},{"name":"임베딩","slug":"자연어처리/임베딩","link":"/categories/%EC%9E%90%EC%97%B0%EC%96%B4%EC%B2%98%EB%A6%AC/%EC%9E%84%EB%B2%A0%EB%94%A9/"},{"name":"문법","slug":"파이썬/문법","link":"/categories/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%AC%B8%EB%B2%95/"},{"name":"정보처리기사","slug":"정보처리기사","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"},{"name":"SW구축관리","slug":"정보처리기사/SW구축관리","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/SW%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/"},{"name":"소프트웨어개발보안구현","slug":"정보처리기사/소프트웨어개발보안구현","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%ED%98%84/"},{"name":"네트워크구축관리","slug":"정보처리기사/네트워크구축관리","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/"},{"name":"HW구축관리","slug":"정보처리기사/HW구축관리","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/HW%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/"},{"name":"소프트웨어개발보안구축","slug":"정보처리기사/소프트웨어개발보안구축","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B0%9C%EB%B0%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/"},{"name":"시스템보안구축","slug":"정보처리기사/시스템보안구축","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EA%B5%AC%EC%B6%95/"},{"name":"시스템보안설계","slug":"정보처리기사/시스템보안설계","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/%EC%8B%9C%EC%8A%A4%ED%85%9C%EB%B3%B4%EC%95%88%EC%84%A4%EA%B3%84/"},{"name":"DB구축관리","slug":"정보처리기사/DB구축관리","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/DB%EA%B5%AC%EC%B6%95%EA%B4%80%EB%A6%AC/"},{"name":"SW개발방법론활용","slug":"정보처리기사/SW개발방법론활용","link":"/categories/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/SW%EA%B0%9C%EB%B0%9C%EB%B0%A9%EB%B2%95%EB%A1%A0%ED%99%9C%EC%9A%A9/"}]}